U abort@@GLIBC_2.0
t add_fdes
d adds.7496
t base_from_cb_data
t base_from_object
A __bss_start
t _calloc_dbg
U chdir@@GLIBC_2.0
t classify_object_over_fdes
b colorcorrection
U CommandLine
b completed.5793
d cplus_demangle_builtin_types
d cplus_demangle_operators
T CreateInterface
d __CTOR_END__
d __CTOR_LIST__
b cvar
t __cxa_allocate_dependent_exception
t __cxa_allocate_exception
U __cxa_atexit@@GLIBC_2.1.3
t __cxa_begin_catch
t __cxa_call_terminate
t __cxa_call_unexpected
t __cxa_current_exception_type
t __cxa_demangle
t __cxa_end_catch
w __cxa_finalize@@GLIBC_2.1.3
t __cxa_free_dependent_exception
t __cxa_free_exception
t __cxa_get_exception_ptr
t __cxa_get_globals
t __cxa_get_globals_fast
t __cxa_guard_abort
t __cxa_guard_acquire
t __cxa_guard_release
t __cxa_pure_virtual
t __cxa_rethrow
t __cxa_throw
t d_add_substitution
t d_append_buffer
t d_append_char
t d_append_num
t d_append_string
t d_bare_function_type
t d_call_offset
t d_compact_number
t d_cv_qualifiers
t d_demangle_callback.constprop.18
t d_encoding
t __deregister_frame
t __deregister_frame_info
t __deregister_frame_info_bases
t d_expression
t d_exprlist
t d_expr_primary
t d_find_pack
t d_growable_string_callback_adapter
t d_index_template_argument
U dlclose@@GLIBC_2.0
U dlerror@@GLIBC_2.0
U dl_iterate_phdr@@GLIBC_2.2.4
U dlopen@@GLIBC_2.1
U dlsym@@GLIBC_2.0
t d_make_builtin_type
t d_make_comp
t d_make_empty
t d_make_name
t d_mangled_name
t d_name
t d_number.isra.0
t __do_global_ctors_aux
t __do_global_dtors_aux
t d_operator_name
t d_parmlist
t d_print_array_type.isra.10
t d_print_cast.isra.13.part.14
t d_print_comp
t d_print_expr_op
t d_print_flush
t d_print_function_type.isra.12
t d_print_mod
t d_print_mod_list
t d_print_subexpr
d __dso_handle
t d_source_name
t d_substitution
t d_template_args
t d_template_param
d __DTOR_END__
b dtor_idx.5795
d __DTOR_LIST__
t d_type
t d_unqualified_name
b dwarf_reg_size_table
d DW.ref.__gxx_personality_v0
d DW.ref._ZTISt9exception
a _DYNAMIC
t __dynamic_cast
A _edata
A _end
U Error
t execute_cfa_program
t execute_stack_op
t _expand_dbg
t fde_mixed_encoding_compare
t fde_single_encoding_compare
t fde_unencoded_compare
T _fini
U fputc@@GLIBC_2.0
U fputs@@GLIBC_2.0
t frame_downheap
t frame_dummy
r __FRAME_END__
b frame_hdr_cache
b frame_hdr_cache_head
t frame_heapsort
t __frame_state_for
t _free_dbg
U free@@GLIBC_2.0
t __gcclibcxx_demangle_callback
t get_cie_encoding
U getcwd@@GLIBC_2.0
t get_fde_encoding
a _GLOBAL_OFFSET_TABLE_
t _GLOBAL__sub_I_cvar
t _GLOBAL__sub_I___cxa_pure_virtual
t _GLOBAL__sub_I_eh_alloc.cc
t _GLOBAL__sub_I_g_pShaderUtil
t _GLOBAL__sub_I_s_pInterfaceRegs
t _GLOBAL__sub_I_s_StringCharConversion
t _GLOBAL__sub_I__Z16Q_IsValidUChar32w
t _GLOBAL__sub_I__Z9_V_memsetPvii
t _GLOBAL__sub_I__ZN14ConCommandBase18s_pConCommandBasesE
t _GLOBAL__sub_I__ZN15CUtlBinaryBlockC2Eii
w __gmon_start__
b g_pAsyncFileSystem
b g_pAVI
b g_pBIK
b g_pCVar
b g_pDataCache
b g_pDmeMakefileUtils
b g_pEventSystem
b g_pFullFileSystem
b g_pGameUISystemMgr
b g_pInputStackSystem
b g_pInputSystem
b g_pLocalize
b g_pMatchFramework
b g_pMaterialSystem
b g_pMaterialSystem2
b g_pMaterialSystemDebugTextureInfo
b g_pMaterialSystemHardwareConfig
b g_pMatSystemSurface
b g_pMDLCache
U g_pMemAlloc
b g_pMeshSystem
b g_pNetworkSystem
b g_pPhysics2
b g_pPhysics2ActorManager
b g_pPhysics2ResourceManager
b g_pPhysicsCollision
b g_pPrecacheSystem
b g_pProcessUtils
b g_pQueuedLoader
b g_pRenderDevice
b g_pRenderDeviceMgr
b g_pRenderHardwareConfig
b g_pResourceAccessControl
b g_pResourceSystem
b g_pSceneSystem
b g_pShaderUtil
b g_pSoundEmitterSystem
b g_pSoundSystem
b g_pStudioRender
d g_pszModule
b g_pUtlSortVectorQSortContext
b g_pVGui
b g_pVGuiInput
b g_pVGuiLocalize
b g_pVGuiPanel
b g_pVGuiRenderSurface
b g_pVGuiSchemeManager
b g_pVGuiSurface
b g_pVGuiSystem
b g_pWorldRendererMgr
b g_VBAllocTracker
t __gxx_personality_v0
t __i686.get_pc_thunk.bx
t __i686.get_pc_thunk.cx
t __i686.get_pc_thunk.dx
U iconv_close@@GLIBC_2.1
U iconv@@GLIBC_2.1
U iconv_open@@GLIBC_2.1
T _init
t init_dwarf_reg_size_table
U isalnum@@GLIBC_2.0
U iscntrl@@GLIBC_2.0
U isprint@@GLIBC_2.0
U iswalnum@@GLIBC_2.0
U iswspace@@GLIBC_2.0
d __JCR_END__
d __JCR_LIST__
w _Jv_RegisterClasses
t .L12
t .L155
t .L156
t .L157
t .L158
t .L159
t .L160
t .L161
t .L162
t .L163
t .L164
t .L165
t .L166
t .L167
t .L168
t .L169
t .L17
t .L19
t .L20
t .L214
t .L215
t .L216
t .L217
t .L218
t .L218
t .L219
t .L220
t .L221
t .L222
t .L223
t .L224
t .L225
t .L226
t .L227
t .L228
t .L229
t .L23
t .L230
t .L24
t .L244
t .L25
t .L26
t .L26
t .L271
t .L272
t .L273
t .L274
t .L275
t .L28
t .L29
t .L32
t .L327
t .L328
t .L329
t .L33
t .L330
t .L331
t .L34
t .L35
t .L43
t .L45
t .L46
t .L47
t .L47
t .L48
t .L48
t .L49
t .L50
t .L51
t .L51
t .L52
t .L52
t .L53
t .L53
t .L54
t .L54
t .L542
t .L543
t .L544
t .L545
t .L546
t .L547
t .L549
t .L55
t .L550
t .L551
t .L552
t .L553
t .L554
t .L555
t .L556
t .L557
t .L558
t .L559
t .L56
t .L560
t .L561
t .L562
t .L563
t .L564
t .L565
t .L566
t .L567
t .L568
t .L569
t .L57
t .L570
t .L571
t .L572
t .L573
t .L574
t .L575
t .L576
t .L577
t .L579
t .L58
t .L581
t .L582
t .L583
t .L584
t .L585
t .L586
t .L587
t .L588
t .L589
t .L59
t .L590
t .L591
t .L6
t .L60
t .L61
t .L62
t .L63
t .L64
t .L65
t .L66
t .L663
t .L664
t .L665
t .L666
t .L667
t .L67
t .L68
t .L683
t .L69
t .L7
t .L70
t .L700
t .L71
t .L711
t .L712
t .L713
t .L714
t .L715
t .L716
t .L717
t .L718
t .L719
t .L720
t .L721
t .L722
t .L723
t .L8
t .L9
t linear_search_fdes
U LOG_GENERAL
U LoggingSystem_IsChannelEnabled
U LoggingSystem_Log
t _malloc_dbg
U malloc@@GLIBC_2.0
b marker.7234
b materials
U mbstowcs@@GLIBC_2.0
b mdlcache
b mdllib
U memcmp@@GLIBC_2.0
U memcpy@@GLIBC_2.0
U memmove@@GLIBC_2.0
U memset@@GLIBC_2.0
U Msg
t _msize_dbg
t _nh_malloc_dbg
b object_mutex
b once_regsizes.7669
b p4
U Plat_ExitProcess
U Plat_FloatTime
U Plat_IsInDebugSession
U pow@@GLIBC_2.0
U printf@@GLIBC_2.0
w pthread_cancel@@GLIBC_2.0
w pthread_mutex_lock@@GLIBC_2.0
w pthread_mutex_unlock@@GLIBC_2.0
w pthread_once@@GLIBC_2.0
U rand@@GLIBC_2.0
t read_encoded_value
t read_encoded_value_with_base
t read_sleb128
t read_sleb128
t read_uleb128
t read_uleb128
t _realloc_dbg
U realloc@@GLIBC_2.0
t __register_frame
t __register_frame_info
t __register_frame_info_bases
t __register_frame_info_table
t __register_frame_info_table_bases
t __register_frame_table
t search_object
b seen_objects
t set_fast_math
t size_of_encoded_value
b s_NoEscConversion
B s_pInterfaceRegs
U sprintf@@GLIBC_2.0
U sscanf@@GLIBC_2.0
b s_StringCharConversion
d standard_subs
U stderr@@GLIBC_2.0
U strcasecmp@@GLIBC_2.0
U strchr@@GLIBC_2.0
U strcmp@@GLIBC_2.0
U strcpy@@GLIBC_2.0
U strlen@@GLIBC_2.0
U strncat@@GLIBC_2.0
U strncmp@@GLIBC_2.0
U strnlen@@GLIBC_2.0
U strstr@@GLIBC_2.0
U strtod@@GLIBC_2.0
U strtol@@GLIBC_2.0
U strtoll@@GLIBC_2.0
U strtoul@@GLIBC_2.0
U strtoull@@GLIBC_2.0
b studiorender
b subs.7497
U syscall@@GLIBC_2.0
b terminator.7340
U ___tls_get_addr@@GLIBC_2.3
U tolower@@GLIBC_2.0
U toupper@@GLIBC_2.0
U towlower@@GLIBC_2.0
U towupper@@GLIBC_2.0
t __udivdi3
b unseen_objects
t _Unwind_Backtrace
t _Unwind_DebugHook
t _Unwind_DeleteException
t _Unwind_FindEnclosingFunction
t _Unwind_Find_FDE
t _Unwind_ForcedUnwind
t _Unwind_ForcedUnwind_Phase2
t _Unwind_GetCFA
t _Unwind_GetDataRelBase
t _Unwind_GetGR
t _Unwind_GetIP
t _Unwind_GetIPInfo
t _Unwind_GetLanguageSpecificData
t _Unwind_GetRegionStart
t _Unwind_GetTextRelBase
t _Unwind_IteratePhdrCallback
t _Unwind_RaiseException
t _Unwind_RaiseException_Phase2
t _Unwind_Resume
t _Unwind_Resume_or_Rethrow
t _Unwind_SetGR
t _Unwind_SetIP
t _Unwind_SetSpColumn
t uw_frame_state_for
t uw_init_context_1
t uw_install_context_1
t uw_update_context
t uw_update_context_1
U vsnprintf@@GLIBC_2.0
U vswprintf@@GLIBC_2.2
U Warning
U wcslen@@GLIBC_2.0
U wcsncat@@GLIBC_2.0
U wcsncpy@@GLIBC_2.0
U wcstombs@@GLIBC_2.0
U WriteMiniDump
U DevWarning(char const*, ...)
t HexToValue(char)
t V_FileBase(char const*, char*, int)
t _V_memmove(void*, void const*, int)
t V_snprintf(char*, int, char const*, ...)
t _V_stricmp(char const*, char const*)
t V_strnicmp(char const*, char const*, int)
t V_strnistr(char const*, char const*, int)
t _V_strnlen(char const*, int)
t _V_strrchr(char const*, char)
t V_StrRight(char const*, int, char*, int)
t V_StrSlice(char const*, int, int, char*, int)
t V_StrSubst(char const*, char const*, char const*, char*, int, bool)
t V_strtoi64(char const*, char**, int)
t V_strtowcs(char const*, int, wchar_t*, int)
t V_wcstostr(wchar_t const*, int, char*, int)
t AllocString(char const*, int)
t Q_URLDecode(char*, int, char const*, int)
t Q_URLEncode(char*, int, char const*, int)
t V_ParseLine(char const*, char*, int, bool*)
t V_snwprintf(wchar_t*, int, wchar_t const*, ...)
t _V_strlower(char*)
t V_strtoui64(char const*, char**, int)
t V_vsnprintf(char*, int, char const*, char*)
t _V_wcslower(wchar_t*)
t AllocWString(wchar_t const*, int)
t CopyMemory3D(void*, void const*, int, int, int, int, int, int, int)
t V_FixSlashes(char*, char)
t V_ParseToken(char const*, char*, int, bool*, characterset_t*)
t V_PathsMatch(char const*, char const*)
t V_pretifymem(float, int, bool)
t V_pretifynum(long long)
t V_strcasecmp(char const*, char const*)
t V_vsnwprintf(wchar_t*, int, wchar_t const*, char*)
t iHexCharToInt(char)
t Q_UTF16ToUTF8(unsigned short const*, char*, int, EStringConvertErrorPolicy)
t Q_UTF32ToUTF8(wchar_t const*, char*, int, EStringConvertErrorPolicy)
t Q_UTF8ToUTF16(char const*, unsigned short*, int, EStringConvertErrorPolicy)
t Q_UTF8ToUTF32(char const*, wchar_t*, int, EStringConvertErrorPolicy)
t V_AppendSlash(char*, int, char)
t V_binarytohex(unsigned char const*, int, char*, int)
t V_BinToString(char*, void*, unsigned int)
t V_hextobinary(char const*, int, unsigned char*, int)
t V_SplitString(char const*, char const*, CUtlVector<char*, CUtlMemory<char*, int> >&)
t V_StringToBin(char const*, void*, unsigned int)
t V_strncasecmp(char const*, char const*, int)
t _V_UCS2ToUTF8(unsigned short const*, char*, int)
t _V_UTF8ToUCS2(char const*, int, unsigned short*, int)
t cIntToHexDigit(int)
t Q_URLDecodeRaw(char*, int, char const*, int)
t Q_URLEncodeRaw(char*, int, char const*, int)
t Q_UTF16ToUTF32(unsigned short const*, wchar_t*, int, EStringConvertErrorPolicy)
t Q_UTF32ToUTF16(wchar_t const*, unsigned short*, int, EStringConvertErrorPolicy)
t Q_UTF32ToUTF32(wchar_t const*, wchar_t*, int, EStringConvertErrorPolicy)
t Sys_GetFactory(CSysModule*)
t Sys_GetFactory(char const*)
t Sys_LoadModule(char const*)
t V_BBCodeToHTML(char*, int, char const*, int)
t V_IsMeanSpaceW(wchar_t)
t V_LogMultiline(bool, char const*, char const*, unsigned int, CUtlString&)
t V_RandomString(int)
t V_SetExtension(char*, char const*, int)
t V_SplitString2(char const*, char const**, int, CUtlVector<char*, CUtlMemory<char*, int> >&)
t V_SplitWString(wchar_t const*, wchar_t const*, CUtlVector<wchar_t*, CUtlMemory<wchar_t*, int> >&)
t V_StripLastDir(char*, int)
t V_TokenWaiting(char const*)
t V_vsnprintfRet(char*, int, char const*, char*, bool*)
t ConVar_Register(int, IConCommandBaseAccessor*)
t GetModuleHandle(char const*)
t Q_UChar32ToUTF8(wchar_t, char*)
t Q_UnicodeLength(char const*)
t Q_UnicodeLength(unsigned short const*)
t Q_UnicodeLength(wchar_t const*)
t Q_UnicodeRepair(char*, EStringConvertErrorPolicy)
t Q_UnicodeRepair(unsigned short*, EStringConvertErrorPolicy)
t Q_UnicodeRepair(wchar_t*, EStringConvertErrorPolicy)
t Q_UTF8ToUChar32(char const*, wchar_t&, bool&)
t V_FixupPathName(char*, int, char const*)
t V_IsDeprecatedW(wchar_t)
t V_SplitWString2(wchar_t const*, wchar_t const**, int, CUtlVector<wchar_t*, CUtlMemory<wchar_t*, int> >&)
t V_StripFilename(char*)
t Q_IsValidUChar32(wchar_t)
t Q_UChar32ToUTF16(wchar_t, unsigned short*)
t Q_UnicodeAdvance(char*, int)
t Q_UnicodeAdvance(unsigned short*, int)
t Q_UnicodeAdvance(wchar_t*, int)
t Q_UTF16ToUChar32(unsigned short const*, wchar_t&, bool&)
t Sys_UnloadModule(CSysModule*)
t V_IsAbsolutePath(char const*)
t V_StringToVector(float*, char const*)
t V_StripExtension(char const*, char*, int)
t _V_UCS2ToUnicode(unsigned short const*, wchar_t*, int)
t _V_UnicodeToUCS2(wchar_t const*, int, char*, int)
t _V_UnicodeToUTF8(wchar_t const*, char*, int)
t _V_UTF8ToUnicode(char const*, wchar_t*, int)
t CharacterSetBuild(characterset_t*, char const*)
t ConnectInterfaces(void* (**)(char const*, int*), int)
t ConVar_Unregister()
t isbreakablewspace(wchar_t)
t Q_UnicodeValidate(char const*)
t Q_UnicodeValidate(unsigned short const*)
t Q_UnicodeValidate(wchar_t const*)
t RegisterInterface(void* (*)(char const*, int*), char const*, void**)
t StringAfterPrefix(char const*, char const*)
t Sys_LoadInterface(char const*, char const*, CSysModule**, void**)
t V_ComposeFileName(char const*, char const*, char*, int)
t V_ExtractFilePath(char const*, char*, int)
t V_StringToColor32(color32_s*, char const*)
t ConVar_AppendFlags(ConCommandBase const*, char*, unsigned int)
t Q_UChar32ToUTF8Len(wchar_t)
t Q_UTF16CharsToUTF8(unsigned short const*, int, char*, int, EStringConvertErrorPolicy)
t Q_UTF32CharsToUTF8(wchar_t const*, int, char*, int, EStringConvertErrorPolicy)
t Q_UTF8CharsToUTF16(char const*, int, unsigned short*, int, EStringConvertErrorPolicy)
t Q_UTF8CharsToUTF32(char const*, int, wchar_t*, int, EStringConvertErrorPolicy)
t ReconnectInterface(void* (*)(char const*, int*), char const*)
t ReconnectInterface(void* (*)(char const*, int*), char const*, void**)
t Sys_GetFactoryThis()
t V_BoyerMooreSearch(unsigned char const*, int, unsigned char const*, int)
t V_DefaultExtension(char*, char const*, int)
t V_FixDoubleSlashes(char*)
t V_GetFileExtension(char const*)
t V_MakeAbsolutePath(char*, int, char const*, char const*)
t V_MakeRelativePath(char const*, char const*, char*, int)
t V_RemoveDotSlashes(char*, char)
t V_StringToIntArray(int*, int, char const*)
t Q_UChar32ToUTF16Len(wchar_t)
t Q_URLDecodeInternal(char*, int, char const*, int, bool)
t Q_URLEncodeInternal(char*, int, char const*, int, bool)
t Q_UTF16CharsToUTF32(unsigned short const*, int, wchar_t*, int, EStringConvertErrorPolicy)
t Q_UTF32CharsToUTF16(wchar_t const*, int, unsigned short*, int, EStringConvertErrorPolicy)
t V_IsMeanUnderscoreW(wchar_t)
t V_URLContainsDomain(char const*, char const*)
t DisconnectInterfaces()
t V_StringToFloatArray(float*, int, char const*)
t V_StripTrailingSlash(char*)
t DefaultCompletionFunc(char const*, char (*) [64])
t LengthOfMatchingPaths(char const*, char const*)
t Sys_IsDebuggerPresent()
t V_GetCurrentDirectory(char*, int)
t V_IsValidURLCharacter(char const*, int*)
t V_SetCurrentDirectory(char const*)
t V_UnqualifiedFileName(char const*)
t GetNoEscCharConversion()
t V_ExtractDomainFromURL(char const*, char*, int)
t V_ExtractFileExtension(char const*, char*, int)
t V_GetFileExtensionSafe(char const*)
t V_normalizeFloatString(char*)
t V_StringMatchesPattern(char const*, char const*, int)
t V_StripAndPreserveHTML(CUtlBuffer*, char const*, char const**, unsigned int, unsigned int)
t ConVar_PrintDescription(ConCommandBase const*)
t CreateInterfaceInternal(char const*, int*)
t V_BasicHtmlEntityEncode(char*, int, char const*, int, bool)
t GetCStringCharConversion()
t V_HtmlEntityDecodeToUTF8(char*, int, char const*, int)
t V_StripLeadingWhitespace(char*)
t V_StripSurroundingQuotes(char*)
t V_StripTrailingWhitespace(char*)
t V_StripAndPreserveHTMLCore(CUtlBuffer*, char const*, char const**, unsigned int, char const**, unsigned int, unsigned int)
t V_TranslateLineFeedsToUnix(char*)
t Sys_RunningWithDebugModules()
t V_FixupPathSpaceToUnderscore(char*)
t V_IsValidDomainNameCharacter(char const*, int*)
t _V_stricmp_NegativeForUnequal(char const*, char const*)
t StringAfterPrefixCaseSensitive(char const*, char const*)
t V_AddBackSlashesToSpecialChars(char const*)
U ConMsg(char const*, ...)
t V_atod(char const*)
t V_atof(char const*)
t V_atoi(char const*)
t V_atoi64(char const*)
t nexttoken(char*, char const*, char)
t V_atoui64(char const*)
t _V_memcmp(void const*, void const*, int)
t _V_memcpy(void*, void const*, int)
t _V_memset(void*, int, int)
t V_qsort_s(void*, unsigned int, unsigned int, int (*)(void*, void const*, void const*), void*)
t _V_strcmp(char const*, char const*)
t _V_strcpy(char*, char const*)
t V_stristr(char*, char const*)
t V_stristr(char const*, char const*)
t V_StrLeft(char const*, int, char*, int)
t _V_strlen(char const*)
t V_strncat(char*, char const*, unsigned int, int)
t V_strnchr(char const*, char, int)
t V_strncmp(char const*, char const*, int)
t V_strncpy(char*, char const*, int)
t V_strnlwr(char*, unsigned int)
t _V_strstr(char const*, char const*)
t V_StrTrim(char*)
t _V_strupr(char*)
t _V_wcscmp(wchar_t const*, wchar_t const*)
t V_wcsistr(wchar_t const*, wchar_t const*)
t V_wcsistr(wchar_t*, wchar_t const*)
t _V_wcslen(wchar_t const*)
t V_wcsncat(wchar_t*, wchar_t const*, int, int)
t V_wcsncpy(wchar_t*, wchar_t const*, int)
t _V_wcsupr(wchar_t*)
t operator delete[](void*)
t operator delete(void*)
b guard variable for CShaderAPIEmpty::GetAspectRatioInfo() const::dummy
b guard variable for CShaderAPIEmpty::GetFlashlightState(VMatrix&) const::blah
b guard variable for CShaderAPIEmpty::GetFlashlightStateEx(VMatrix&, ITexture**) const::blah
b guard variable for CShaderAPIEmpty::GetToneMappingScaleLinear() const::dummy
b guard variable for CShaderAPIEmpty::GetCascadedShadowMappingState(ITexture**, bool) const::dummyState
b guard variable for CShaderDeviceEmpty::GetAspectRatioInfo() const::dummy
b s_BreakSet
b s_nCVarFlag
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec4_origin
t AppendPrintf(char*, unsigned int, char const*, ...)
t read_sleb128(unsigned char const*, long*)
t read_uleb128(unsigned char const*, unsigned long*)
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec4_invalid
b s_bRegistered
b s_EmptyConVar
b emergency_used
b g_ShaderShadow
d s_BackSlashMap
r wszCantEndLine
b dependents_used
t get_ttype_entry(lsda_header_info*, unsigned long) [clone .constprop.6]
t Sys_LoadLibrary(char const*)
b emergency_buffer
t get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)
b g_ShaderAPIEmpty
b s_bBuiltBreakSet
d s_nDLLIdentifier
r wszCantBeginLine
b dependents_buffer
t parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*) [clone .constprop.5]
d s_DefaultAccessor
d g_PrintConVarFlags
t read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)
b s_nConnectionCount
r g_BasicHTMLEntities
r g_pInterfaceGlobals
b s_ShaderDeviceEmpty
t Sys_LoadLibraryGuts(char const*)
t check_exception_spec(lsda_header_info*, std::type_info const*, void*, long) [clone .constprop.4]
r g_WhitespaceEntities
b s_nRegistrationCount
t base_of_encoded_value(unsigned char, _Unwind_Context*)
t ShaderInterfaceFactory(char const*, int*)
d s_ShaderDeviceMgrEmpty
t __gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)
r g_Tier1_FullHTMLEntities
b s_pConnectionRegistration
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b s_bRunningWithDebugModules
t read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)
r g_pszSimpleBBCodeReplacements
d s_pConversionArrays_NoEscConversion
b __g_CreateCShaderAPIEmptyIShaderAPI_reg
d s_pConversionArrays_StringCharConversion
t __CreateCShaderAPIEmptyIShaderAPI_interface()
b __g_CreateCShaderDeviceEmptyIShaderDevice_reg
b __g_CreateCShaderShadowEmptyIShaderShadow_reg
b __g_CreateCShaderAPIEmptyIDebugTextureInfo_reg
t __CreateCShaderDeviceEmptyIShaderDevice_interface()
t __CreateCShaderShadowEmptyIShaderShadow_interface()
t __CreateCShaderAPIEmptyIDebugTextureInfo_interface()
b __g_CreateCShaderDeviceMgrEmptyIShaderDeviceMgr_reg
t __CreateCShaderDeviceMgrEmptyIShaderDeviceMgr_interface()
b __g_CreateCShaderAPIEmptyIMaterialSystemHardwareConfig_reg
r s_hex
t __CreateCShaderAPIEmptyIMaterialSystemHardwareConfig_interface()
t V_nibble(char)
t CEmptyMesh::UnlockMesh(int, int, MeshDesc_t&)
t CEmptyMesh::GetMaterial()
t CEmptyMesh::MarkAsDrawn()
t CEmptyMesh::ModifyBegin(bool, int, int, IndexDesc_t&)
t CEmptyMesh::ModifyBegin(int, int, int, int, MeshDesc_t&)
t CEmptyMesh::SetFlexMesh(IMesh*, int)
t CEmptyMesh::SetColorMesh(IMesh*, int)
t CEmptyMesh::ValidateData(int, int, MeshDesc_t const&)
t CEmptyMesh::ValidateData(int, IndexDesc_t const&)
t CEmptyMesh::ValidateData(int, VertexDesc_t const&)
t CEmptyMesh::DrawModulated(Vector4D const&, int, int)
t CEmptyMesh::EndCastBuffer()
t CEmptyMesh::ModifyBeginEx(bool, int, int, int, int, MeshDesc_t&)
t CEmptyMesh::BeginCastBuffer(MaterialIndexFormat_t)
t CEmptyMesh::BeginCastBuffer(unsigned long long)
t CEmptyMesh::DisableFlexMesh()
t CEmptyMesh::SetPrimitiveType(MaterialPrimitiveType_t)
t CEmptyMesh::ComputeMemoryUsed()
t CEmptyMesh::CopyToMeshBuilder(int, int, int, int, int, CMeshBuilder&)
t CEmptyMesh::GetCachedPerFrameMeshData()
t CEmptyMesh::AccessRawHardwareDataStream(unsigned char, unsigned int, unsigned int, void*)
t CEmptyMesh::ReconstructFromCachedPerFrameMeshData(ICachedPerFrameMeshData*)
t CEmptyMesh::Draw(int, int)
t CEmptyMesh::Draw(CPrimList*, int)
t CEmptyMesh::Lock(int, bool, IndexDesc_t&)
t CEmptyMesh::Lock(int, bool, VertexDesc_t&)
t CEmptyMesh::Spew(int, int, MeshDesc_t const&)
t CEmptyMesh::Spew(int, IndexDesc_t const&)
t CEmptyMesh::Spew(int, VertexDesc_t const&)
t CEmptyMesh::Unlock(int, IndexDesc_t&)
t CEmptyMesh::Unlock(int, VertexDesc_t&)
t CEmptyMesh::GetMesh()
t CEmptyMesh::LockMesh(int, int, MeshDesc_t&, MeshBuffersAllocationSettings_t*)
t CEmptyMesh::ModifyEnd(MeshDesc_t&)
t CEmptyMesh::ModifyEnd(IndexDesc_t&)
t CEmptyMesh::CEmptyMesh(bool)
t CEmptyMesh::CEmptyMesh(bool)
t CEmptyMesh::~CEmptyMesh()
t CEmptyMesh::~CEmptyMesh()
t CEmptyMesh::~CEmptyMesh()
t ConCommand::CanAutoComplete()
t ConCommand::AutoCompleteSuggest(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
t ConCommand::Dispatch(CCommand const&)
t ConCommand::ConCommand(char const*, ICommandCallback*, char const*, int, ICommandCompletionCallback*)
t ConCommand::ConCommand(char const*, void (*)(CCommand const&), char const*, int, int (*)(char const*, char (*) [64]))
t ConCommand::ConCommand(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64]))
t ConCommand::ConCommand(char const*, ICommandCallback*, char const*, int, ICommandCompletionCallback*)
t ConCommand::ConCommand(char const*, void (*)(CCommand const&), char const*, int, int (*)(char const*, char (*) [64]))
t ConCommand::ConCommand(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64]))
t ConCommand::~ConCommand()
t ConCommand::~ConCommand()
t ConCommand::~ConCommand()
t CUtlBuffer::ParseToken(characterset_t*, char*, int, bool)
t CUtlBuffer::ParseToken(char const*, char const*, char*, int)
t CUtlBuffer::ConvertCRLF(CUtlBuffer&)
t CUtlBuffer::GetOverflow(int)
t CUtlBuffer::IsBigEndian()
t CUtlBuffer::PutOverflow(int)
t CUtlBuffer::AssumeMemory(void*, int, int, int)
t CUtlBuffer::CheckPeekGet(int, int)
t CUtlBuffer::DetachMemory()
t CUtlBuffer::SetBigEndian(bool)
t CUtlBuffer::EatCPPComment()
t CUtlBuffer::EatWhiteSpace()
t CUtlBuffer::OnGetOverflow(int)
t CUtlBuffer::OnPutOverflow(int)
t CUtlBuffer::SetBufferType(bool, bool)
t CUtlBuffer::EnsureCapacity(int)
t CUtlBuffer::PeekLineLength()
t CUtlBuffer::PeekWhiteSpace(int)
t CUtlBuffer::PeekStringMatch(int, char const*, int)
t CUtlBuffer::GetDelimitedChar(CUtlCharConversion*)
t CUtlBuffer::PeekStringLength()
t CUtlBuffer::PutDelimitedChar(CUtlCharConversion*, char)
t CUtlBuffer::SetOverflowFuncs(bool (CUtlBuffer::*)(int), bool (CUtlBuffer::*)(int))
t CUtlBuffer::SetExternalBuffer(void*, int, int, int)
t CUtlBuffer::AddNullTermination(int)
t CUtlBuffer::GetDelimitedString(CUtlCharConversion*, char*, int)
t CUtlBuffer::PutDelimitedString(CUtlCharConversion*, char const*)
t CUtlBuffer::ActivateByteSwapping(bool)
t CUtlBuffer::CheckArbitraryPeekGet(int, int&)
t CUtlBuffer::GetDelimitedCharInternal(CUtlCharConversion*)
t CUtlBuffer::PeekDelimitedStringLength(CUtlCharConversion*, bool)
t CUtlBuffer::Get(void*, int)
t CUtlBuffer::Put(void const*, int)
t CUtlBuffer::Swap(CUtlMemory<unsigned char, int>&)
t CUtlBuffer::Swap(CUtlBuffer&)
t CUtlBuffer::Scanf(char const*, ...)
t CUtlBuffer::Printf(char const*, ...)
t CUtlBuffer::GetLine(char*, int)
t CUtlBuffer::GetUpTo(void*, int)
t CUtlBuffer::PeekGet(int, int)
t CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
t CUtlBuffer::SeekPut(CUtlBuffer::SeekType_t, int)
t CUtlBuffer::VaScanf(char const*, char*)
t CUtlBuffer::CheckGet(int)
t CUtlBuffer::CheckPut(int)
t CUtlBuffer::GetToken(char const*)
t CUtlBuffer::VaPrintf(char const*, char*)
t CUtlBuffer::GetString(char*, int)
t CUtlBuffer::PutString(char const*)
t CUtlBuffer::CUtlBuffer(int, int, int)
t CUtlBuffer::CUtlBuffer(void const*, int, int)
t CUtlBuffer::CUtlBuffer(int, int, int)
t CUtlBuffer::CUtlBuffer(void const*, int, int)
t CUtlMemory<CUtlString, int>::Grow(int)
t CUtlMemory<unsigned char, int>::ConvertToGrowableMemory(int) [clone .part.32]
t CUtlMemory<unsigned char, int>::Grow(int)
t CUtlMemory<unsigned char, int>::Purge()
t CUtlMemory<char*, int>::Grow(int)
t CUtlMemory<void (*)(IConVar*, char const*, float), int>::Grow(int)
t CUtlMemory<void (*)(IConVar*, char const*, float), int>::~CUtlMemory()
t CUtlMemory<void (*)(IConVar*, char const*, float), int>::~CUtlMemory()
t CUtlMemory<char const*, int>::Grow(int)
t CUtlMemory<wchar_t*, int>::Grow(int)
t CUtlString::MatchesPattern(CUtlString const&, int)
t CUtlString::StripTrailingSlash()
t CUtlString::UnqualifiedFilename()
t CUtlString::Get()
t CUtlString::Set(char const*)
t CUtlString::Left(int)
t CUtlString::Purge()
t CUtlString::Right(int)
t CUtlString::Slice(int, int)
t CUtlString::Append(char const*)
t CUtlString::Format(char const*, ...)
t CUtlString::AbsPath(char const*)
t CUtlString::DirName()
t CUtlString::FormatV(char const*, char*)
t CUtlString::Replace(char, char)
t CUtlString::ToLower()
t CUtlString::PathJoin(char const*, char const*)
t CUtlString::SetDirect(char const*, int)
t CUtlString::SetLength(int)
t CUtlString::operator=(char const*)
t CUtlString::operator=(CUtlString const&)
t CUtlString::CUtlString(char const*)
t CUtlString::CUtlString(void const*, int)
t CUtlString::CUtlString(void*, int, int)
t CUtlString::CUtlString(CUtlString const&)
t CUtlString::CUtlString()
t CUtlString::CUtlString(char const*)
t CUtlString::CUtlString(void const*, int)
t CUtlString::CUtlString(void*, int, int)
t CUtlString::CUtlString(CUtlString const&)
t CUtlString::CUtlString()
t CUtlString::operator+=(char)
t CUtlString::operator+=(double)
t CUtlString::operator+=(int)
t CUtlString::operator+=(char const*)
t CUtlString::operator+=(CUtlString const&)
t CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >::InsertBefore(int, CUtlString const&)
t CUtlVector<char*, CUtlMemory<char*, int> >::InsertBefore(int, char* const&)
t CUtlVector<void (*)(IConVar*, char const*, float), CUtlMemory<void (*)(IConVar*, char const*, float), int> >::InsertBefore(int, void (* const&)(IConVar*, char const*, float))
t CUtlVector<void (*)(IConVar*, char const*, float), CUtlMemory<void (*)(IConVar*, char const*, float), int> >::~CUtlVector()
t CUtlVector<void (*)(IConVar*, char const*, float), CUtlMemory<void (*)(IConVar*, char const*, float), int> >::~CUtlVector()
t CUtlVector<char const*, CUtlMemory<char const*, int> >::InsertBefore(int, char const* const&)
t CUtlVector<char const*, CUtlMemory<char const*, int> >::Remove(int)
t CUtlVector<wchar_t*, CUtlMemory<wchar_t*, int> >::InsertBefore(int, wchar_t* const&)
t __cxxabiv1::__terminate(void (*)())
t __cxxabiv1::__unexpected(void (*)())
t __cxxabiv1::__forced_unwind::~__forced_unwind()
t __cxxabiv1::__forced_unwind::~__forced_unwind()
t __cxxabiv1::__forced_unwind::~__forced_unwind()
t __cxxabiv1::__foreign_exception::~__foreign_exception()
t __cxxabiv1::__foreign_exception::~__foreign_exception()
t __cxxabiv1::__foreign_exception::~__foreign_exception()
d __cxxabiv1::__terminate_handler
d __cxxabiv1::__unexpected_handler
t IAppSystem::IsSingleton()
t CEmptyConVar::SetValue(float)
t CEmptyConVar::SetValue(int)
t CEmptyConVar::SetValue(char const*)
t CEmptyConVar::~CEmptyConVar()
t CEmptyConVar::~CEmptyConVar()
t CEmptyConVar::~CEmptyConVar()
b (anonymous namespace)::emergency_mutex
t (anonymous namespace)::Q_UTF32ToUChar32(wchar_t const*, wchar_t&, bool&)
t int (anonymous namespace)::Q_UnicodeConvertT<wchar_t, wchar_t, true, (anonymous namespace)::Q_UTF32ToUChar32(wchar_t const*, wchar_t&, bool&), (anonymous namespace)::Q_UChar32ToUTF32Len(wchar_t), (anonymous namespace)::Q_UChar32ToUTF32(wchar_t, wchar_t*)>(wchar_t const*, int, wchar_t*, int, EStringConvertErrorPolicy) [clone .isra.4]
t InterfaceReg::InterfaceReg(void* (*)(), char const*)
t InterfaceReg::InterfaceReg(void* (*)(), char const*)
t AsianWordWrap::CanEndLine(wchar_t)
t AsianWordWrap::CanBeginLine(wchar_t)
t AsianWordWrap::CanBreakAfter(wchar_t const*)
t AsianWordWrap::CanBreakRepeated(wchar_t)
t IShaderDevice::OnDebugEvent(char const*)
t CBaseAppSystem<IShaderDeviceMgr>::GetDependencies()
t CBaseAppSystem<IShaderDeviceMgr>::GetTier()
t CBaseAppSystem<IShaderDeviceMgr>::Reconnect(void* (*)(char const*, int*), char const*)
t ConCommandBase::CopyString(char const*)
t ConCommandBase::RemoveFlags(int)
b ConCommandBase::s_pAccessor
b ConCommandBase::s_pConCommandBases
t ConCommandBase::Init()
t ConCommandBase::Create(char const*, char const*, int)
t ConCommandBase::GetNext()
t ConCommandBase::AddFlags(int)
t ConCommandBase::Shutdown()
t ConCommandBase::ConCommandBase(char const*, char const*, int)
t ConCommandBase::ConCommandBase()
t ConCommandBase::ConCommandBase(char const*, char const*, int)
t ConCommandBase::ConCommandBase()
t ConCommandBase::~ConCommandBase()
t ConCommandBase::~ConCommandBase()
t ConCommandBase::~ConCommandBase()
t CShaderAPIEmpty::BeginFrame()
t CShaderAPIEmpty::FogColor3f(float, float, float)
t CShaderAPIEmpty::LoadMatrix(float*)
t CShaderAPIEmpty::MatrixMode(MaterialMatrixMode_t)
t CShaderAPIEmpty::MultMatrix(float*)
t CShaderAPIEmpty::PickMatrix(int, int, int, int)
t CShaderAPIEmpty::PushMatrix()
t CShaderAPIEmpty::ReadPixels(int, int, int, int, unsigned char*, ImageFormat, ITexture*)
t CShaderAPIEmpty::ReadPixels(Rect_t*, Rect_t*, unsigned char*, ImageFormat, int)
t CShaderAPIEmpty::RenderPass(unsigned char const*, int, int)
t CShaderAPIEmpty::ShaderLock()
t CShaderAPIEmpty::TexImage2D(int, int, ImageFormat, int, int, int, ImageFormat, bool, void*)
t CShaderAPIEmpty::BindTexture(Sampler_t, TextureBindFlags_t, int)
t CShaderAPIEmpty::EndPIXEvent()
t CShaderAPIEmpty::FindTexture(char const*)
t CShaderAPIEmpty::FlipCulling(bool)
t CShaderAPIEmpty::FogColor3fv(float const*)
t CShaderAPIEmpty::FogColor3ub(unsigned char, unsigned char, unsigned char)
t CShaderAPIEmpty::GetFlexMesh()
t CShaderAPIEmpty::SpinPresent(unsigned int)
t CShaderAPIEmpty::UseSnapshot(short)
t CShaderAPIEmpty::ClearBuffers(bool, bool, bool, int, int)
t CShaderAPIEmpty::FlipCullMode()
t CShaderAPIEmpty::FogColor3ubv(unsigned char const*)
t CShaderAPIEmpty::LoadIdentity()
t CShaderAPIEmpty::PerspectiveX(double, double, double, double)
t CShaderAPIEmpty::RecordString(char const*)
t CShaderAPIEmpty::SceneFogMode(MaterialFogMode_t)
t CShaderAPIEmpty::SetClipPlane(int, float const*)
t CShaderAPIEmpty::SetPIXMarker(unsigned long, char const*)
t CShaderAPIEmpty::SetSRGBWrite(bool)
t CShaderAPIEmpty::SetViewports(int, ShaderViewport_t const*, bool)
t CShaderAPIEmpty::ShaderUnlock()
t CShaderAPIEmpty::TakeSnapshot()
t CShaderAPIEmpty::TexMagFilter(ShaderTexFilterMode_t)
t CShaderAPIEmpty::TexMinFilter(ShaderTexFilterMode_t)
t CShaderAPIEmpty::BeginPIXEvent(unsigned long, char const*)
t CShaderAPIEmpty::ClearColor3ub(unsigned char, unsigned char, unsigned char)
t CShaderAPIEmpty::ClearColor4ub(unsigned char, unsigned char, unsigned char, unsigned char)
t CShaderAPIEmpty::CreateTexture(int, int, int, ImageFormat, int, int, int, char const*, char const*)
t CShaderAPIEmpty::DeleteTexture(int)
t CShaderAPIEmpty::DrawInstances(int, MeshInstanceData_t const*)
t CShaderAPIEmpty::FlushHardware()
t CShaderAPIEmpty::FogMaxDensity(float)
t CShaderAPIEmpty::GetSubDHeight()
t CShaderAPIEmpty::ModifyTexture(int)
t CShaderAPIEmpty::SelectionMode(bool)
t CShaderAPIEmpty::SetHDREnabled(bool)
t CShaderAPIEmpty::TexSubImage2D(int, int, int, int, int, int, int, ImageFormat, int, bool, void*)
t CShaderAPIEmpty::UpdateTexture(int, int, int, int, int, int)
t CShaderAPIEmpty::ClearBuffersEx(bool, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)
t CShaderAPIEmpty::ClearSnapshots()
t CShaderAPIEmpty::CreateTextures(int*, int, int, int, int, ImageFormat, int, int, int, char const*, char const*)
t CShaderAPIEmpty::EnableFastClip(bool)
t CShaderAPIEmpty::GetDynamicMesh(IMaterial*, int, bool, IMesh*, IMesh*)
t CShaderAPIEmpty::GetMaxToRender(IMesh*, bool, int*, int*)
t CShaderAPIEmpty::LoadBoneMatrix(int, float const*)
t CShaderAPIEmpty::PopDeformation()
t CShaderAPIEmpty::SetFlexWeights(int, int, MorphWeight_t const*)
t CShaderAPIEmpty::SetHeightClipZ(float)
t CShaderAPIEmpty::SetRasterState(ShaderRasterState_t const&)
t CShaderAPIEmpty::SetScissorRect(int, int, int, int, bool)
t CShaderAPIEmpty::SupportsFetch4()
t CShaderAPIEmpty::TexSetPriority(int)
t CShaderAPIEmpty::UpdateGameTime(float)
t CShaderAPIEmpty::BindIndexBuffer(IIndexBuffer*, int)
t CShaderAPIEmpty::BindPixelShader(PixelShaderHandle_t__*)
t CShaderAPIEmpty::ChangeVideoMode(ShaderDeviceInfo_t const&)
t CShaderAPIEmpty::EnableClipPlane(int, bool)
t CShaderAPIEmpty::GetFogDistances(float*, float*, float*)
t CShaderAPIEmpty::GetSceneFogMode()
t CShaderAPIEmpty::MultMatrixLocal(float*)
t CShaderAPIEmpty::OwnGPUResources(bool)
t CShaderAPIEmpty::PushDeformation(DeformationBase_t const*)
t CShaderAPIEmpty::ReadPixelsAsync(int, int, int, int, unsigned char*, ImageFormat, ITexture*, CThreadEvent*)
t CShaderAPIEmpty::SelectionBuffer(unsigned int*, int)
t CShaderAPIEmpty::SetDefaultState()
t CShaderAPIEmpty::SetRenderTarget(int, int)
t CShaderAPIEmpty::SetStencilState(ShaderStencilState_t const&)
t CShaderAPIEmpty::AntiAliasingHint(int)
t CShaderAPIEmpty::BindVertexBuffer(int, IVertexBuffer*, int, int, int, unsigned long long, int)
t CShaderAPIEmpty::BindVertexShader(VertexShaderHandle_t__*)
t CShaderAPIEmpty::CompareSnapshots(short, short)
t CShaderAPIEmpty::EnableHWMorphing(bool)
t CShaderAPIEmpty::GetD3DTexturePtr(int)
t CShaderAPIEmpty::GetDynamicMeshEx(IMaterial*, unsigned long long, int, bool, IMesh*, IMesh*)
t CShaderAPIEmpty::GetPixelFogCombo()
t CShaderAPIEmpty::GetSceneFogColor(unsigned char*)
t CShaderAPIEmpty::HandleDeviceLost()
t CShaderAPIEmpty::PopSelectionName()
t CShaderAPIEmpty::ResetRenderState(bool)
t CShaderAPIEmpty::SceneFogColor3ub(unsigned char, unsigned char, unsigned char)
t CShaderAPIEmpty::SetFastClipPlane(float const*)
t CShaderAPIEmpty::SetLightingState(MaterialLightingState_t const&)
t CShaderAPIEmpty::SetVSNearAndFarZ(int)
t CShaderAPIEmpty::SupportsCSAAMode(int, int)
t CShaderAPIEmpty::SupportsMSAAMode(int)
t CShaderAPIEmpty::BindVertexTexture(VertexTextureSampler_t, int)
t CShaderAPIEmpty::EndGeneratingCSMs()
t CShaderAPIEmpty::ForceHardwareSync()
t CShaderAPIEmpty::GetGPUMemoryStats(GPUMemoryStats&)
t CShaderAPIEmpty::IsTextureResident(int)
t CShaderAPIEmpty::LoadCameraToWorld()
t CShaderAPIEmpty::LoadSelectionName(int)
t CShaderAPIEmpty::PushSelectionName(int)
t CShaderAPIEmpty::SetDisallowAccess(bool)
t CShaderAPIEmpty::SetHeightClipMode(MaterialHeightClipMode_t)
t CShaderAPIEmpty::SetLightingOrigin(Vector)
t CShaderAPIEmpty::SetNumBoneWeights(int)
t CShaderAPIEmpty::SetRenderTargetEx(int, int, int)
t CShaderAPIEmpty::UserClipTransform(VMatrix const&)
t CShaderAPIEmpty::BindGeometryShader(GeometryShaderHandle_t__*)
t CShaderAPIEmpty::CreateDepthTexture(ImageFormat, int, int, char const*, bool, bool)
t CShaderAPIEmpty::SetFlashlightState(FlashlightState_t const&, VMatrix const&)
t CShaderAPIEmpty::BeginGeneratingCSMs()
t CShaderAPIEmpty::BindStandardTexture(Sampler_t, TextureBindFlags_t, StandardTextureId_t)
t CShaderAPIEmpty::ClearSelectionNames()
t CShaderAPIEmpty::GetDebugTextureList()
t CShaderAPIEmpty::OverrideDepthEnable(bool, bool, bool)
t CShaderAPIEmpty::SetAmbientLightCube(Vector4D*)
t CShaderAPIEmpty::SetAnisotropicLevel(int)
t CShaderAPIEmpty::SetPixelShaderIndex(int)
t CShaderAPIEmpty::SetSkinningMatrices(MeshInstanceData_t const&)
t CShaderAPIEmpty::UpdateStereoTexture(int, bool*)
t CShaderAPIEmpty::DestroyVertexBuffers(bool)
t CShaderAPIEmpty::EnableGetAllTextures(bool)
t CShaderAPIEmpty::ExecuteCommandBuffer(unsigned char*)
t CShaderAPIEmpty::ForceDepthFuncEquals(bool)
t CShaderAPIEmpty::GetTextureDimensions(int, int&, int&, int&)
t CShaderAPIEmpty::GetTextureMemoryUsed(IDebugTextureInfo::TextureMemoryType)
t CShaderAPIEmpty::LockDebugTextureList()
t CShaderAPIEmpty::SetFlashlightStateEx(FlashlightState_t const&, VMatrix const&, ITexture*)
t CShaderAPIEmpty::SetScreenSizeForVPOS(int)
t CShaderAPIEmpty::SetTextureFilterMode(Sampler_t, TextureFilterMode_t)
t CShaderAPIEmpty::SetVertexShaderIndex(int)
t CShaderAPIEmpty::DisableAllLocalLights()
t CShaderAPIEmpty::DXSupportLevelChanged(int)
t CShaderAPIEmpty::EnableAlphaToCoverage()
t CShaderAPIEmpty::EvictManagedResources()
t CShaderAPIEmpty::GetLightmapDimensions(int*, int*)
t CShaderAPIEmpty::GetMaxIndicesToRender()
t CShaderAPIEmpty::PerpareForCascadeDraw(int, float, float)
t CShaderAPIEmpty::PerspectiveOffCenterX(double, double, double, double, double, double, double, double)
t CShaderAPIEmpty::AcquireThreadOwnership()
t CShaderAPIEmpty::DisableAlphaToCoverage()
t CShaderAPIEmpty::EnableDebugTextureList(bool)
t CShaderAPIEmpty::GetMaxVerticesToRender(IMaterial*)
t CShaderAPIEmpty::GetVertexModifyBuilder()
t CShaderAPIEmpty::MarkUnusedVertexFields(unsigned int, int, bool*)
t CShaderAPIEmpty::ReleaseThreadOwnership()
t CShaderAPIEmpty::SetCSMAccurateBlending(bool)
t CShaderAPIEmpty::SetPixelShaderConstant(int, float const*, int, bool)
t CShaderAPIEmpty::UnlockDebugTextureList()
t CShaderAPIEmpty::ClearBuffersObeyStencil(bool, bool)
t CShaderAPIEmpty::EnableShaderShaderMutex(bool)
t CShaderAPIEmpty::GetCurrentDynamicVBSize(int)
t CShaderAPIEmpty::GetCurrentDynamicVBSize()
t CShaderAPIEmpty::IsDebugTextureListFresh(int)
t CShaderAPIEmpty::SetPixelShaderFogParams(int)
t CShaderAPIEmpty::SetVertexShaderConstant(int, float const*, int, bool)
t CShaderAPIEmpty::SetVertexShaderViewProj()
t CShaderAPIEmpty::EnableBuffer2FramesAhead(bool)
t CShaderAPIEmpty::EndOcclusionQueryDrawing(ShaderAPIOcclusionQuery_t__*)
t CShaderAPIEmpty::GetStandardTextureHandle(StandardTextureId_t)
t CShaderAPIEmpty::OverrideAlphaWriteEnable(bool, bool)
t CShaderAPIEmpty::OverrideColorWriteEnable(bool, bool)
t CShaderAPIEmpty::ReadPixelsAsyncGetResult(int, int, int, int, unsigned char*, ImageFormat, CThreadEvent*)
t CShaderAPIEmpty::SetCascadedShadowMapping(bool)
t CShaderAPIEmpty::SetDebugTextureRendering(bool)
t CShaderAPIEmpty::SetIntRenderingParameter(int, int)
t CShaderAPIEmpty::SetStandardTextureHandle(StandardTextureId_t, int)
t CShaderAPIEmpty::SetVertexShaderCameraPos()
t CShaderAPIEmpty::UpdateVertexShaderMatrix(int)
t CShaderAPIEmpty::AddShaderComboInformation(ShaderComboSemantics_t const*)
t CShaderAPIEmpty::BindStandardVertexTexture(VertexTextureSampler_t, StandardTextureId_t)
t CShaderAPIEmpty::ClearBuffersObeyStencilEx(bool, bool, bool)
t CShaderAPIEmpty::CommitPixelShaderLighting(int)
t CShaderAPIEmpty::CopyRenderTargetToTexture(int)
t CShaderAPIEmpty::GetActualProjectionMatrix(float*)
t CShaderAPIEmpty::GetCurrentColorCorrection(ShaderColorCorrectionInfo_t*)
t CShaderAPIEmpty::SetShadowDepthBiasFactors(float, float)
t CShaderAPIEmpty::SetToneMappingScaleLinear(Vector const&)
t CShaderAPIEmpty::BeginOcclusionQueryDrawing(ShaderAPIOcclusionQuery_t__*)
t CShaderAPIEmpty::CreateOcclusionQueryObject()
t CShaderAPIEmpty::SetFloatRenderingParameter(int, float)
t CShaderAPIEmpty::SetFullScreenTextureHandle(int)
t CShaderAPIEmpty::ClearStencilBufferRectangle(int, int, int, int, int)
t CShaderAPIEmpty::CopyRenderTargetToTextureEx(int, int, Rect_t*, Rect_t*)
t CShaderAPIEmpty::CopyTextureToRenderTargetEx(int, int, Rect_t*, Rect_t*)
t CShaderAPIEmpty::DestroyOcclusionQueryObject(ShaderAPIOcclusionQuery_t__*)
t CShaderAPIEmpty::OverrideStreamOffsetSupport(bool, bool)
t CShaderAPIEmpty::SetVectorRenderingParameter(int, Vector const&)
t CShaderAPIEmpty::SupportsShadowDepthTextures()
t CShaderAPIEmpty::GetStandardTextureDimensions(int*, int*, StandardTextureId_t)
t CShaderAPIEmpty::IsStandardTextureHandleValid(StandardTextureId_t)
t CShaderAPIEmpty::SetTextureRenderingParameter(int, ITexture*)
t CShaderAPIEmpty::SetBooleanPixelShaderConstant(int, int const*, int, bool)
t CShaderAPIEmpty::SetCascadedShadowMappingState(CascadedShadowMappingState_t const&, ITexture*)
t CShaderAPIEmpty::SetIntegerPixelShaderConstant(int, int const*, int, bool)
t CShaderAPIEmpty::EnableSinglePassFlashlightMode(bool)
t CShaderAPIEmpty::SetBooleanVertexShaderConstant(int, int const*, int, bool)
t CShaderAPIEmpty::SetIntegerVertexShaderConstant(int, int const*, int, bool)
t CShaderAPIEmpty::EnableUserClipTransformOverride(bool)
t CShaderAPIEmpty::SinglePassFlashlightModeEnabled()
t CShaderAPIEmpty::InvalidateDelayedShaderConstants()
t CShaderAPIEmpty::PurgeUnusedVertexAndPixelShaders()
t CShaderAPIEmpty::SetStandardVertexShaderConstants(float)
t CShaderAPIEmpty::EnableLinearColorSpaceFrameBuffer(bool)
t CShaderAPIEmpty::PerformFullScreenStencilOperation()
t CShaderAPIEmpty::SetDepthFeatheringShaderConstants(int, float)
t CShaderAPIEmpty::ClearVertexAndPixelShaderRefCounts()
t CShaderAPIEmpty::SetLinearToGammaConversionTextures(int, int)
t CShaderAPIEmpty::OcclusionQuery_GetNumPixelsRendered(ShaderAPIOcclusionQuery_t__*, bool)
t CShaderAPIEmpty::SetVertexShaderModelViewProjAndModelView()
t CShaderAPIEmpty::Bind(IMaterial*)
t CShaderAPIEmpty::Draw(MaterialPrimitiveType_t, int, int)
t CShaderAPIEmpty::Knob(char*, float*)
t CShaderAPIEmpty::Ortho(double, double, double, double, double, double)
t CShaderAPIEmpty::Scale(float, float, float)
t CShaderAPIEmpty::FogEnd(float)
t CShaderAPIEmpty::Printf(char*, ...)
t CShaderAPIEmpty::Rotate(float, float, float, float)
t CShaderAPIEmpty::FogMode(MaterialFogMode_t)
t CShaderAPIEmpty::GetFarZ()
t CShaderAPIEmpty::LockTex(int)
t CShaderAPIEmpty::ScaleXY(float, float)
t CShaderAPIEmpty::SetFogZ(float)
t CShaderAPIEmpty::SetMode(void*, int, ShaderDeviceInfo_t const&)
t CShaderAPIEmpty::TexLock(int, int, int, int, int, int, CPixelWriter&)
t CShaderAPIEmpty::TexWrap(ShaderTexCoordComponent_t, ShaderTexWrapMode_t)
t CShaderAPIEmpty::CullMode(MaterialCullMode_t)
t CShaderAPIEmpty::EndFrame()
t CShaderAPIEmpty::FogStart(float)
t CShaderAPIEmpty::PrintfVA(char*, char*)
t CShaderAPIEmpty::BeginPass(short)
t CShaderAPIEmpty::GetMatrix(MaterialMatrixMode_t, float*)
t CShaderAPIEmpty::IsTexture(int)
t CShaderAPIEmpty::OnPresent()
t CShaderAPIEmpty::PopMatrix()
t CShaderAPIEmpty::SetLights(int, LightDesc_t const*)
t CShaderAPIEmpty::ShadeMode(ShaderShadeMode_t)
t CShaderAPIEmpty::SyncToken(char const*)
t CShaderAPIEmpty::TexUnlock()
t CShaderAPIEmpty::Translate(float, float, float)
t CShaderAPIEmpty::UnlockTex(int)
t CShaderAPIEmpty::CShaderAPIEmpty()
t CShaderAPIEmpty::CShaderAPIEmpty()
t CShaderAPIEmpty::~CShaderAPIEmpty()
t CShaderAPIEmpty::~CShaderAPIEmpty()
t CShaderAPIEmpty::~CShaderAPIEmpty()
t CUtlBinaryBlock::Set(void const*, int)
t CUtlBinaryBlock::SetLength(int)
t CUtlBinaryBlock::operator=(CUtlBinaryBlock const&)
t CUtlBinaryBlock::CUtlBinaryBlock(int, int)
t CUtlBinaryBlock::CUtlBinaryBlock(void const*, int)
t CUtlBinaryBlock::CUtlBinaryBlock(void*, int, int)
t CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&)
t CUtlBinaryBlock::CUtlBinaryBlock(int, int)
t CUtlBinaryBlock::CUtlBinaryBlock(void const*, int)
t CUtlBinaryBlock::CUtlBinaryBlock(void*, int, int)
t CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&)
t CDefaultAccessor::RegisterConCommandBase(ConCommandBase*)
t CDllDemandLoader::GetFactory()
t CDllDemandLoader::Unload()
t CDllDemandLoader::CDllDemandLoader(char const*)
t CDllDemandLoader::CDllDemandLoader(char const*)
t CDllDemandLoader::~CDllDemandLoader()
t CDllDemandLoader::~CDllDemandLoader()
t CDllDemandLoader::~CDllDemandLoader()
t CBoyerMooreSearch::Search(unsigned char const*, int)
t CBoyerMooreSearch::CBoyerMooreSearch(unsigned char const*, int)
t CBoyerMooreSearch::CBoyerMooreSearch(unsigned char const*, int)
t CUtlInplaceBuffer::InplaceGetLinePtr(char**, int*)
t CUtlInplaceBuffer::InplaceGetLinePtr()
t CUtlInplaceBuffer::CUtlInplaceBuffer(int, int, int)
t CUtlInplaceBuffer::CUtlInplaceBuffer(int, int, int)
t IShaderDynamicAPI::EndPerfEvent()
t IShaderDynamicAPI::BeginPerfEEvent(wchar_t*)
t CShaderDeviceEmpty::RemoveView(void*)
t CShaderDeviceEmpty::CompileShader(char const*, unsigned int, char const*)
t CShaderDeviceEmpty::CreateStaticMesh(unsigned long long, char const*, IMaterial*, VertexStreamSpec_t*)
t CShaderDeviceEmpty::ReleaseResources(bool)
t CShaderDeviceEmpty::CreateIndexBuffer(ShaderBufferType_t, MaterialIndexFormat_t, int, char const*)
t CShaderDeviceEmpty::CreatePixelShader(IShaderBuffer*)
t CShaderDeviceEmpty::DestroyStaticMesh(IMesh*)
t CShaderDeviceEmpty::HandleThreadEvent(unsigned int)
t CShaderDeviceEmpty::CreateVertexBuffer(ShaderBufferType_t, unsigned long long, int, char const*)
t CShaderDeviceEmpty::CreateVertexShader(IShaderBuffer*)
t CShaderDeviceEmpty::DestroyIndexBuffer(IIndexBuffer*)
t CShaderDeviceEmpty::DestroyPixelShader(PixelShaderHandle_t__*)
t CShaderDeviceEmpty::ReacquireResources()
t CShaderDeviceEmpty::DestroyVertexBuffer(IVertexBuffer*)
t CShaderDeviceEmpty::DestroyVertexShader(VertexShaderHandle_t__*)
t CShaderDeviceEmpty::CreateGeometryShader(IShaderBuffer*)
t CShaderDeviceEmpty::SetHardwareGammaRamp(float, float, float, float, bool)
t CShaderDeviceEmpty::DestroyGeometryShader(GeometryShaderHandle_t__*)
t CShaderDeviceEmpty::GetDynamicIndexBuffer()
t CShaderDeviceEmpty::GetDynamicVertexBuffer(int, unsigned long long, bool)
t CShaderDeviceEmpty::EnableNonInteractiveMode(MaterialNonInteractiveMode_t, ShaderNonInteractiveInfo_t*)
t CShaderDeviceEmpty::DoStartupShaderPreloading()
t CShaderDeviceEmpty::RefreshFrontBufferNonInteractive()
t CShaderDeviceEmpty::AddView(void*)
t CShaderDeviceEmpty::Present()
t CShaderDeviceEmpty::SetView(void*)
t CShaderDeviceEmpty::~CShaderDeviceEmpty()
t CShaderDeviceEmpty::~CShaderDeviceEmpty()
t CShaderShadowEmpty::EnableCulling(bool)
t CShaderShadowEmpty::EnableTexture(Sampler_t, bool)
t CShaderShadowEmpty::EnableBlending(bool)
t CShaderShadowEmpty::EnableSRGBRead(Sampler_t, bool)
t CShaderShadowEmpty::SetPixelShader(char const*, int)
t CShaderShadowEmpty::EnableAlphaTest(bool)
t CShaderShadowEmpty::EnableDepthTest(bool)
t CShaderShadowEmpty::EnableSRGBWrite(bool)
t CShaderShadowEmpty::SetDefaultState()
t CShaderShadowEmpty::SetVertexShader(char const*, int)
t CShaderShadowEmpty::EnablePolyOffset(PolygonOffsetMode_t)
t CShaderShadowEmpty::EnableAlphaWrites(bool)
t CShaderShadowEmpty::EnableColorWrites(bool)
t CShaderShadowEmpty::EnableDepthWrites(bool)
t CShaderShadowEmpty::EnableVertexTexture(VertexTextureSampler_t, bool)
t CShaderShadowEmpty::BlendOpSeparateAlpha(ShaderBlendOp_t)
t CShaderShadowEmpty::ExecuteCommandBuffer(unsigned char*)
t CShaderShadowEmpty::EnableAlphaToCoverage(bool)
t CShaderShadowEmpty::BlendFuncSeparateAlpha(ShaderBlendFactor_t, ShaderBlendFactor_t)
t CShaderShadowEmpty::SetShadowDepthFiltering(Sampler_t)
t CShaderShadowEmpty::VertexShaderVertexFormat(unsigned int, int, int*, int)
t CShaderShadowEmpty::DisableFogGammaCorrection(bool)
t CShaderShadowEmpty::EnableBlendingForceOpaque(bool)
t CShaderShadowEmpty::EnableBlendingSeparateAlpha(bool)
t CShaderShadowEmpty::BlendOp(ShaderBlendOp_t)
t CShaderShadowEmpty::FogMode(ShaderFogMode_t, bool)
t CShaderShadowEmpty::PolyMode(ShaderPolyModeFace_t, ShaderPolyMode_t)
t CShaderShadowEmpty::AlphaFunc(ShaderAlphaFunc_t, float)
t CShaderShadowEmpty::BlendFunc(ShaderBlendFactor_t, ShaderBlendFactor_t)
t CShaderShadowEmpty::DepthFunc(ShaderDepthFunc_t)
t CShaderShadowEmpty::CShaderShadowEmpty()
t CShaderShadowEmpty::CShaderShadowEmpty()
t CShaderShadowEmpty::~CShaderShadowEmpty()
t CShaderShadowEmpty::~CShaderShadowEmpty()
t CShaderShadowEmpty::~CShaderShadowEmpty()
t CUtlCharConversion::FindConversion(char const*, int*)
t CUtlCharConversion::CUtlCharConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
t CUtlCharConversion::CUtlCharConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
t CUtlNoEscConversion::FindConversion(char const*, int*)
t SplitScreenConVarRef::Init(char const*, bool)
t SplitScreenConVarRef::SplitScreenConVarRef(IConVar*)
t SplitScreenConVarRef::SplitScreenConVarRef(char const*)
t SplitScreenConVarRef::SplitScreenConVarRef(char const*, bool)
t SplitScreenConVarRef::SplitScreenConVarRef(IConVar*)
t SplitScreenConVarRef::SplitScreenConVarRef(char const*)
t SplitScreenConVarRef::SplitScreenConVarRef(char const*, bool)
t CShaderDeviceMgrEmpty::Disconnect()
t CShaderDeviceMgrEmpty::SetAdapter(int, int)
t CShaderDeviceMgrEmpty::QueryInterface(char const*)
t CShaderDeviceMgrEmpty::AddModeChangeCallback(void (*)())
t CShaderDeviceMgrEmpty::AddDeviceDependentObject(IShaderDeviceDependentObject*)
t CShaderDeviceMgrEmpty::RemoveModeChangeCallback(void (*)())
t CShaderDeviceMgrEmpty::GetRecommendedVideoConfig(int, KeyValues*)
t CShaderDeviceMgrEmpty::RemoveDeviceDependentObject(IShaderDeviceDependentObject*)
t CShaderDeviceMgrEmpty::GetRecommendedConfigurationInfo(int, int, KeyValues*)
t CShaderDeviceMgrEmpty::Init()
t CShaderDeviceMgrEmpty::Connect(void* (*)(char const*, int*))
t CShaderDeviceMgrEmpty::SetMode(void*, int, ShaderDeviceInfo_t const&)
t CShaderDeviceMgrEmpty::Shutdown()
t CUtlCStringConversion::FindConversion(char const*, int*)
t CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
t CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
t CSplitScreenAddedConVar::~CSplitScreenAddedConVar()
t CSplitScreenAddedConVar::~CSplitScreenAddedConVar()
t CSplitScreenAddedConVar::~CSplitScreenAddedConVar()
t ConVar::ClampValue(float&)
t ConVar::SetDefault(char const*)
t ConVar::InternalSetValue(char const*)
t ConVar::ChangeStringValue(char const*, float)
t ConVar::InternalSetIntValue(int)
t ConVar::RemoveChangeCallback(void (*)(IConVar*, char const*, float))
t ConVar::InstallChangeCallback(void (*)(IConVar*, char const*, float), bool)
t ConVar::InternalSetColorValue(Color)
t ConVar::InternalSetFloatValue(float)
t ConVar::InternalSetColorFromString(char const*)
t ConVar::Init()
t ConVar::Create(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float))
t ConVar::Revert()
t ConVar::AddFlags(int)
t ConVar::SetValue(Color)
t ConVar::SetValue(float)
t ConVar::SetValue(int)
t ConVar::SetValue(char const*)
t ConVar::ConVar(char const*, char const*, int)
t ConVar::ConVar(char const*, char const*, int, char const*)
t ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float)
t ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float))
t ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float))
t ConVar::ConVar(char const*, char const*, int)
t ConVar::ConVar(char const*, char const*, int, char const*)
t ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float)
t ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float))
t ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float))
t ConVar::~ConVar()
t ConVar::~ConVar()
t ConVar::~ConVar()
t CCommand::DefaultBreakSet()
t CCommand::Reset()
t CCommand::Tokenize(char const*, cmd_source_t, characterset_t*)
t CCommand::CCommand(int, char const**, cmd_source_t)
t CCommand::CCommand()
t CCommand::CCommand(int, char const**, cmd_source_t)
t CCommand::CCommand()
t CFmtStrN<256, false>::InitQuietTruncation()
t CFmtStrN<256, false>::CFmtStrN(char const*, ...)
t CFmtStrN<256, false>::CFmtStrN(char const*, ...)
t ConVarRef::Init(char const*, bool)
t ConVarRef::ConVarRef(IConVar*)
t ConVarRef::ConVarRef(char const*)
t ConVarRef::ConVarRef(char const*, bool)
t ConVarRef::ConVarRef(IConVar*)
t ConVarRef::ConVarRef(char const*)
t ConVarRef::ConVarRef(char const*, bool)
t __gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&)
t __gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&)
t __gnu_cxx::__scoped_lock::~__scoped_lock()
t __gnu_cxx::__scoped_lock::~__scoped_lock()
t __gnu_cxx::recursive_init_error::~recursive_init_error()
t __gnu_cxx::recursive_init_error::~recursive_init_error()
t __gnu_cxx::recursive_init_error::~recursive_init_error()
t __gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()
t __gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()
t __gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()
t __gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()
t __gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()
t __gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()
t __gnu_cxx::__verbose_terminate_handler()
t operator new[](unsigned int)
t operator new[](unsigned int, int, char const*, int)
t CEmptyMesh::IndexCount() const
t CEmptyMesh::IndexFormat() const
t CEmptyMesh::VertexCount() const
t CEmptyMesh::GetVertexFormat() const
t CEmptyMesh::GetRoomRemaining() const
t CEmptyMesh::IsDynamic() const
t ConCommand::IsCommand() const
t CUtlString::GetExtension() const
t CUtlString::StripFilename() const
t CUtlString::StripExtension() const
t CUtlString::GetBaseFilename() const
t CUtlString::Get() const
t CUtlString::Length() const
t CUtlString::operator char const*() const
t CUtlString::operator==(char const*) const
t CUtlString::operator==(CUtlString const&) const
t CEmptyConVar::GetName() const
t CEmptyConVar::IsFlagSet(int) const
t ConCommandBase::GetHelpText() const
t ConCommandBase::IsRegistered() const
t ConCommandBase::GetDLLIdentifier() const
t ConCommandBase::GetName() const
t ConCommandBase::GetNext() const
t ConCommandBase::GetFlags() const
t ConCommandBase::IsCommand() const
t ConCommandBase::IsFlagSet(int) const
t CShaderAPIEmpty::GetHDRType() const
t CShaderAPIEmpty::IsDX10Card() const
t CShaderAPIEmpty::CurrentTime() const
t CShaderAPIEmpty::IsAAEnabled() const
t CShaderAPIEmpty::SupportsHDR() const
t CShaderAPIEmpty::GetViewports(ShaderViewport_t*, int) const
t CShaderAPIEmpty::InEditorMode() const
t CShaderAPIEmpty::MaxNumLights() const
t CShaderAPIEmpty::MaxViewports() const
t CShaderAPIEmpty::NeedsAAClamp() const
t CShaderAPIEmpty::SupportsSRGB() const
t CShaderAPIEmpty::FakeSRGBWrite() const
t CShaderAPIEmpty::GetCSMQuality() const
t CShaderAPIEmpty::GetHDREnabled() const
t CShaderAPIEmpty::IsAlphaTested(short) const
t CShaderAPIEmpty::IsTranslucent(short) const
t CShaderAPIEmpty::IsUnsupported() const
t CShaderAPIEmpty::PreferZPrepass() const
t CShaderAPIEmpty::SupportsFetch4() const
t CShaderAPIEmpty::GetSamplerCount() const
t CShaderAPIEmpty::MaxTextureDepth() const
t CShaderAPIEmpty::MaxTextureWidth() const
t CShaderAPIEmpty::SupportsHDRMode(HDRType_t) const
t CShaderAPIEmpty::UseFastClipping() const
t CShaderAPIEmpty::GetCSMShaderMode(CSMQualityMode_t) const
t CShaderAPIEmpty::GetDX9LightState(LightState_t*) const
t CShaderAPIEmpty::GetShaderDLLName() const
t CShaderAPIEmpty::HasStencilBuffer() const
t CShaderAPIEmpty::InFlashlightMode() const
t CShaderAPIEmpty::IsRenderingPaint() const
t CShaderAPIEmpty::MaxTextureHeight() const
t CShaderAPIEmpty::VertexFormatSize(unsigned long long) const
t CShaderAPIEmpty::GetCurrentFogType() const
t CShaderAPIEmpty::GetDXSupportLevel() const
t CShaderAPIEmpty::GetRenderTargetEx(int) const
t CShaderAPIEmpty::IsStereoSupported() const
t CShaderAPIEmpty::MaxUserClipPlanes() const
t CShaderAPIEmpty::StencilBufferBits() const
t CShaderAPIEmpty::TextureMemorySize() const
t CShaderAPIEmpty::ComputeVertexUsage(int, short*) const
t CShaderAPIEmpty::GetAspectRatioInfo() const
t CShaderAPIEmpty::GetCurrentNumBones() const
t CShaderAPIEmpty::GetCurrentViewport(int&, int&, int&, int&) const
t CShaderAPIEmpty::GetFlashlightState(VMatrix&) const
t CShaderAPIEmpty::GetHardwareHDRType() const
t CShaderAPIEmpty::GetShadowDepthBias() const
t CShaderAPIEmpty::HasDestAlphaBuffer() const
t CShaderAPIEmpty::PreferHardwareSync() const
t CShaderAPIEmpty::CanDownloadTextures() const
t CShaderAPIEmpty::ComputeVertexFormat(int, short*) const
t CShaderAPIEmpty::GetShadowFilterMode(bool, bool) const
t CShaderAPIEmpty::GetTessellationMode() const
t CShaderAPIEmpty::IsDepthWriteEnabled(short) const
t CShaderAPIEmpty::IsHWMorphingEnabled() const
t CShaderAPIEmpty::SupportsBorderColor() const
t CShaderAPIEmpty::CanDoSRGBReadFromRTs() const
t CShaderAPIEmpty::GetFlashlightStateEx(VMatrix&, ITexture**) const
t CShaderAPIEmpty::GetMaxDXSupportLevel() const
t CShaderAPIEmpty::GetMinDXSupportLevel() const
t CShaderAPIEmpty::GetNullTextureFormat() const
t CShaderAPIEmpty::MaxHWMorphBatchCount() const
t CShaderAPIEmpty::NeedsATICentroidHack() const
t CShaderAPIEmpty::SupportsResolveDepth() const
t CShaderAPIEmpty::SupportsStreamOffset() const
t CShaderAPIEmpty::GetVertexSamplerCount() const
t CShaderAPIEmpty::GetVertexTextureCount() const
t CShaderAPIEmpty::HasFastVertexTextures() const
t CShaderAPIEmpty::HasSetDeviceGammaRamp() const
t CShaderAPIEmpty::MaxTextureAspectRatio() const
t CShaderAPIEmpty::PreferDynamicTextures() const
t CShaderAPIEmpty::GetCSMAccurateBlending() const
t CShaderAPIEmpty::GetLightMapScaleFactor() const
t CShaderAPIEmpty::GetBackBufferDimensions(int&, int&) const
t CShaderAPIEmpty::GetFlashlightShaderInfo(bool*, bool*) const
t CShaderAPIEmpty::IsCascadedShadowMapping() const
t CShaderAPIEmpty::IsStereoActiveThisFrame() const
t CShaderAPIEmpty::MaximumAnisotropicLevel() const
t CShaderAPIEmpty::NumPixelShaderConstants() const
t CShaderAPIEmpty::UsesSRGBCorrectBlending() const
t CShaderAPIEmpty::ComputeVertexDescription(unsigned char*, unsigned long long, MeshDesc_t&) const
t CShaderAPIEmpty::GetFrameBufferColorDepth() const
t CShaderAPIEmpty::GetIntRenderingParameter(int) const
t CShaderAPIEmpty::GetNumActiveDeformations() const
t CShaderAPIEmpty::NumVertexShaderConstants() const
t CShaderAPIEmpty::PreferTexturesInHWMemory() const
t CShaderAPIEmpty::GetNearestSupportedFormat(ImageFormat, bool) const
t CShaderAPIEmpty::GetToneMappingScaleLinear() const
t CShaderAPIEmpty::NeedsShaderSRGBConversion() const
t CShaderAPIEmpty::ReadPixelsFromFrontBuffer() const
t CShaderAPIEmpty::SupportsMipmappedCubemaps() const
t CShaderAPIEmpty::SupportsStaticControlFlow() const
t CShaderAPIEmpty::UsesVertexAndPixelShaders(short) const
t CShaderAPIEmpty::GetFloatRenderingParameter(int) const
t CShaderAPIEmpty::GetHWSpecificShaderDLLName() const
t CShaderAPIEmpty::GetVertexBufferCompression() const
t CShaderAPIEmpty::SupportsCompressedTextures() const
t CShaderAPIEmpty::SupportsCompressedVertices() const
t CShaderAPIEmpty::SupportsGLMixedSizeTargets() const
t CShaderAPIEmpty::ActualHasFastVertexTextures() const
t CShaderAPIEmpty::GetShadowDepthTextureFormat() const
t CShaderAPIEmpty::GetVectorRenderingParameter(int) const
t CShaderAPIEmpty::GetWorldSpaceCameraPosition(float*) const
t CShaderAPIEmpty::ShouldWriteDepthToDestAlpha() const
t CShaderAPIEmpty::SupportsBilinearPCFSampling() const
t CShaderAPIEmpty::SupportsColorOnSecondStream() const
t CShaderAPIEmpty::SupportsShadowDepthTextures() const
t CShaderAPIEmpty::GetMaxVertexTextureDimension() const
t CShaderAPIEmpty::GetNearestRenderTargetFormat(ImageFormat) const
t CShaderAPIEmpty::GetShadowSlopeScaleDepthBias() const
t CShaderAPIEmpty::GetTextureRenderingParameter(int) const
t CShaderAPIEmpty::GetWorldSpaceCameraDirection(float*) const
t CShaderAPIEmpty::MaxVertexShaderBlendMatrices() const
t CShaderAPIEmpty::GetCascadedShadowMappingState(ITexture**, bool) const
t CShaderAPIEmpty::GetFlashlightAmbientOcclusion() const
t CShaderAPIEmpty::HasFullResolutionDepthTexture() const
t CShaderAPIEmpty::SupportsCascadedShadowMapping() const
t CShaderAPIEmpty::GammaToLinear_HardwareSpecific(float) const
t CShaderAPIEmpty::LinearToGamma_HardwareSpecific(float) const
t CShaderAPIEmpty::SpecifiesFogColorInLinearSpace() const
t CShaderAPIEmpty::GetPackedDeformationInformation(int, float*, int, int, int*) const
t CShaderAPIEmpty::NumBooleanVertexShaderConstants() const
t CShaderAPIEmpty::NumIntegerVertexShaderConstants() const
t CShaderAPIEmpty::GetCurrentRenderTargetDimensions(int&, int&) const
t CShaderAPIEmpty::SupportsStaticPlusDynamicLighting() const
t CShaderAPIEmpty::SuppressPixelShaderCentroidHackFixup() const
t CShaderAPIEmpty::DoRenderTargetsNeedSeparateDepthBuffer() const
t CShaderAPIEmpty::GetHighPrecisionShadowDepthTextureFormat() const
t CUtlBinaryBlock::Get(void*, int) const
t CUtlBinaryBlock::operator==(CUtlBinaryBlock const&) const
t CShaderDeviceEmpty::IsAAEnabled() const
t CShaderDeviceEmpty::GetWindowSize(int&, int&) const
t CShaderDeviceEmpty::SpewDriverInfo() const
t CShaderDeviceEmpty::IsUsingGraphics() const
t CShaderDeviceEmpty::GetCurrentAdapter() const
t CShaderDeviceEmpty::StencilBufferBits() const
t CShaderDeviceEmpty::GetAspectRatioInfo() const
t CShaderDeviceEmpty::GetBackBufferFormat() const
t CShaderDeviceEmpty::GetBackBufferDimensions(int&, int&) const
t CShaderShadowEmpty::GetLightMapScaleFactor() const
t CUtlCharConversion::GetDelimiter() const
t CUtlCharConversion::GetEscapeChar() const
t CUtlCharConversion::GetDelimiterLength() const
t CUtlCharConversion::GetConversionLength(char) const
t CUtlCharConversion::GetConversionString(char) const
t CUtlCharConversion::MaxConversionLength() const
t SplitScreenConVarRef::IsValid() const
t CShaderDeviceMgrEmpty::GetModeInfo(ShaderDisplayMode_t*, int, int) const
t CShaderDeviceMgrEmpty::GetModeCount(int) const
t CShaderDeviceMgrEmpty::GetAdapterInfo(int, MaterialAdapterInfo_t&) const
t CShaderDeviceMgrEmpty::GetAdapterCount() const
t CShaderDeviceMgrEmpty::GetCurrentModeInfo(ShaderDisplayMode_t*, int) const
t CSplitScreenAddedConVar::GetBaseName() const
t CSplitScreenAddedConVar::GetSplitScreenPlayerSlot() const
t ConVar::GetDefault() const
t ConVar::GetBaseName() const
t ConVar::GetHelpText() const
t ConVar::GetMaxValue() const
t ConVar::GetMinValue() const
t ConVar::IsRegistered() const
t ConVar::GetSplitScreenPlayerSlot() const
t ConVar::GetInt() const
t ConVar::GetMax(float&) const
t ConVar::GetMin(float&) const
t ConVar::HasMax() const
t ConVar::HasMin() const
t ConVar::GetName() const
t ConVar::GetFlags() const
t ConVar::GetFloat() const
t ConVar::IsCommand() const
t ConVar::IsFlagSet(int) const
t CCommand::FindArgInt(char const*, int) const
t CCommand::FindArg(char const*) const
t ConVarRef::IsValid() const
t __gnu_cxx::__concurrence_lock_error::what() const
t __gnu_cxx::__concurrence_unlock_error::what() const
t std::bad_exception::what() const
t std::exception::what() const
t std::bad_exception::~bad_exception()
t std::bad_exception::~bad_exception()
t std::bad_exception::~bad_exception()
t std::exception::~exception()
t std::exception::~exception()
t std::exception::~exception()
t operator new(unsigned int)
t operator new(unsigned int, int, char const*, int)
t std::unexpected()
t std::set_terminate(void (*)())
t std::set_unexpected(void (*)())
t std::uncaught_exception()
t std::terminate()
t non-virtual thunk to CEmptyConVar::SetValue(float)
t non-virtual thunk to CEmptyConVar::SetValue(int)
t non-virtual thunk to CEmptyConVar::SetValue(char const*)
t non-virtual thunk to ConVar::SetValue(Color)
t non-virtual thunk to ConVar::SetValue(float)
t non-virtual thunk to ConVar::SetValue(int)
t non-virtual thunk to ConVar::SetValue(char const*)
t non-virtual thunk to CEmptyConVar::GetName() const
t non-virtual thunk to CEmptyConVar::IsFlagSet(int) const
t non-virtual thunk to CSplitScreenAddedConVar::GetBaseName() const
t non-virtual thunk to CSplitScreenAddedConVar::GetSplitScreenPlayerSlot() const
t non-virtual thunk to ConVar::GetBaseName() const
t non-virtual thunk to ConVar::GetSplitScreenPlayerSlot() const
t non-virtual thunk to ConVar::GetName() const
t non-virtual thunk to ConVar::IsFlagSet(int) const
t non-virtual thunk to CEmptyMesh::ModifyBegin(bool, int, int, IndexDesc_t&)
t non-virtual thunk to CEmptyMesh::ValidateData(int, IndexDesc_t const&)
t non-virtual thunk to CEmptyMesh::EndCastBuffer()
t non-virtual thunk to CEmptyMesh::BeginCastBuffer(MaterialIndexFormat_t)
t non-virtual thunk to CEmptyMesh::Lock(int, bool, IndexDesc_t&)
t non-virtual thunk to CEmptyMesh::Spew(int, IndexDesc_t const&)
t non-virtual thunk to CEmptyMesh::Unlock(int, IndexDesc_t&)
t non-virtual thunk to CEmptyMesh::GetMesh()
t non-virtual thunk to CEmptyMesh::ModifyEnd(IndexDesc_t&)
t non-virtual thunk to CShaderAPIEmpty::SetHDREnabled(bool)
t non-virtual thunk to CShaderAPIEmpty::SetCSMAccurateBlending(bool)
t non-virtual thunk to CShaderAPIEmpty::OverrideStreamOffsetSupport(bool, bool)
t non-virtual thunk to CEmptyMesh::IndexCount() const
t non-virtual thunk to CEmptyMesh::IndexFormat() const
t non-virtual thunk to CEmptyMesh::GetRoomRemaining() const
t non-virtual thunk to CEmptyMesh::IsDynamic() const
t non-virtual thunk to CShaderAPIEmpty::GetHDRType() const
t non-virtual thunk to CShaderAPIEmpty::IsAAEnabled() const
t non-virtual thunk to CShaderAPIEmpty::SupportsHDR() const
t non-virtual thunk to CShaderAPIEmpty::MaxNumLights() const
t non-virtual thunk to CShaderAPIEmpty::MaxViewports() const
t non-virtual thunk to CShaderAPIEmpty::NeedsAAClamp() const
t non-virtual thunk to CShaderAPIEmpty::SupportsSRGB() const
t non-virtual thunk to CShaderAPIEmpty::FakeSRGBWrite() const
t non-virtual thunk to CShaderAPIEmpty::GetCSMQuality() const
t non-virtual thunk to CShaderAPIEmpty::GetHDREnabled() const
t non-virtual thunk to CShaderAPIEmpty::IsUnsupported() const
t non-virtual thunk to CShaderAPIEmpty::PreferZPrepass() const
t non-virtual thunk to CShaderAPIEmpty::SupportsFetch4() const
t non-virtual thunk to CShaderAPIEmpty::GetSamplerCount() const
t non-virtual thunk to CShaderAPIEmpty::MaxTextureDepth() const
t non-virtual thunk to CShaderAPIEmpty::MaxTextureWidth() const
t non-virtual thunk to CShaderAPIEmpty::SupportsHDRMode(HDRType_t) const
t non-virtual thunk to CShaderAPIEmpty::UseFastClipping() const
t non-virtual thunk to CShaderAPIEmpty::GetCSMShaderMode(CSMQualityMode_t) const
t non-virtual thunk to CShaderAPIEmpty::GetShaderDLLName() const
t non-virtual thunk to CShaderAPIEmpty::MaxTextureHeight() const
t non-virtual thunk to CShaderAPIEmpty::GetDXSupportLevel() const
t non-virtual thunk to CShaderAPIEmpty::MaxUserClipPlanes() const
t non-virtual thunk to CShaderAPIEmpty::StencilBufferBits() const
t non-virtual thunk to CShaderAPIEmpty::TextureMemorySize() const
t non-virtual thunk to CShaderAPIEmpty::GetHardwareHDRType() const
t non-virtual thunk to CShaderAPIEmpty::GetShadowDepthBias() const
t non-virtual thunk to CShaderAPIEmpty::PreferHardwareSync() const
t non-virtual thunk to CShaderAPIEmpty::GetShadowFilterMode(bool, bool) const
t non-virtual thunk to CShaderAPIEmpty::SupportsBorderColor() const
t non-virtual thunk to CShaderAPIEmpty::CanDoSRGBReadFromRTs() const
t non-virtual thunk to CShaderAPIEmpty::GetMaxDXSupportLevel() const
t non-virtual thunk to CShaderAPIEmpty::GetMinDXSupportLevel() const
t non-virtual thunk to CShaderAPIEmpty::GetNullTextureFormat() const
t non-virtual thunk to CShaderAPIEmpty::MaxHWMorphBatchCount() const
t non-virtual thunk to CShaderAPIEmpty::NeedsATICentroidHack() const
t non-virtual thunk to CShaderAPIEmpty::SupportsResolveDepth() const
t non-virtual thunk to CShaderAPIEmpty::SupportsStreamOffset() const
t non-virtual thunk to CShaderAPIEmpty::GetVertexSamplerCount() const
t non-virtual thunk to CShaderAPIEmpty::HasFastVertexTextures() const
t non-virtual thunk to CShaderAPIEmpty::HasSetDeviceGammaRamp() const
t non-virtual thunk to CShaderAPIEmpty::MaxTextureAspectRatio() const
t non-virtual thunk to CShaderAPIEmpty::PreferDynamicTextures() const
t non-virtual thunk to CShaderAPIEmpty::GetCSMAccurateBlending() const
t non-virtual thunk to CShaderAPIEmpty::GetLightMapScaleFactor() const
t non-virtual thunk to CShaderAPIEmpty::MaximumAnisotropicLevel() const
t non-virtual thunk to CShaderAPIEmpty::NumPixelShaderConstants() const
t non-virtual thunk to CShaderAPIEmpty::UsesSRGBCorrectBlending() const
t non-virtual thunk to CShaderAPIEmpty::GetFrameBufferColorDepth() const
t non-virtual thunk to CShaderAPIEmpty::NumVertexShaderConstants() const
t non-virtual thunk to CShaderAPIEmpty::PreferTexturesInHWMemory() const
t non-virtual thunk to CShaderAPIEmpty::NeedsShaderSRGBConversion() const
t non-virtual thunk to CShaderAPIEmpty::ReadPixelsFromFrontBuffer() const
t non-virtual thunk to CShaderAPIEmpty::SupportsMipmappedCubemaps() const
t non-virtual thunk to CShaderAPIEmpty::SupportsStaticControlFlow() const
t non-virtual thunk to CShaderAPIEmpty::GetHWSpecificShaderDLLName() const
t non-virtual thunk to CShaderAPIEmpty::SupportsCompressedVertices() const
t non-virtual thunk to CShaderAPIEmpty::SupportsGLMixedSizeTargets() const
t non-virtual thunk to CShaderAPIEmpty::ActualHasFastVertexTextures() const
t non-virtual thunk to CShaderAPIEmpty::GetShadowDepthTextureFormat() const
t non-virtual thunk to CShaderAPIEmpty::SupportsBilinearPCFSampling() const
t non-virtual thunk to CShaderAPIEmpty::SupportsShadowDepthTextures() const
t non-virtual thunk to CShaderAPIEmpty::GetMaxVertexTextureDimension() const
t non-virtual thunk to CShaderAPIEmpty::GetShadowSlopeScaleDepthBias() const
t non-virtual thunk to CShaderAPIEmpty::MaxVertexShaderBlendMatrices() const
t non-virtual thunk to CShaderAPIEmpty::HasFullResolutionDepthTexture() const
t non-virtual thunk to CShaderAPIEmpty::SupportsCascadedShadowMapping() const
t non-virtual thunk to CShaderAPIEmpty::SpecifiesFogColorInLinearSpace() const
t non-virtual thunk to CShaderAPIEmpty::SuppressPixelShaderCentroidHackFixup() const
t non-virtual thunk to CShaderAPIEmpty::GetHighPrecisionShadowDepthTextureFormat() const
t non-virtual thunk to CShaderAPIEmpty::EnableGetAllTextures(bool)
t non-virtual thunk to CShaderAPIEmpty::GetTextureMemoryUsed(IDebugTextureInfo::TextureMemoryType)
t non-virtual thunk to CShaderAPIEmpty::LockDebugTextureList()
t non-virtual thunk to CShaderAPIEmpty::EnableDebugTextureList(bool)
t non-virtual thunk to CShaderAPIEmpty::UnlockDebugTextureList()
t non-virtual thunk to CShaderAPIEmpty::IsDebugTextureListFresh(int)
t non-virtual thunk to CShaderAPIEmpty::SetDebugTextureRendering(bool)
r typeinfo for CEmptyMesh
r typeinfo for ConCommand
r typeinfo for IAppSystem
r typeinfo for IShaderAPI
r typeinfo for CEmptyConVar
r typeinfo for IIndexBuffer
r typeinfo for IShaderDevice
r typeinfo for IShaderShadow
r typeinfo for IVertexBuffer
r typeinfo for CBaseAppSystem<IShaderDeviceMgr>
r typeinfo for ConCommandBase
r typeinfo for CShaderAPIEmpty
r typeinfo for CDefaultAccessor
r typeinfo for CDllDemandLoader
r typeinfo for IShaderDeviceMgr
r typeinfo for IDebugTextureInfo
r typeinfo for IShaderDynamicAPI
r typeinfo for CShaderDeviceEmpty
r typeinfo for CShaderShadowEmpty
r typeinfo for CUtlCharConversion
r typeinfo for CUtlNoEscConversion
r typeinfo for ConVar_ServerBounded
r typeinfo for CShaderDeviceMgrEmpty
r typeinfo for CUtlCStringConversion
r typeinfo for CSplitScreenAddedConVar
r typeinfo for IConCommandBaseAccessor
r typeinfo for IHardwareConfigInternal
r typeinfo for IMaterialSystemHardwareConfig
r typeinfo for IMesh
r typeinfo for ConVar
r typeinfo for IConVar
r typeinfo for CFmtStrN<256, false>
V typeinfo for __cxxabiv1::__forced_unwind
V typeinfo for __cxxabiv1::__foreign_exception
V typeinfo for __gnu_cxx::recursive_init_error
V typeinfo for __gnu_cxx::__concurrence_lock_error
V typeinfo for __gnu_cxx::__concurrence_unlock_error
d typeinfo for std::bad_exception
d typeinfo for std::exception
r typeinfo name for CEmptyMesh
r typeinfo name for ConCommand
r typeinfo name for IAppSystem
r typeinfo name for IShaderAPI
r typeinfo name for CEmptyConVar
r typeinfo name for IIndexBuffer
r typeinfo name for IShaderDevice
r typeinfo name for IShaderShadow
r typeinfo name for IVertexBuffer
r typeinfo name for CBaseAppSystem<IShaderDeviceMgr>
r typeinfo name for ConCommandBase
r typeinfo name for CShaderAPIEmpty
r typeinfo name for CDefaultAccessor
r typeinfo name for CDllDemandLoader
r typeinfo name for IShaderDeviceMgr
r typeinfo name for IDebugTextureInfo
r typeinfo name for IShaderDynamicAPI
r typeinfo name for CShaderDeviceEmpty
r typeinfo name for CShaderShadowEmpty
r typeinfo name for CUtlCharConversion
r typeinfo name for CUtlNoEscConversion
r typeinfo name for ConVar_ServerBounded
r typeinfo name for CShaderDeviceMgrEmpty
r typeinfo name for CUtlCStringConversion
r typeinfo name for CSplitScreenAddedConVar
r typeinfo name for IConCommandBaseAccessor
r typeinfo name for IHardwareConfigInternal
r typeinfo name for IMaterialSystemHardwareConfig
r typeinfo name for IMesh
r typeinfo name for ConVar
r typeinfo name for IConVar
r typeinfo name for CFmtStrN<256, false>
V typeinfo name for __cxxabiv1::__forced_unwind
V typeinfo name for __cxxabiv1::__foreign_exception
V typeinfo name for __gnu_cxx::recursive_init_error
V typeinfo name for __gnu_cxx::__concurrence_lock_error
V typeinfo name for __gnu_cxx::__concurrence_unlock_error
r typeinfo name for std::bad_exception
r typeinfo name for std::exception
r vtable for CEmptyMesh
r vtable for ConCommand
r vtable for IShaderAPI
r vtable for CEmptyConVar
r vtable for IIndexBuffer
r vtable for IShaderShadow
r vtable for IVertexBuffer
r vtable for ConCommandBase
r vtable for CShaderAPIEmpty
r vtable for CDefaultAccessor
r vtable for CDllDemandLoader
r vtable for IDebugTextureInfo
r vtable for IShaderDynamicAPI
r vtable for CShaderDeviceEmpty
r vtable for CShaderShadowEmpty
r vtable for CUtlCharConversion
r vtable for CUtlNoEscConversion
r vtable for CShaderDeviceMgrEmpty
r vtable for CUtlCStringConversion
r vtable for CSplitScreenAddedConVar
r vtable for IHardwareConfigInternal
r vtable for IMaterialSystemHardwareConfig
r vtable for IMesh
r vtable for ConVar
r vtable for IConVar
r vtable for CFmtStrN<256, false>
V vtable for __cxxabiv1::__forced_unwind
U vtable for __cxxabiv1::__class_type_info
V vtable for __cxxabiv1::__foreign_exception
U vtable for __cxxabiv1::__si_class_type_info
U vtable for __cxxabiv1::__vmi_class_type_info
V vtable for __gnu_cxx::recursive_init_error
V vtable for __gnu_cxx::__concurrence_lock_error
V vtable for __gnu_cxx::__concurrence_unlock_error
d vtable for std::bad_exception
d vtable for std::exception
b V_ParseToken(char const*, char*, int, bool*, characterset_t*)::s_BreakSetIncludingColons
b V_ParseToken(char const*, char*, int, bool*, characterset_t*)::built
b V_pretifymem(float, int, bool)::output
b V_pretifymem(float, int, bool)::current
b V_pretifynum(long long)::output
b V_pretifynum(long long)::current
r V_LogMultiline(bool, char const*, char const*, unsigned int, CUtlString&)::HEX
b CEmptyMesh::Lock(int, bool, IndexDesc_t&)::s_BogusIndex
b (anonymous namespace)::get_global()::global
d SplitScreenConVarRef::Init(char const*, bool)::bFirst
b CFmtStrN<256, false>::CFmtStrN(char const*, ...)::scAsserted
d ConVarRef::Init(char const*, bool)::bFirst
b __gnu_cxx::__verbose_terminate_handler()::terminating
b CShaderAPIEmpty::GetAspectRatioInfo() const::dummy
b CShaderAPIEmpty::GetFlashlightState(VMatrix&) const::blah
b CShaderAPIEmpty::GetFlashlightStateEx(VMatrix&, ITexture**) const::blah
b CShaderAPIEmpty::GetToneMappingScaleLinear() const::dummy
b CShaderAPIEmpty::GetCascadedShadowMappingState(ITexture**, bool) const::dummyState
b CShaderDeviceEmpty::GetAspectRatioInfo() const::dummy
