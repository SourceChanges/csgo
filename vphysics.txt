U abort@@GLIBC_2.0
U access@@GLIBC_2.0
U acosf@@GLIBC_2.0
U acos@@GLIBC_2.0
t add_fdes
d adds.7496
U asinf@@GLIBC_2.0
U asin@@GLIBC_2.0
U atan2f@@GLIBC_2.0
U atan2@@GLIBC_2.0
U atanf@@GLIBC_2.0
U atan@@GLIBC_2.0
t base_from_cb_data
t base_from_object
A __bss_start
t _calloc_dbg
U cbrtf@@GLIBC_2.0
U chdir@@GLIBC_2.0
U chmod@@GLIBC_2.0
U chown@@GLIBC_2.1
t classify_object_over_fdes
U closedir@@GLIBC_2.0
b colorcorrection
U CommandLine
b completed.5793
U cosf@@GLIBC_2.0
U cos@@GLIBC_2.0
d cplus_demangle_builtin_types
d cplus_demangle_operators
T CreateInterface
r CSWTCH.835
d __CTOR_END__
d __CTOR_LIST__
b cvar
b cv_phys_enable_experimental_optimizations
b cv_phys_enable_PIX_counters
b cv_phys_enable_simd_optimizations
t __cxa_allocate_dependent_exception
t __cxa_allocate_exception
U __cxa_atexit@@GLIBC_2.1.3
t __cxa_begin_catch
t __cxa_call_terminate
t __cxa_call_unexpected
t __cxa_current_exception_type
t __cxa_demangle
t __cxa_end_catch
w __cxa_finalize@@GLIBC_2.1.3
t __cxa_free_dependent_exception
t __cxa_free_exception
t __cxa_get_exception_ptr
t __cxa_get_globals
t __cxa_get_globals_fast
t __cxa_guard_abort
t __cxa_guard_acquire
t __cxa_guard_release
t __cxa_pure_virtual
t __cxa_rethrow
t __cxa_throw
t d_add_substitution
t d_append_buffer
t d_append_char
t d_append_num
t d_append_string
t d_bare_function_type
t d_call_offset
t d_compact_number
t d_cv_qualifiers
t d_demangle_callback.constprop.18
t d_encoding
t __deregister_frame
t __deregister_frame_info
t __deregister_frame_info_bases
U DevMsg
t d_expression
t d_exprlist
t d_expr_primary
t d_find_pack
t d_growable_string_callback_adapter
t d_index_template_argument
U dlclose@@GLIBC_2.0
U dlerror@@GLIBC_2.0
U dl_iterate_phdr@@GLIBC_2.2.4
U dlopen@@GLIBC_2.1
U dlsym@@GLIBC_2.0
t d_make_builtin_type
t d_make_comp
t d_make_empty
t d_make_name
t d_mangled_name
t d_name
t d_number.isra.0
t __do_global_ctors_aux
t __do_global_dtors_aux
t d_operator_name
t d_parmlist
t d_print_array_type.isra.10
t d_print_cast.isra.13.part.14
t d_print_comp
t d_print_expr_op
t d_print_flush
t d_print_function_type.isra.12
t d_print_mod
t d_print_mod_list
t d_print_subexpr
d __dso_handle
t d_source_name
t d_substitution
t d_template_args
t d_template_param
d __DTOR_END__
b dtor_idx.5795
d __DTOR_LIST__
t d_type
t d_unqualified_name
b dwarf_reg_size_table
d DW.ref.__gxx_personality_v0
d DW.ref._ZTISt9exception
a _DYNAMIC
t __dynamic_cast
A _edata
A _end
U __errno_location@@GLIBC_2.0
U Error
t execute_cfa_program
t execute_stack_op
U exit@@GLIBC_2.0
t _expand_dbg
U expf@@GLIBC_2.0
b fast_poly_convert
U fclose@@GLIBC_2.1
t fde_mixed_encoding_compare
t fde_single_encoding_compare
t fde_unencoded_compare
U fgets@@GLIBC_2.0
T _fini
U fopen64@@GLIBC_2.1
U fopen@@GLIBC_2.1
r Four_2ToThe21s
r Four_2ToThe22s
r Four_2ToThe23s
r Four_2ToThe24s
r Four_DegToRad
r Four_Epsilons
r Four_FLT_MAX
r Four_Fours
r Four_GammaToLinearCoefficients_A
r Four_GammaToLinearCoefficients_B
r Four_GammaToLinearCoefficients_C
r Four_GammaToLinearCoefficients_D
r Four_LinearToGammaCoefficients_A
r Four_LinearToGammaCoefficients_B
r Four_LinearToGammaCoefficients_C
r Four_LinearToGammaCoefficients_D
r Four_LinearToGammaCoefficients_E
r Four_Negative_FLT_MAX
r Four_NegativeOnes
r Four_Ones
r Four_Origin
r Four_Point225s
r Four_PointFives
r Four_Thirds
r Four_Threes
r Four_Twos
r Four_TwoThirds
r Four_Zeros
U fprintf@@GLIBC_2.0
U fputc@@GLIBC_2.0
U fputs@@GLIBC_2.0
t frame_downheap
t frame_dummy
r __FRAME_END__
b frame_hdr_cache
b frame_hdr_cache_head
t frame_heapsort
t __frame_state_for
t _free_dbg
U free@@GLIBC_2.0
U freopen@@GLIBC_2.0
U fwrite@@GLIBC_2.0
d g_b_phys_enable_query_cache
t __gcclibcxx_demangle_callback
d g_CollisionRulesBlock
b g_cv_phys_enable_query_cache
b g_cvPhysPMC
d g_EmptyCollisionListener
t get_cie_encoding
U GetCPUInformation
U getcwd@@GLIBC_2.0
U getenv@@GLIBC_2.0
t get_fde_encoding
d g_f4_111half
d g_FluidBlock
d g_IVPToHLDir
b global_friction_counter
t global constructors keyed to ivp_3d_solver.cxx
t global constructors keyed to ivp_actuator.cxx
t global constructors keyed to ivp_actuator_spring.cxx
t global constructors keyed to ivp_anomaly_manager.cxx
t global constructors keyed to ivp_betterdebugmanager.cxx
t global constructors keyed to ivp_betterstatisticsmanager.cxx
t global constructors keyed to ivp_cache_object.cxx
t global constructors keyed to ivp_car_system.cxx
t global constructors keyed to ivp_collision_filter.cxx
t global constructors keyed to ivp_compact_ledge.cxx
t global constructors keyed to ivp_compact_ledge_solver.cxx
t global constructors keyed to ivp_compact_surface.cxx
t global constructors keyed to ivp_constraint_car.cxx
t global constructors keyed to ivp_constraint.cxx
t global constructors keyed to ivp_controller_buoyancy.cxx
t global constructors keyed to ivp_controller_phantom.cxx
t global constructors keyed to ivp_controller_raycast_car.cxx
t global constructors keyed to ivp_core.cxx
t global constructors keyed to ivp_environment.cxx
t global constructors keyed to ivp_friction.cxx
t global constructors keyed to ivp_friction_gaps.cxx
t global constructors keyed to ivp_great_matrix.cxx
t global constructors keyed to ivp_halfspacesoup.cxx
t global constructors keyed to ivp_hull_manager.cxx
t global constructors keyed to ivp_i_friction_hash.cxx
t global constructors keyed to ivp_impact.cxx
t global constructors keyed to ivp_liquid_surface_descript.cxx
t global constructors keyed to ivp_material.cxx
t global constructors keyed to ivp_merge_core.cxx
t global constructors keyed to ivp_mindist_friction.cxx
t global constructors keyed to ivp_mindist_mcases.cxx
t global constructors keyed to ivp_multidimensional_interp.cxx
t global constructors keyed to ivp_object.cxx
t global constructors keyed to ivp_performancecounter.cxx
t global constructors keyed to ivp_physic.cxx
t global constructors keyed to ivp_physic_private.cxx
t global constructors keyed to ivp_polygon.cxx
t global constructors keyed to ivp_ray_solver.cxx
t global constructors keyed to ivp_sim_unit.cxx
t global constructors keyed to ivp_solver_core_reaction.cxx
t global constructors keyed to ivp_surbuild_halfspacesoup.cxx
t global constructors keyed to ivp_surbuild_ledge_soup.cxx
t global constructors keyed to ivp_surbuild_pointsoup.cxx
t global constructors keyed to ivp_surbuild_polygon_convex.cxx
t global constructors keyed to ivp_surface_manager.cxx
t global constructors keyed to ivp_surman_polygon.cxx
t global constructors keyed to ivp_template_constraint.cxx
t global constructors keyed to ivp_templates.cxx
t global constructors keyed to ivp_templates_intern.cxx
t global constructors keyed to ivp_time.cxx
t global constructors keyed to ivu_active_value.cxx
t global constructors keyed to ivu_bigvector.cxx
t global constructors keyed to ivu_geometry.cxx
t global constructors keyed to ivu_hash.cxx
t global constructors keyed to ivu_linear.cxx
t global constructors keyed to ivu_memory.cxx
t global constructors keyed to ivu_min_hash.cxx
t global constructors keyed to ivu_min_list.cxx
t global constructors keyed to ivu_os_dep.cxx
t global constructors keyed to ivu_quat.cxx
t global constructors keyed to ivu_string.cxx
t global constructors keyed to ivu_vector.cxx
t global constructors keyed to ivu_vhash.cxx
t global constructors keyed to ivv_cluster_min_hash.cxx
t global constructors keyed to qhull_geom2.cxx
t global constructors keyed to qhull_global.cxx
t global constructors keyed to qhull_mem.cxx
t global constructors keyed to qhull_poly2.cxx
t global constructors keyed to qhull_poly.cxx
t global constructors keyed to qhull_qset.cxx
t global constructors keyed to qhull_stat.cxx
t global constructors keyed to qhull_user.cxx
a _GLOBAL_OFFSET_TABLE_
t _GLOBAL__sub_I_cvar
t _GLOBAL__sub_I___cxa_pure_virtual
t _GLOBAL__sub_I_eh_alloc.cc
t _GLOBAL__sub_I_Four_PointFives
t _GLOBAL__sub_I_g_MeshFrameLocksPool
t _GLOBAL__sub_I_g_PhysicsCollision
t _GLOBAL__sub_I_g_PhysicsUnits
t _GLOBAL__sub_I_g_scalar4_hk_epsilon
t _GLOBAL__sub_I_g_SurfaceDatabase
t _GLOBAL__sub_I_g_VPhysPtrSaveRestoreOps
t _GLOBAL__sub_I_ivp_debug_indent
t _GLOBAL__sub_I_ivp_mindist_settings
t _GLOBAL__sub_I_lineartovertex
t _GLOBAL__sub_I_LOG_HavokConsole
t _GLOBAL__sub_I_n_physical_pops
t _GLOBAL__sub_I_s_bMathlibInitialized
t _GLOBAL__sub_I_s_pInterfaceRegs
t _GLOBAL__sub_I_s_StringCharConversion
t _GLOBAL__sub_I_stdafx.cpp
t _GLOBAL__sub_I__Z10HashStringPKc
t _GLOBAL__sub_I__Z11InitLeafmapP17IVP_Compact_LedgeP9leafmap_t
t _GLOBAL__sub_I__Z11qh_premergeP7vertexTdd
t _GLOBAL__sub_I__Z12SeedRandSIMDj
t _GLOBAL__sub_I__Z13qh_backnormalPPdiijS_Pj
t _GLOBAL__sub_I__Z13vphysics_initv
t _GLOBAL__sub_I__Z17qh_produce_outputv
t _GLOBAL__sub_I__Z18GetOppositeSynapseP20IVP_Synapse_Friction
t _GLOBAL__sub_I__Z19PackLedgeIntoBufferP12packedhull_tR10CUtlBufferPK17IVP_Compact_LedgeRK17virtualmeshlist_t
t _GLOBAL__sub_I__Z19SetupMatrixIdentityv
t _GLOBAL__sub_I__Z21ConnectTier1LibrariesPPFPvPKcPiEi
t _GLOBAL__sub_I__Z24IntersectRayWithTriangleRK5Ray_tRK6VectorS4_S4_b
t _GLOBAL__sub_I__Z29ivp_core_get_surface_speed_osP8IVP_CoreP15IVP_Real_ObjectPK17IVP_U_Float_PointPS3_
t _GLOBAL__sub_I__Z29TransformHLWorldToHavanaLocalRK6VectorP15IVP_Real_Object
t _GLOBAL__sub_I__Z31ComputePDControllerCoefficientsPffff
t _GLOBAL__sub_I__Z8qh_qhullv
t _GLOBAL__sub_I__Z9ParseFilePKcPcPbP14characterset_t
t _GLOBAL__sub_I__Z9ReportObjP16IVP_Synapse_RealR8CFmtStrNILi256ELb0EE
t _GLOBAL__sub_I__Z9_V_memsetPvii
t _GLOBAL__sub_I__ZN10CUtlSymbol14s_pSymbolTableE
t _GLOBAL__sub_I__ZN10hk_Matrix38set_rowsERK10hk_Vector3S2_S2_
t _GLOBAL__sub_I__ZN10hk_Vector319set_transformed_posERK12hk_TransformRKS_
t _GLOBAL__sub_I__ZN11hk_Rotation3setERK13hk_Quaternion
t _GLOBAL__sub_I__ZN12hk_TransformC2ERK13hk_QuaternionRK10hk_Vector3
t _GLOBAL__sub_I__ZN12IVP_Tri_Edge22search_nearest_edge_toEP11IVP_U_PointPf
t _GLOBAL__sub_I__ZN13hk_ConstraintC2EP26hk_Local_Constraint_SystemP13hk_Rigid_BodyS3_23IVP_CONTROLLER_PRIORITYi
t _GLOBAL__sub_I__ZN13hk_Quaternion3setERK11hk_Rotation
t _GLOBAL__sub_I__ZN14ConCommandBase18s_pConCommandBasesE
t _GLOBAL__sub_I__ZN14CPhysicsObjectC2Ev
t _GLOBAL__sub_I__ZN14CVPhysicsParseC2EPKc
t _GLOBAL__sub_I__ZN14IVP_point_hashD2Ev
t _GLOBAL__sub_I__ZN14IVP_Synapse_OO25hull_limit_exceeded_eventEP16IVP_Hull_Managerf
t _GLOBAL__sub_I__ZN15CUtlBinaryBlockC2Eii
t _GLOBAL__sub_I__ZN15hk_Vector3_Util10random_vecEv
t _GLOBAL__sub_I__ZN16CDataManagerBaseC2Ej
t _GLOBAL__sub_I__ZN16CPhysics_AirboatC2EP15IVP_EnvironmentPK23IVP_Template_Car_SystemP17IPhysicsGameTrace
t _GLOBAL__sub_I__ZN16IVP_ov_tree_hashD2Ev
t _GLOBAL__sub_I__ZN17CFrictionSnapshotC2EP15IVP_Real_Object
t _GLOBAL__sub_I__ZN17IVP_Range_ManagerC2EP15IVP_Environment8IVP_BOOL
t _GLOBAL__sub_I__ZN18hk_Rigid_Body_Core22add_to_mass_matrix_invER17hk_Core_VMQ_InputR15hk_Dense_MatrixPf
t _GLOBAL__sub_I__ZN18IVP_I_FPoint_VHashD2Ev
t _GLOBAL__sub_I__ZN19hk_Fixed_Constraint15init_constraintEPKv
t _GLOBAL__sub_I__ZN19hk_Hinge_BP_Builder15set_position_osEiRK10hk_Vector3
t _GLOBAL__sub_I__ZN19hk_Hinge_Constraint15init_constraintEPKv
t _GLOBAL__sub_I__ZN20hk_Dense_Matrix_Util4multERK15hk_Dense_MatrixRK15hk_Dense_VectorRS3_
t _GLOBAL__sub_I__ZN20hk_Pulley_Constraint15init_constraintEPKv
t _GLOBAL__sub_I__ZN21hk_Ragdoll_Constraint15init_constraintEPKv
t _GLOBAL__sub_I__ZN21IVP_3D_Solver_PF_COLL9get_valueEP12IVP_U_MatrixS1_
t _GLOBAL__sub_I__ZN21IVP_Compact_RecursiveC2Ev
t _GLOBAL__sub_I__ZN21IVP_Mindist_Recursive19mindist_rescue_pushEv
t _GLOBAL__sub_I__ZN22CPolyhedron_AllocByNew7ReleaseEv
t _GLOBAL__sub_I__ZN23CPhysicsFluidControllerC2EP17CBuoyancyAttacherP29IVP_Liquid_Surface_DescriptorP14CPhysicsObjecti
t _GLOBAL__sub_I__ZN23hk_Breakable_ConstraintC2EP14hk_EnvironmentPK26hk_Breakable_Constraint_BP
t _GLOBAL__sub_I__ZN23hk_Prismatic_Constraint15init_constraintEPKv
t _GLOBAL__sub_I__ZN23hk_Rigid_Body_Binary_EFC2EP14hk_EnvironmentP13hk_Rigid_BodyS3_23IVP_CONTROLLER_PRIORITY
t _GLOBAL__sub_I__ZN24IVP_Calc_Next_PSI_Solver38get_longest_time_step_dependent_on_rotEP8IVP_Core
t _GLOBAL__sub_I__ZN25hk_Ball_Socket_ConstraintC2EP14hk_EnvironmentPK17hk_Ball_Socket_BPP13hk_Rigid_BodyS6_
t _GLOBAL__sub_I__ZN26hk_Local_Constraint_SystemC2EP14hk_EnvironmentP29hk_Local_Constraint_System_BP
t _GLOBAL__sub_I__ZN26hk_Stiff_Spring_Constraint15init_constraintEPKv
t _GLOBAL__sub_I__ZN27IVP_Compact_Ledge_GeneratorC2Ev
t _GLOBAL__sub_I__ZN27IVP_Constraint_Local_AnchorC2Ev
t _GLOBAL__sub_I__ZN30IVP_Object_Callback_Table_HashD2Ev
t _GLOBAL__sub_I__ZN30IVP_Template_Controller_MotionC2Ev
t _GLOBAL__sub_I__ZN30vphysics_save_cphysicsspring_t9m_DataMapE
t _GLOBAL__sub_I__ZN32hk_Ragdoll_Constraint_BP_Builder38initialize_from_limited_ball_socket_bpEPK25hk_Limited_Ball_Socket_BPP13hk_Rigid_BodyS4_
t _GLOBAL__sub_I__ZN32vphysics_save_motioncontroller_t9m_DataMapE
t _GLOBAL__sub_I__ZN33IVP_Collision_Callback_Table_HashD2Ev
t _GLOBAL__sub_I__ZN34CPhysics_Car_System_Raycast_WheelsC2EP15IVP_EnvironmentPK23IVP_Template_Car_System
t _GLOBAL__sub_I__ZN34vphysics_save_cvehiclecontroller_t9m_DataMapE
t _GLOBAL__sub_I__ZN36IVP_Collision_Delegator_Root_Mindist42object_is_removed_from_collision_detectionEP15IVP_Real_Object
t _GLOBAL__sub_I__ZN36IVP_Compact_Ledge_Mass_Center_SolverC2EPK12IVP_U_Matrix
t _GLOBAL__sub_I__ZN8IVP_BallC2EP11IVP_ClusterPK17IVP_Template_BallPK24IVP_Template_Real_ObjectPK10IVP_U_QuatPK11IVP_U_Point
t _GLOBAL__sub_I__ZN9CByteswap23SwapFieldToTargetEndianEPvS0_P17typedescription_t
b g_MatrixIdentity
b g_MeshFrameLocksPool
w __gmon_start__
d g_ParseBlocks
b g_pAsyncFileSystem
b g_pAVI
b g_pBIK
b g_pCVar
b g_pDataCache
b g_pDmeMakefileUtils
b g_pEventSystem
b g_pFullFileSystem
b g_pGameUISystemMgr
b g_PhysicsCollision
d g_PhysicsInternal
d g_PhysicsUnits
b g_pInputStackSystem
b g_pInputSystem
b g_pLocalize
b g_pMatchFramework
b g_pMaterialSystem
b g_pMaterialSystem2
b g_pMaterialSystemDebugTextureInfo
b g_pMaterialSystemHardwareConfig
b g_pMatSystemSurface
b g_pMDLCache
U g_pMemAlloc
b g_pMeshFrameLocks
b g_pMeshSystem
b g_pNetworkSystem
b g_pPhysics2
b g_pPhysics2ActorManager
b g_pPhysics2ResourceManager
b g_pPhysicsCollision
b g_pPrecacheSystem
b g_pProcessUtils
b g_pQueuedLoader
b g_pRenderDevice
b g_pRenderDeviceMgr
b g_pRenderHardwareConfig
b g_pResourceAccessControl
b g_pResourceSystem
b g_pSceneSystem
b g_pSoundEmitterSystem
b g_pSoundSystem
b g_pStudioRender
d g_pszModule
b g_pUtlSortVectorQSortContext
b g_pVGui
b g_pVGuiInput
b g_pVGuiLocalize
b g_pVGuiPanel
b g_pVGuiRenderSurface
b g_pVGuiSchemeManager
b g_pVGuiSurface
b g_pVGuiSystem
b g_pWorldRendererMgr
d g_RagdollAnimatedFrictionBlock
d g_RagdollConstraintBlock
r g_scalar4_hk_epsilon
d g_scPi
d g_scPiDiv2
d g_scPiDiv4
d g_sc_tan_pi_8
d g_scTermArcTanR1
d g_scTermArcTanR3
d g_scTermArcTanR5
r g_SIMD_0123
r g_SIMD_AllOnesMask
r g_SIMD_clear_signmask
r g_SIMD_clear_wmask
r g_SIMD_ComponentMask
r g_SIMD_EveryOtherMask
r g_SIMD_Identity
r g_SIMD_Low16BitsMask
r g_SIMD_lsbmask
r g_SIMD_signmask
r g_SIMD_SkipTailMask
d g_SolidBlock
b g_SurfaceDatabase
b g_VBAllocTracker
b g_VisitHashPool
b g_VPhysPtrSaveRestoreOps
b g_VPhysPtrUtlVectorSaveRestoreOps
U g_VProfCurrentProfile
t __gxx_personality_v0
t __i686.get_pc_thunk.bx
t __i686.get_pc_thunk.cx
t __i686.get_pc_thunk.dx
U iconv_close@@GLIBC_2.1
U iconv@@GLIBC_2.1
U iconv_open@@GLIBC_2.1
T _init
t init_dwarf_reg_size_table
U isalnum@@GLIBC_2.0
U iscntrl@@GLIBC_2.0
U isprint@@GLIBC_2.0
U iswalnum@@GLIBC_2.0
U iswspace@@GLIBC_2.0
b IVP_CLS
b ivp_debug_indent
b ivp_debugmanager
b ivp_debug_sf_indent
b ivp_debug_sf_last_node_was_terminal
b ivp_debug_sf_max_treedepth
b ivp_debug_sf_n_nodes_with_one_terminal
b ivp_debug_sf_treedepth
d IVP_Hash_crctab
b ivp_mindist_settings
d __JCR_END__
d __JCR_LIST__
w _Jv_RegisterClasses
t .L12
t .L155
t .L156
t .L157
t .L158
t .L159
t .L160
t .L161
t .L162
t .L163
t .L164
t .L165
t .L166
t .L167
t .L168
t .L169
t .L17
t .L19
t .L2
t .L20
t .L214
t .L215
t .L215
t .L216
t .L216
t .L217
t .L217
t .L218
t .L218
t .L218
t .L219
t .L219
t .L220
t .L220
t .L221
t .L221
t .L222
t .L223
t .L224
t .L225
t .L226
t .L227
t .L228
t .L229
t .L23
t .L230
t .L24
t .L244
t .L25
t .L26
t .L26
t .L271
t .L272
t .L273
t .L274
t .L275
t .L28
t .L29
t .L3
t .L32
t .L327
t .L328
t .L329
t .L33
t .L330
t .L331
t .L34
t .L35
t .L4
t .L43
t .L45
t .L46
t .L465
t .L466
t .L467
t .L468
t .L469
t .L47
t .L47
t .L472
t .L473
t .L474
t .L475
t .L476
t .L48
t .L48
t .L49
t .L5
t .L50
t .L51
t .L51
t .L511
t .L512
t .L513
t .L514
t .L515
t .L516
t .L517
t .L518
t .L519
t .L52
t .L52
t .L520
t .L521
t .L522
t .L523
t .L524
t .L525
t .L526
t .L527
t .L528
t .L529
t .L53
t .L53
t .L530
t .L531
t .L532
t .L533
t .L54
t .L54
t .L542
t .L543
t .L544
t .L545
t .L546
t .L547
t .L549
t .L55
t .L550
t .L551
t .L552
t .L553
t .L554
t .L555
t .L556
t .L557
t .L558
t .L559
t .L56
t .L560
t .L561
t .L562
t .L563
t .L564
t .L565
t .L566
t .L567
t .L568
t .L569
t .L57
t .L570
t .L571
t .L572
t .L573
t .L574
t .L575
t .L576
t .L577
t .L579
t .L58
t .L581
t .L582
t .L583
t .L584
t .L585
t .L586
t .L587
t .L587
t .L588
t .L589
t .L59
t .L590
t .L591
t .L592
t .L593
t .L597
t .L6
t .L6
t .L60
t .L601
t .L602
t .L603
t .L607
t .L61
t .L611
t .L615
t .L619
t .L62
t .L623
t .L627
t .L63
t .L631
t .L636
t .L64
t .L640
t .L644
t .L648
t .L65
t .L652
t .L656
t .L66
t .L660
t .L663
t .L664
t .L664
t .L665
t .L666
t .L667
t .L668
t .L67
t .L672
t .L68
t .L683
t .L69
t .L7
t .L7
t .L70
t .L700
t .L71
t .L711
t .L712
t .L713
t .L714
t .L715
t .L716
t .L717
t .L718
t .L719
t .L720
t .L721
t .L722
t .L723
t .L727
t .L750
t .L751
t .L752
t .L753
t .L754
t .L755
t .L756
t .L757
t .L758
t .L759
t .L760
t .L761
t .L762
t .L764
t .L765
t .L766
t .L767
t .L768
t .L769
t .L770
t .L771
t .L772
t .L780
t .L782
t .L785
t .L792
t .L799
t .L8
t .L8
t .L800
t .L801
t .L802
t .L804
t .L807
t .L810
t .L826
t .L829
t .L832
t .L835
t .L841
t .L844
t .L9
U lchown@@GLIBC_2.0
t linear_search_fdes
b lineartolightmap
b lineartovertex
U link@@GLIBC_2.0
U localtime@@GLIBC_2.0
U LOG_GENERAL
U LoggingSystem_IsChannelEnabled
U LoggingSystem_Log
U LoggingSystem_LogDirect
U LoggingSystem_RegisterLoggingChannel
U log@@GLIBC_2.0
b LOG_HavokConsole
U longjmp@@GLIBC_2.0
t lstat
t __lstat
U __lxstat64@@GLIBC_2.2
U __lxstat@@GLIBC_2.0
t _malloc_dbg
U malloc@@GLIBC_2.0
b marker.7234
b materials
R MAX_OBJECT_ROT_SPEED
U mbstowcs@@GLIBC_2.0
b mdlcache
b mdllib
U memcmp@@GLIBC_2.0
U memcpy@@GLIBC_2.0
U memmove@@GLIBC_2.0
U memset@@GLIBC_2.0
U mkdir@@GLIBC_2.0
U mkfifo@@GLIBC_2.0
t mknod
t __mknod
U mount@@GLIBC_2.0
U Msg
t _msize_dbg
r nanmask
t _nh_malloc_dbg
d n_physical_pops
b object_mutex
b once_regsizes.7669
U open64@@GLIBC_2.2
U opendir@@GLIBC_2.0
U open@@GLIBC_2.0
b p4
b p_error_buffer
d pfVectorNormalizeFast
d physcollision
b phys_enable_experimental_optimizations
d phys_enable_simd_optimizations
d physprops
U Plat_ExitProcess
U Plat_IsInDebugSession
d power2_n
U powf@@GLIBC_2.0
U pow@@GLIBC_2.0
b P_Pop_Eps
b P_Pop_Scal_Eps
b P_Pop_Too_Flat_Eps
U printf@@GLIBC_2.0
w pthread_cancel@@GLIBC_2.0
U pthread_mutexattr_init@@GLIBC_2.0
U pthread_mutexattr_settype@@GLIBC_2.1
U pthread_mutex_destroy@@GLIBC_2.0
U pthread_mutex_init@@GLIBC_2.0
U pthread_mutex_lock@@GLIBC_2.0
U pthread_mutex_unlock@@GLIBC_2.0
w pthread_once@@GLIBC_2.0
U putchar@@GLIBC_2.0
U puts@@GLIBC_2.0
b qhmem
b qh_qh
b qh_qhstat
d qh_rand_seed
d qh_version
U qsort@@GLIBC_2.0
b quat_identity
U rand@@GLIBC_2.0
U RandomFloat
U RandomSeed
U readdir64@@GLIBC_2.2
t read_encoded_value
t read_encoded_value_with_base
t read_sleb128
t read_sleb128
t read_uleb128
t read_uleb128
t _realloc_dbg
U realloc@@GLIBC_2.0
U realpath@@GLIBC_2.3
t __register_frame
t __register_frame_info
t __register_frame_info_bases
t __register_frame_info_table
t __register_frame_info_table_bases
t __register_frame_table
U rename@@GLIBC_2.0
U rmdir@@GLIBC_2.0
b s_bMathlibInitialized
U scandir@@GLIBC_2.0
t search_object
b seen_objects
t set_fast_math
U _setjmp@@GLIBC_2.0
U sincosf@@GLIBC_2.1
b SinCosTable
U sinf@@GLIBC_2.0
U sin@@GLIBC_2.0
t size_of_encoded_value
b s_NoEscConversion
B s_pInterfaceRegs
U sprintf@@GLIBC_2.0
U sqrtf@@GLIBC_2.0
U sqrt@@GLIBC_2.0
U sscanf@@GLIBC_2.0
b s_StringCharConversion
d standard_subs
t stat
t __stat
U stderr@@GLIBC_2.0
U stdout@@GLIBC_2.0
U strcasecmp@@GLIBC_2.0
U strcasestr@@GLIBC_2.1
U strcat@@GLIBC_2.0
U strchr@@GLIBC_2.0
U strcmp@@GLIBC_2.0
U strcpy@@GLIBC_2.0
U strdup@@GLIBC_2.0
U strlen@@GLIBC_2.0
U strncat@@GLIBC_2.0
U strncmp@@GLIBC_2.0
U strncpy@@GLIBC_2.0
U strnlen@@GLIBC_2.0
U strpbrk@@GLIBC_2.0
U strrchr@@GLIBC_2.0
U strstr@@GLIBC_2.0
U strtod@@GLIBC_2.0
U __strtod_internal@@GLIBC_2.0
U strtok@@GLIBC_2.0
U strtol@@GLIBC_2.0
U __strtol_internal@@GLIBC_2.0
U strtoll@@GLIBC_2.0
U strtoul@@GLIBC_2.0
b studiorender
b subs.7497
U symlink@@GLIBC_2.0
U syscall@@GLIBC_2.0
t T.713
t T.990
U tanf@@GLIBC_2.0
U tan@@GLIBC_2.0
b terminator.7340
U ThreadGetCurrentId
U ThreadInterlockedAssignIf64
U ThreadSleep
U time@@GLIBC_2.0
U ___tls_get_addr@@GLIBC_2.3
U tolower@@GLIBC_2.0
U toupper@@GLIBC_2.0
U towlower@@GLIBC_2.0
U towupper@@GLIBC_2.0
t __udivdi3
U unlink@@GLIBC_2.0
b unseen_objects
t _Unwind_Backtrace
t _Unwind_DebugHook
t _Unwind_DeleteException
t _Unwind_FindEnclosingFunction
t _Unwind_Find_FDE
t _Unwind_ForcedUnwind
t _Unwind_ForcedUnwind_Phase2
t _Unwind_GetCFA
t _Unwind_GetDataRelBase
t _Unwind_GetGR
t _Unwind_GetIP
t _Unwind_GetIPInfo
t _Unwind_GetLanguageSpecificData
t _Unwind_GetRegionStart
t _Unwind_GetTextRelBase
t _Unwind_IteratePhdrCallback
t _Unwind_RaiseException
t _Unwind_RaiseException_Phase2
t _Unwind_Resume
t _Unwind_Resume_or_Rethrow
t _Unwind_SetGR
t _Unwind_SetIP
t _Unwind_SetSpColumn
U utime@@GLIBC_2.0
U utimes@@GLIBC_2.0
t uw_frame_state_for
t uw_init_context_1
t uw_install_context_1
t uw_update_context
t uw_update_context_1
b vec3_angle
b vec3_invalid
b vec3_origin
U vsnprintf@@GLIBC_2.0
U vsprintf@@GLIBC_2.0
U vswprintf@@GLIBC_2.2
U Warning
U wcslen@@GLIBC_2.0
U wcsncat@@GLIBC_2.0
U wcsncpy@@GLIBC_2.0
U wcstombs@@GLIBC_2.0
t __wrap_access
t __wrap_chmod
t __wrap_chown
t __wrap_creat
t __wrap_fopen
t __wrap_fopen64
t __wrap_freopen
t __wrap_lchown
t __wrap_link
t __wrap_lstat
t __wrap___lxstat
t __wrap___lxstat64
t __wrap_mkdir
t __wrap_mkfifo
t __wrap_mknod
t __wrap_mount
t __wrap_open
t __wrap_open64
t __wrap_opendir
t __wrap_realpath
t __wrap_rename
t __wrap_rmdir
t __wrap_scandir
t __wrap_stat
t __wrap_symlink
t __wrap_unlink
t __wrap_utime
t __wrap_utimes
t __wrap___xstat
t __wrap___xstat64
U WriteMiniDump
U __xmknod@@GLIBC_2.0
U __xstat64@@GLIBC_2.2
U __xstat@@GLIBC_2.0
t ArcTan2Alt(float __vector(4), float __vector(4))
t ArcTan2Alt(float __vector, float __vector)
U DevWarning(char const*, ...)
t HashString(char const*)
t HexToValue(char)
t IsDenormal(float const&)
t IsSimilar3(float __vector(4) const&, hk_Vector3 const&, float)
t IsSimilar3(float __vector(4) const&, float __vector(4) const&, float)
t IsSimilar3(float __vector const&, hk_Vector3 const&, float)
t IsSimilar3(float __vector const&, float __vector const&, float)
t MatrixCopy(matrix3x4_t const&, matrix3x4_t&)
t MatrixCopy(VMatrix const&, VMatrix&)
t PhysPmcEnd()
t qh_addhash(void*, setT*, int, unsigned int)
t qh_divzero(double, double, double, unsigned int*)
t qh_errexit(int, facetT*, ridgeT*)
t qh_getarea(facetT*)
t qh_gethash(int, setT*, int, int, void*)
t qh_memfree(void*, int)
t qh_meminit(_IO_FILE*)
t qh_memsize(int)
t qh_mindiff(double*, double*, int)
t qh_pointid(double*)
t qh_setcopy(setT*, int)
t qh_setfree(setT**)
t qh_setlast(setT*)
t qh_setsize(setT*)
t qh_settemp(int)
t qh_setzero(setT*, int, int)
t ReadRandom(int*)
t RotateAABB(matrix3x4_t const&, Vector const&, Vector const&, Vector&, Vector&)
t V_FileBase(char const*, char*, int)
t _V_memmove(void*, void const*, int)
t V_snprintf(char*, int, char const*, ...)
t _V_stricmp(char const*, char const*)
t V_strnicmp(char const*, char const*, int)
t V_strnistr(char const*, char const*, int)
t _V_strnlen(char const*, int)
t _V_strrchr(char const*, char)
t V_StrRight(char const*, int, char*, int)
t V_StrSlice(char const*, int, int, char*, int)
t V_StrSubst(char const*, char const*, char const*, char*, int, bool)
t V_strtowcs(char const*, int, wchar_t*, int)
t V_wcstostr(wchar_t const*, int, char*, int)
t AllocString(char const*, int)
t AngleMatrix(RadianEuler const&, matrix3x4_t&)
t AngleMatrix(RadianEuler const&, Vector const&, matrix3x4_t&)
t AngleMatrix(QAngle const&, matrix3x4_t&)
t AngleMatrix(QAngle const&, Vector const&, matrix3x4_t&)
t ClearBounds(Vector&, Vector&)
t CubicBasis0(float)
t CubicBasis1(float)
t CubicBasis2(float)
t CubicBasis3(float)
t datamap_t* DataMapInit<vehicleparams_t>(vehicleparams_t*)
t datamap_t* DataMapInit<physcollideheader_t>(physcollideheader_t*)
t datamap_t* DataMapInit<vehicle_axleparams_t>(vehicle_axleparams_t*)
t datamap_t* DataMapInit<vehicle_bodyparams_t>(vehicle_bodyparams_t*)
t datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)
t datamap_t* DataMapInit<compactsurfaceheader_t>(compactsurfaceheader_t*)
t datamap_t* DataMapInit<vehicle_engineparams_t>(vehicle_engineparams_t*)
t datamap_t* DataMapInit<vehicle_steeringparams_t>(vehicle_steeringparams_t*)
t datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)
t datamap_t* DataMapInit<vehicle_suspensionparams_t>(vehicle_suspensionparams_t*)
t datamap_t* DataMapInit<vphysics_save_cphysicsobject_t>(vphysics_save_cphysicsobject_t*)
t datamap_t* DataMapInit<vphysics_save_cphysicsspring_t>(vphysics_save_cphysicsspring_t*)
t datamap_t* DataMapInit<vphysics_save_constraintfixed_t>(vphysics_save_constraintfixed_t*)
t datamap_t* DataMapInit<vphysics_save_constrainthinge_t>(vphysics_save_constrainthinge_t*)
t datamap_t* DataMapInit<vphysics_save_constraintlength_t>(vphysics_save_constraintlength_t*)
t datamap_t* DataMapInit<vphysics_save_constraintpulley_t>(vphysics_save_constraintpulley_t*)
t datamap_t* DataMapInit<vphysics_save_motioncontroller_t>(vphysics_save_motioncontroller_t*)
t datamap_t* DataMapInit<vphysics_save_constraintragdoll_t>(vphysics_save_constraintragdoll_t*)
t datamap_t* DataMapInit<vphysics_save_constraintsliding_t>(vphysics_save_constraintsliding_t*)
t datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)
t datamap_t* DataMapInit<vphysics_save_cphysicsconstraint_t>(vphysics_save_cphysicsconstraint_t*)
t datamap_t* DataMapInit<vphysics_save_cvehiclecontroller_t>(vphysics_save_cvehiclecontroller_t*)
t datamap_t* DataMapInit<vphysics_save_constraintaxislimit_t>(vphysics_save_constraintaxislimit_t*)
t datamap_t* DataMapInit<vphysics_save_constraintbreakable_t>(vphysics_save_constraintbreakable_t*)
t datamap_t* DataMapInit<vphysics_save_shadowcontrolparams_t>(vphysics_save_shadowcontrolparams_t*)
t datamap_t* DataMapInit<vphysics_save_constraintballsocket_t>(vphysics_save_constraintballsocket_t*)
t datamap_t* DataMapInit<vphysics_save_cphysicsconstraintgroup_t>(vphysics_save_cphysicsconstraintgroup_t*)
t FloorDivMod(double, double, int*, int*)
t InitLeafmap(IVP_Compact_Ledge*, leafmap_t*)
t IRotateAABB(matrix3x4_t const&, Vector const&, Vector const&, Vector&, Vector&)
t ivp_message(char const*, ...)
t MurmurHash2(void const*, int, unsigned int)
t p_get_error()
t p_get_float()
t p_mergesort(void**, int, int, int (*)(void*, void*, char*), char*)
t qh_addpoint(double*, facetT*, unsigned int)
t qh_allstatA()
t qh_allstatB()
t qh_allstatC()
t qh_allstatD()
t qh_allstatE()
t qh_allstatF()
t qh_allstatG()
t qh_allstatH()
t qh_allstatI()
t qh_delfacet(facetT*)
t qh_delridge(ridgeT*)
t qh_detvnorm(vertexT*, vertexT*, setT*, double*)
t qh_distnorm(int, double*, double*, double*)
t qh_errexit2(int, facetT*, facetT*)
t qh_errprint(char const*, facetT*, facetT*, ridgeT*, vertexT*)
t qh_findbest(double*, facetT*, unsigned int, unsigned int, unsigned int, double*, unsigned int*, int*)
t qh_findgood(facetT*, int)
t qh_getangle(double*, double*)
t qh_isvertex(double*, setT*)
t qh_markkeep(facetT*)
t qh_maxouter()
t qh_memalloc(int)
t qh_memsetup()
t qh_newfacet()
t qh_newridge()
t qh_newstats(int, int*)
t qh_premerge(vertexT*, double, double)
t qh_printend(_IO_FILE*, int, facetT*, setT*, unsigned int)
t qh_setcheck(setT*, char const*, int)
t qh_setequal(setT*, setT*)
t qh_setfree2(setT**, int)
t qh_setindex(setT*, void*)
t qh_setprint(_IO_FILE*, char const*, setT*)
t Q_URLDecode(char*, int, char const*, int)
t Q_URLEncode(char*, int, char const*, int)
t SmoothCurve(float)
t V_ParseLine(char const*, char*, int, bool*)
t V_snwprintf(wchar_t*, int, wchar_t const*, ...)
t _V_strlower(char*)
t V_vsnprintf(char*, int, char const*, char*)
t _V_wcslower(wchar_t*)
t WriteRandom(int*)
t AllocWString(wchar_t const*, int)
t AngleIMatrix(RadianEuler const&, matrix3x4_t&)
t AngleIMatrix(QAngle const&, matrix3x4_t&)
t AngleIMatrix(QAngle const&, Vector const&, matrix3x4_t&)
t AngleVectors(QAngle const&, Vector*)
t AngleVectors(QAngle const&, Vector*, Vector*, Vector*)
t CopyMemory3D(void*, void const*, int, int, int, int, int, int, int)
t CreateSpring(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, springparams_t*)
t CrossProduct(float const*, float const*, float*)
t CrossProduct(Vector const&, Vector const&, Vector&) [clone .constprop.84]
t Cubic_Spline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t gbs_add_path(char*, char*)
t _InvRSquared(float const*)
t IsPointInBox(Vector const&, Vector const&, Vector const&)
t IsZeroVector(IVP_U_Point const&)
t MathLib_Init(float, float, float, int, bool, bool, bool, bool)
t MatrixAngles(matrix3x4_t const&, float*)
t MatrixAngles(matrix3x4_t const&, Quaternion&, Vector&)
t MatrixAngles(matrix3x4_t const&, RadianEuler&, Vector&)
t MatrixInvert(matrix3x4_t const&, matrix3x4_t&)
t MurmurHash64(void const*, int, unsigned int)
t p_get_string()
t PhysPmcBegin()
t qh_buildhull()
t qh_checkzero(unsigned int)
t qh_delvertex(vertexT*)
t qh_detjoggle(double*, int, int)
t qh_detvridge(vertexT*)
t qh_distplane(double*, facetT*, double*)
t qh_distround(int, double, double)
t qh_facetarea(facetT*)
t qh_freebuild(unsigned int)
t qh_freeqhull(unsigned int)
t qh_gausselim(double**, int, int, unsigned int*, unsigned int*)
t qh_getcenter(setT*)
t qh_hashridge(setT*, int, ridgeT*, vertexT*)
t qh_initbuild()
t qh_initflags(char*)
t qh_maxabsval(double*, int)
t qh_minabsval(double*, int)
t qh_new_qhull(int, int, double*, unsigned int, char*, _IO_FILE*, _IO_FILE*)
t qh_newvertex(double*)
t qh_normalize(double*, int, unsigned int)
t qh_point_add(setT*, double*, void*)
t qh_pointdist(double*, double*, int)
t qh_postmerge(char const*, double, double, unsigned int)
t qh_precision(char const*)
t qh_scalelast(double*, int, int, double, double, double)
t qh_setaddnth(setT**, int, void*)
t qh_setappend(setT**, void*)
t qh_setdelnth(setT*, int)
t qh_setlarger(setT**)
t qh_setunique(setT**, void*)
t qh_skipfacet(facetT*)
t QuaternionLn(Quaternion const&, Quaternion&)
t SeedRandSIMD(unsigned int)
t TriangleArea(Vector const&, Vector const&, Vector const&)
t VectorAngles(float const*, float*)
t VectorAngles(Vector const&, QAngle&)
t VectorAngles(Vector const&, Vector const&, QAngle&)
t VectorMatrix(Vector const&, matrix3x4_t&)
t VectorRotate(float const*, matrix3x4_t const&, float*)
t VectorRotate(Vector const&, Quaternion const&, Vector&)
t VectorRotate(Vector const&, QAngle const&, Vector&)
t VectorsEqual(float const*, float const*)
t V_FixSlashes(char*, char)
t V_ParseToken(char const*, char*, int, bool*, characterset_t*)
t V_PathsMatch(char const*, char const*)
t V_pretifymem(float, int, bool)
t V_pretifynum(long long)
t V_strcasecmp(char const*, char const*)
t V_vsnwprintf(wchar_t*, int, wchar_t const*, char*)
t AngleDistance(float, float)
t ApproachAngle(float, float, float)
t FreeVisitHash(CVisitHash*)
t GammaToLinear(float)
t iHexCharToInt(char)
t IsPointInCone(Vector const&, Vector const&, Vector const&, float, float)
t LinearToGamma(float)
t MatrixVectors(matrix3x4_t const&, Vector*, Vector*, Vector*)
t ParseKeyvalue(char const*, char*, char*)
t p_make_string(char const*, ...)
t PointsFromBox(Vector const&, Vector const&, Vector*)
t PolyFromPlane(Vector*, Vector const&, float, float)
t p_print_error()
t qh_all_merges(unsigned int, unsigned int)
t qh_backnormal(double**, int, int, unsigned int, double*, unsigned int*)
t qh_checkfacet(facetT*, unsigned int, unsigned int*)
t qh_copypoints(double*, int, int)
t qh_detsimplex(double*, setT*, int, unsigned int*)
t qh_detvridge3(vertexT*, vertexT*)
t qh_geomplanes(facetT*, double*, double*)
t qh_getcentrum(facetT*)
t qh_makeridges(facetT*)
t qh_maxsimplex(int, setT*, double*, int, setT**)
t qh_mergecycle(facetT*, facetT*)
t qh_mergefacet(facetT*, facetT*, double*, double*, unsigned int)
t qh_nearvertex(facetT*, double*, double*)
t qh_normalize2(double*, int, unsigned int, double*, unsigned int*)
t qh_outerinner(facetT*, double*, double*)
t qh_pointfacet()
t qh_printbegin(_IO_FILE*, int, facetT*, setT*, unsigned int)
t qh_printfacet(_IO_FILE*, facetT*)
t qh_printlists()
t qh_printpoint(_IO_FILE*, char const*, double*)
t qh_printridge(_IO_FILE*, ridgeT*)
t qh_printstats(_IO_FILE*, int, int*)
t qh_printvnorm(_IO_FILE*, vertexT*, vertexT*, setT*, unsigned int)
t qh_readpoints(int*, int*, unsigned int*)
t qh_resetlists(unsigned int)
t qh_scaleinput()
t qh_setcompact(setT*)
t qh_setdellast(setT*)
t qh_setreplace(setT*, void*, void*)
t qh_settemppop()
t qh_tracemerge(facetT*, facetT*)
t qh_willdelete(facetT*, facetT*)
t QuaternionAdd(Quaternion const&, Quaternion const&, Quaternion&)
t QuaternionExp(Quaternion const&, Quaternion&)
t RotateBetween(Vector const&, Vector const&)
t RotationDelta(QAngle const&, QAngle const&, QAngle*)
t TransformAABB(matrix3x4_t const&, Vector const&, Vector const&, Vector&, Vector&)
t V_AppendSlash(char*, int, char)
t V_binarytohex(unsigned char const*, int, char*, int)
t V_BinToString(char*, void*, unsigned int)
t VectorCompare(float const*, float const*)
t VectorIRotate(float const*, matrix3x4_t const&, float*)
t VectorVectors(Vector const&, Vector&, Vector&)
t V_hextobinary(char const*, int, unsigned char*, int)
t vphysics_init()
t V_SplitString(char const*, char const*, CUtlVector<char*, CUtlMemory<char*, int> >&)
t V_StringToBin(char const*, void*, unsigned int)
t V_strncasecmp(char const*, char const*, int)
t _V_UCS2ToUTF8(unsigned short const*, char*, int)
t _V_UTF8ToUCS2(char const*, int, unsigned short*, int)
t AllocVisitHash()
t AngleNormalize(float)
t AnglesAreEqual(float, float, float)
t AreBoundsValid(Vector const&, Vector const&)
t BoxOnPlaneSide(float const*, float const*, cplane_t const*)
t cIntToHexDigit(int)
t ClipPolyhedron(CPolyhedron const*, float const*, int, float, bool)
t Hermite_Spline(float, float, float, float)
t Hermite_Spline(float, float, float, float, float)
t Hermite_Spline(Quaternion const&, Quaternion const&, Quaternion const&, float, Quaternion&)
t Hermite_Spline(Vector const&, Vector const&, Vector const&, float, Vector&)
t Hermite_Spline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t IsVehicleWheel(IVP_Real_Object*)
t ITransformAABB(matrix3x4_t const&, Vector const&, Vector const&, Vector&, Vector&)
t ivp_byte_swap2(unsigned short&)
t ivp_byte_swap4(unsigned int&)
t ivp_dummy_func()
t ivp_srand_read()
t MatrixMultiply(VMatrix const&, VMatrix const&, VMatrix&)
t MatrixToAngles(VMatrix const&, QAngle&)
t p_export_error(char const*, ...)
t qh_appendfacet(facetT*)
t qh_appendprint(qh_PRINT)
t qh_checkconvex(facetT*, int)
t qh_check_point(double*, facetT*, double*, double*, facetT**, facetT**)
t qh_checkvertex(vertexT*)
t qh_countfacets(facetT*, setT*, unsigned int, int*, int*, int*, int*, int*)
t qh_determinant(double**, int, unsigned int*)
t qh_detroundoff()
t qh_eachvoronoi(_IO_FILE*, void (*)(_IO_FILE*, vertexT*, vertexT*, setT*, unsigned int), vertexT*, unsigned int, qh_RIDGE, unsigned int)
t qh_facet2point(facetT*, double**, double**, double*)
t qh_facetcenter(setT*)
t qh_findbestnew(double*, facetT*, double*, unsigned int*, int*)
t qh_findhorizon(double*, facetT*, int*, int*)
t qh_freebuffers()
t qh_furthestout(facetT*)
t qh_getdistance(facetT*, facetT*, double*, double*)
t qh_getmergeset(facetT*)
t qh_initialhull(setT*)
t qh_joggleinput()
t qh_markvoronoi(facetT*, setT*, unsigned int, unsigned int*, int*)
t qh_mergeridges(facetT*, facetT*)
t qh_newvertices(setT*)
t qh_nextridge3d(ridgeT*, facetT*, vertexT**)
t qh_nostatistic(int)
t qh_outcoplanar()
t qh_pointvertex()
t qh_printafacet(_IO_FILE*, int, facetT*, unsigned int)
t qh_printcenter(_IO_FILE*, int, char const*, facetT*)
t qh_printfacets(_IO_FILE*, int, facetT*, setT*, unsigned int)
t qh_printmatrix(_IO_FILE*, char const*, double**, int, int)
t qh_printpoint3(_IO_FILE*, double*)
t qh_printpoints(_IO_FILE*, char const*, setT*)
t qh_printvertex(_IO_FILE*, vertexT*)
t qh_printvridge(_IO_FILE*, vertexT*, vertexT*, setT*, unsigned int)
t qh_projectdim3(double*, double*)
t qh_removefacet(facetT*)
t qh_rotateinput(double**)
t qh_scalepoints(double*, int, int, double*, double*)
t qh_setdelaunay(int, int, double*)
t qh_setfeasible(int)
t qh_setfreelong(setT**)
t qh_settempfree(setT**)
t qh_settemppush(setT*)
t qh_settruncate(setT*, int)
t QuaternionMult(Quaternion const&, Quaternion const&, Quaternion&)
t Q_URLDecodeRaw(char*, int, char const*, int)
t Q_URLEncodeRaw(char*, int, char const*, int)
t SetScaleMatrix(float, float, float, matrix3x4_t&)
t SolveQuadratic(float, float, float, float&, float&)
t Sys_GetFactory(CSysModule*)
t Sys_GetFactory(char const*)
t Sys_LoadModule(char const*)
t TraceGetAABB_r(Vector*, Vector*, IVP_Compact_Ledgetree_Node const*, CTraceIVP&)
t VirtualMeshPSI()
t V_LogMultiline(bool, char const*, char const*, unsigned int, CUtlString&)
t V_RandomString(int)
t V_SetExtension(char*, char const*, int)
t V_SplitString2(char const*, char const**, int, CUtlVector<char*, CUtlMemory<char*, int> >&)
t V_SplitWString(wchar_t const*, wchar_t const*, CUtlVector<wchar_t*, CUtlMemory<wchar_t*, int> >&)
t V_StripLastDir(char*, int)
t V_TokenWaiting(char const*)
t V_vsnprintfRet(char*, int, char const*, char*, bool*)
t AngleQuaternion(RadianEuler const&, Quaternion&)
t AngleQuaternion(QAngle const&, Quaternion&)
t AngleVectorsFLU(QAngle const&, Vector*, Vector*, Vector*)
t BuildGammaTable(float, float, float, int)
t ClipPolyToPlane(Vector*, int, Vector*, Vector const&, float, float)
t ConcatRotations(float const (*) [3], float const (*) [3], float (*) [3])
t ConVar_Register(int, IConCommandBaseAccessor*)
t ConvertBoxToIVP(Vector const&, Vector const&, Vector&, Vector&)
t GetModuleHandle(char const*)
t GetNonMajorAxes(Vector const&, Vector2D&)
t InitSinCosTable()
t IsPointInBounds(Vector const&, Vector const&, Vector const&)
t LinearToTexture(float)
t MatrixGetColumn(matrix3x4_t const&, int, Vector&)
t MatrixInverseTR(VMatrix const&, VMatrix&)
t MatrixNormalize(matrix3x4_t const&, matrix3x4_t&)
t MatrixSetColumn(Vector const&, int, matrix3x4_t&)
t MatrixTranspose(matrix3x4_t&)
t MatrixTranspose(matrix3x4_t const&, matrix3x4_t&)
t MatrixTranspose(VMatrix const&, VMatrix&)
t qh_appendvertex(vertexT*)
t qh_basevertices(facetT*)
t qh_buildtracing(double*, facetT*)
t qh_checkconnect()
t qh_checkflipped(facetT*, double*, unsigned int)
t qh_check_maxout()
t qh_check_output()
t qh_check_points()
t qh_checkpolygon(facetT*)
t qh_clearcenters(qh_CENTER)
t qh_crossproduct(int, double*, double*, double*)
t qh_facet3vertex(facetT*)
t qh_findgood_all(facetT*)
t qh_findgooddist(double*, facetT*, double*, facetT**)
t qh_forcedmerges(unsigned int*)
t qh_furthestnext()
t qh_gram_schmidt(int, double**)
t qh_infiniteloop(facetT*)
t qh_inthresholds(double*, double*)
t qh_makenewfacet(setT*, unsigned int, facetT*)
t qh_memfreeshort(int*, int*)
t qh_mergefacet2d(facetT*, facetT*)
t qh_mergesimplex(facetT*, facetT*, unsigned int)
t qh_nearcoplanar()
t qh_newhashtable(int)
t qh_nextfurthest(facetT**)
t qh_partitionall(setT*, double*, int)
t qh_prependfacet(facetT*, facetT**)
t qh_printcentrum(_IO_FILE*, facetT*, double)
t qh_printpointid(_IO_FILE*, char const*, int, double*, int)
t qh_printspheres(_IO_FILE*, setT*, double)
t qh_printsummary(_IO_FILE*)
t qh_printvoronoi(_IO_FILE*, int, facetT*, setT*, unsigned int)
t qh_projectinput()
t qh_projectpoint(double*, facetT*, double)
t qh_randomfactor()
t qh_randommatrix(double*, int, double**)
t qh_readfeasible(int, char*)
t qh_removevertex(vertexT*)
t qh_renamevertex(vertexT*, vertexT*, setT*, facetT*, facetT*)
t qh_rotatepoints(double*, int, int, double**)
t qh_setaddsorted(setT**, void*)
t qh_setdelsorted(setT*, void*)
t qh_setduplicate(setT*, int)
t qh_sethalfspace(int, double*, double**, double*, double*, double*)
t qh_tracemerging()
t qh_updatetested(facetT*, facetT*)
t qh_vertexridges(vertexT*)
t qh_vertexsubset(setT*, setT*)
t QuaternionAlign(Quaternion const&, Quaternion const&, Quaternion&)
t QuaternionBlend(Quaternion const&, Quaternion const&, float, Quaternion&)
t QuaternionScale(Quaternion const&, float, Quaternion&)
t QuaternionSlerp(Quaternion const&, Quaternion const&, float, Quaternion&)
t RangeCompressor(float, float, float, float)
t TextureToLinear(int)
t VectorNormalize(Vector&)
t VectorTransform(float const*, matrix3x4_t const&, float*)
t VectorYawRotate(Vector const&, float, Vector&)
t V_FixupPathName(char*, int, char const*)
t V_SplitWString2(wchar_t const*, wchar_t const**, int, CUtlVector<wchar_t*, CUtlMemory<wchar_t*, int> >&)
t V_StripFilename(char*)
t AddPointToBounds(Vector const&, Vector&, Vector&)
t ConcatTransforms(matrix3x4_t const&, matrix3x4_t const&, matrix3x4_t&)
t ivp_free_aligned(void*)
t ivp_memory_check(void*)
t MatricesAreEqual(matrix3x4_t const&, matrix3x4_t const&, float)
t MatrixBuildOrtho(VMatrix&, double, double, double, double, double, double)
t MatrixBuildScale(VMatrix&, float, float, float)
t MatrixBuildScale(VMatrix&, Vector const&)
t MatrixFromAngles(QAngle const&, VMatrix&)
t MatrixInitialize(matrix3x4_t&, Vector const&, Vector const&, Vector const&, Vector const&)
t MatrixQuaternion(matrix3x4_t const&, Quaternion&)
t MatrixVectorsFLU(matrix3x4_t const&, Vector*, Vector*, Vector*)
t p_ab_quad_length(P_Sur_2D_Point*, P_Sur_2D_Point*, P_Sur_2D_Point*)
t PackVCollideText(char const*, int, int*)
t Parabolic_Spline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t p_check_for_flat(IVP_Tri_Edge*, IVP_Tri_Edge*, float)
t p_get_next_token()
t qh_allstatistics()
t qh_copynonconvex(ridgeT*)
t qh_createsimplex(setT*)
t qh_deletevisible()
t qh_facetvertices(facetT*, setT*, unsigned int)
t qh_findbestfacet(double*, unsigned int, double*, unsigned int*)
t qh_findbestsharp(double*, facetT**, double*, int*)
t qh_findbest_test(unsigned int, facetT*, facetT*, facetT**, double*, double*, double*)
t qh_findfacet_all(double*, double*, unsigned int*, int*)
t qh_flippedmerges(facetT*, unsigned int*)
t qh_initqhull_mem()
t qh_makenewfacets(double*)
t qh_makenewplanes()
t qh_matchneighbor(facetT*, int, int, int*)
t qh_matchvertices(int, setT*, int, setT*, int*, unsigned int*)
t qh_memstatistics(_IO_FILE*)
t qh_mergevertices(setT*, setT**)
t qh_orientoutside(facetT*)
t qh_printend4geom(_IO_FILE*, facetT*, int*, unsigned int)
t qh_printextremes(_IO_FILE*, facetT*, setT*, int)
t qh_printvdiagram(_IO_FILE*, int, facetT*, setT*, unsigned int)
t qh_printvertices(_IO_FILE*, char const*, setT*)
t qh_projectpoints(signed char*, int, double*, int, int, double*, int)
t qh_setappend_set(setT**, setT*)
t qh_setequal_skip(setT*, int, setT*, int)
t qh_setfacetplane(facetT*)
t qh_user_memsizes()
t QuaternionAngles(Quaternion const&, RadianEuler&)
t QuaternionAngles(Quaternion const&, QAngle&)
t QuaternionInvert(Quaternion const&, Quaternion&)
t QuaternionLookAt(Vector const&, Vector const&, Quaternion&)
t QuaternionMatrix(Quaternion const&, matrix3x4_t&)
t QuaternionMatrix(Quaternion const&, Vector const&, matrix3x4_t&)
t QuaternionMatrix(Quaternion const&, Vector const&, Vector const&, matrix3x4_t&)
t RandomQuaternion(IUniformRandomStream*)
t RandomQuaternion()
t ResolveQuadratic(double, double, Vector, Vector, Vector, Vector, Vector, Vector, int, double&, double&)
t SetCollisionPair(void*)
t SetupMatrixScale(Vector const&)
t SignbitsForPlane(cplane_t*)
t Spline_Normalize(Vector const&, Vector const&, Vector const&, Vector const&, Vector&, Vector&)
t Sys_UnloadModule(CSysModule*)
t TraceGetExtent_r(IVP_Compact_Ledgetree_Node const*, CTraceIVP&, Vector const&, float&, Vector&)
t Vector3DMultiply(VMatrix const&, Vector const&, Vector&)
t Vector4DMultiply(VMatrix const&, Vector4D const&, Vector4D&)
t VectorITransform(float const*, matrix3x4_t const&, float*)
t V_IsAbsolutePath(char const*)
t V_StringToVector(float*, char const*)
t V_StripExtension(char const*, char*, int)
t _V_UCS2ToUnicode(unsigned short const*, wchar_t*, int)
t _V_UnicodeToUCS2(wchar_t const*, int, char*, int)
t _V_UnicodeToUTF8(wchar_t const*, char*, int)
t _V_UTF8ToUnicode(char const*, wchar_t*, int)
t BasisToQuaternion(Vector const&, Vector const&, Vector const&, Quaternion&)
t CharacterSetBuild(characterset_t*, char const*)
t ComputeController(IVP_U_Float_Point&, IVP_U_Float_Point const&, float, float, float, float, IVP_U_Float_Point*)
t ComputeController(IVP_U_Float_Point&, IVP_U_Float_Point const&, IVP_U_Float_Point const&, float, float, IVP_U_Float_Point*)
t ConnectInterfaces(void* (**)(char const*, int*), int)
t ConVar_Unregister()
t ConvertMatrixToHL(IVP_U_Matrix const&, matrix3x4_t&)
t CreateVirtualMesh(virtualmeshparams_t const&)
t FindPointInPlanes(float const*, int)
t GBS_remove_escape(char*)
t GetTempPolyhedron(unsigned short, unsigned short, unsigned short, unsigned short)
t isbreakablewspace(wchar_t)
t ivp_indent_output()
t MatrixSetIdentity(VMatrix&)
t p_count_reachable(P_Sur_2D_Point*)
t PlaneIntersection(VPlane const&, VPlane const&, VPlane const&, Vector&)
t qh_appendmergeset(facetT*, facetT*, mergeType, double*)
t qh_check_bestdist()
t qh_facetintersect(facetT*, facetT*, int*, int*, int)
t qh_find_newvertex(vertexT*, setT*, setT*)
t qh_freestatistics()
t qh_hashridge_find(setT*, int, ridgeT*, vertexT*, vertexT*, int*)
t qh_initstatistics()
t qh_initthresholds(char*)
t qh_mark_dupridges(facetT*)
t qh_matchnewfacets()
t qh_meminitbuffers(int, int, int, int, int)
t qh_mergecycle_all(facetT*, unsigned int*)
t qh_mergeneighbors(facetT*, facetT*)
t qh_partitionpoint(double*, facetT*)
t qh_printfacetlist(facetT*, setT*, unsigned int)
t qh_printhashtable(_IO_FILE*)
t qh_printline3geom(_IO_FILE*, double*, double*, double*)
t qh_printpointvect(_IO_FILE*, double*, double*, double*, double, double*)
t qh_printstatlevel(_IO_FILE*, int, int)
t qh_printvdiagram2(_IO_FILE*, void (*)(_IO_FILE*, vertexT*, vertexT*, setT*, unsigned int), setT*, qh_RIDGE, unsigned int)
t qh_produce_output()
t qh_reducevertices()
t qh_setvoronoi_all()
t qh_updatevertices()
t qh_voronoi_center(int, setT*)
t RegisterInterface(void* (*)(char const*, int*), char const*, void**)
t SavePhysicsObject(physsaveparams_t const&, CPhysicsObject*)
t SavePhysicsSpring(physsaveparams_t const&, CPhysicsSpring*)
t SetIdentityMatrix(matrix3x4_t&)
t SetSelfCollisions(void*)
t SetupMatrixAngles(QAngle const&)
t SmoothCurve_Tweak(float, float, float)
t SrgbGammaToLinear(float)
t SrgbLinearToGamma(float)
t StringAfterPrefix(char const*, char const*)
t Sys_LoadInterface(char const*, char const*, CSysModule**, void**)
t TetrahedronVolume(Vector const&, Vector const&, Vector const&, Vector const&)
t UnitTestVectorFLU()
t V_ComposeFileName(char const*, char const*, char*, int)
t V_ExtractFilePath(char const*, char*, int)
t V_StringToColor32(color32_s*, char const*)
t X360GammaToLinear(float)
t X360LinearToGamma(float)
t BSpline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t CalcDistanceToLine(Vector const&, Vector const&, Vector const&, float*)
t Catmull_Rom_Spline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t ClipLinkedGeometry(GeneratePolyhedronFromPlanes_UnorderedPolygonLL*, GeneratePolyhedronFromPlanes_UnorderedLineLL*, GeneratePolyhedronFromPlanes_UnorderedPointLL*, int, float __vector(4) const*, int, float, bool, float __vector(4))
t ClipLinkedGeometry(GeneratePolyhedronFromPlanes_UnorderedPolygonLL*, GeneratePolyhedronFromPlanes_UnorderedLineLL*, GeneratePolyhedronFromPlanes_UnorderedPointLL*, int, float __vector const*, int, float, bool, float __vector)
t ConVar_AppendFlags(ConCommandBase const*, char*, unsigned int)
t ConvertMatrixToIVP(matrix3x4_t const&, IVP_U_Matrix&)
t DestroyVirtualMesh(CPhysCollide*)
t GetOppositeSynapse(IVP_Synapse_Friction*)
t GetSIMDRandContext()
t HashStringCaseless(char const*)
t ivp_malloc_aligned(int, int)
t MathLib_MMXEnabled()
t MathLib_SSEEnabled()
t MatrixBuildRotateZ(VMatrix&, float)
t p_make_string_fast(char const*, ...)
t PolyFromPlane_SIMD(float __vector(4)*, float __vector(4) const&, float)
t PolyFromPlane_SIMD(float __vector*, float __vector const&, float)
t p_read_first_token(_IO_FILE*)
t qh_attachnewfacets()
t qh_eachvoronoi_all(_IO_FILE*, void (*)(_IO_FILE*, vertexT*, vertexT*, setT*, unsigned int), unsigned int, qh_RIDGE, unsigned int)
t qh_initialvertices(int, setT*, double*, int)
t qh_initqhull_start(_IO_FILE*, _IO_FILE*, _IO_FILE*)
t qh_matchduplicates(facetT*, int, int, int*)
t qh_maydropneighbor(facetT*)
t qh_merge_nonconvex(facetT*, facetT*, mergeType)
t qh_mergevertex_del(vertexT*, facetT*, facetT*)
t qh_printextremes_d(_IO_FILE*, facetT*, setT*, int)
t qh_printfacet2geom(_IO_FILE*, facetT*, double*)
t qh_printfacet2math(_IO_FILE*, facetT*, int)
t qh_printfacet3math(_IO_FILE*, facetT*, int)
t qh_printpoints_out(_IO_FILE*, facetT*, setT*, int)
t qh_printpointvect2(_IO_FILE*, double*, double*, double*, double)
t qh_printstatistics(_IO_FILE*, char const*)
t qh_printvertexlist(_IO_FILE*, char const*, facetT*, setT*, unsigned int)
t qh_printvneighbors(_IO_FILE*, facetT*, setT*, unsigned int)
t qh_setdelnthsorted(setT*, int)
t qh_setequal_except(setT*, void*, setT*, void*)
t qh_settempfree_all()
t qh_test_vneighbors()
t qh_vertexintersect(setT**, setT*)
t qh_vertexneighbors()
t QuaternionMultiply(Quaternion const&, Vector const&, Vector&)
t ReconnectInterface(void* (*)(char const*, int*), char const*)
t ReconnectInterface(void* (*)(char const*, int*), char const*, void**)
t SetupMatrixAxisRot(Vector const&, float)
t Sys_GetFactoryThis()
t UnitTestQuatExpLog()
t V_BoyerMooreSearch(unsigned char const*, int, unsigned char const*, int)
t V_DefaultExtension(char*, char const*, int)
t V_FixDoubleSlashes(char*)
t V_GetFileExtension(char const*)
t V_MakeAbsolutePath(char*, int, char const*, char const*)
t V_MakeRelativePath(char const*, char const*, char*, int)
t V_RemoveDotSlashes(char*, char)
t V_StringToIntArray(int*, int, char const*)
t AxisAngleQuaternion(Vector const&, float, Quaternion&)
t BuildTransformedBox(Vector*, Vector const&, Vector const&, matrix3x4_t const&)
t ConvertRotationToHL(IVP_U_Quat const&, QAngle&)
t ConvertRotationToHL(IVP_U_Matrix3 const&, QAngle&)
t CreatePhysicsObject(CPhysicsEnvironment*, CPhysCollide const*, int, Vector const&, QAngle const&, objectparams_t*, bool)
t CreatePhysicsSphere(CPhysicsEnvironment*, float, int, Vector const&, QAngle const&, objectparams_t*, bool)
t debug_sphere_output(IVV_Sphere*)
t Hermite_SplineBasis(float, float*)
t IntersectRayWithBox(Ray_t const&, Vector const&, Vector const&, float, CBaseTrace*, float*)
t IntersectRayWithBox(Vector const&, Vector const&, Vector const&, Vector const&, float, CBaseTrace*, float*)
t IntersectRayWithBox(Vector const&, Vector const&, Vector const&, Vector const&, float, BoxTraceInfo_t*)
t IntersectRayWithOBB(Ray_t const&, matrix3x4_t const&, Vector const&, Vector const&, float, CBaseTrace*)
t IntersectRayWithOBB(Ray_t const&, Vector const&, QAngle const&, Vector const&, Vector const&, float, CBaseTrace*)
t IntersectRayWithOBB(Vector const&, Vector const&, matrix3x4_t const&, Vector const&, Vector const&, float, CBaseTrace*)
t IntersectRayWithOBB(Vector const&, Vector const&, matrix3x4_t const&, Vector const&, Vector const&, float, BoxTraceInfo_t*)
t IntersectRayWithOBB(Vector const&, Vector const&, Vector const&, QAngle const&, Vector const&, Vector const&, float, CBaseTrace*)
t IntersectRayWithRay(Ray_t const&, Ray_t const&, float&, float&)
t ivp_print_mi_matrix(int, int, IVP_MI_Vector**)
t LinearToScreenGamma(float)
t MathLib_SSE2Enabled()
t MatrixBuildRotation(VMatrix&, Vector const&, Vector const&)
t PackLedgeIntoBuffer(packedhull_t*, CUtlBuffer&, IVP_Compact_Ledge const*, virtualmeshlist_t const&)
t qh_checkflipped_all(facetT*)
t qh_findbestneighbor(facetT*, double*, double*, double*)
t qh_partitionvisible(unsigned int, int*)
t qh_printextremes_2d(_IO_FILE*, facetT*, setT*, int)
t qh_printfacetheader(_IO_FILE*, facetT*)
t qh_printfacetridges(_IO_FILE*, facetT*)
t qh_redundant_vertex(vertexT*)
t qh_setappend2ndlast(setT**, void*)
t qh_sethalfspace_all(int, int, double*, double*)
t qh_test_appendmerge(facetT*, facetT*)
t QuaternionAngleDiff(Quaternion const&, Quaternion const&)
t QuaternionAxisAngle(Quaternion const&, Vector&, float&)
t QuaternionConjugate(Quaternion const&, Quaternion&)
t QuaternionionGetYaw(Quaternion const&)
t QuaternionNormalize(Quaternion&)
t Q_URLDecodeInternal(char*, int, char const*, int, bool)
t Q_URLEncodeInternal(char*, int, char const*, int, bool)
t SetupMatrixIdentity()
t SrgbGammaTo360Gamma(float)
t TransformIVPToLocal(IVP_U_Point&, IVP_Real_Object*, bool)
t TransformIVPToLocal(IVP_U_Point const&, IVP_U_Point&, IVP_Real_Object*, bool)
t TransformLocalToIVP(IVP_U_Point&, IVP_Real_Object*, bool)
t TransformLocalToIVP(IVP_U_Point const&, IVP_U_Point&, IVP_Real_Object*, bool)
t TransformLocalToIVP(IVP_U_Float_Point const&, IVP_U_Point&, IVP_Real_Object*, bool)
t TransformLocalToIVP(IVP_U_Float_Point const&, IVP_U_Float_Point&, IVP_Real_Object*, bool)
t CalcDistanceToLine2D(Vector2D const&, Vector2D const&, Vector2D const&, float*)
t ClipPolyToPlane_SIMD(float __vector(4)*, int, float __vector(4)*, float __vector(4) const&, float)
t ClipPolyToPlane_SIMD(float __vector*, int, float __vector*, float __vector const&, float)
t ComputeTrianglePlane(Vector const&, Vector const&, Vector const&, Vector&, float&)
t ConvertRotationToIVP(QAngle const&, IVP_U_Quat&)
t ConvertRotationToIVP(QAngle const&, IVP_U_Matrix3&)
t CreateObjectPairHash()
t CreateSurfaceManager(CPhysCollide const*, short&)
t DisconnectInterfaces()
t GenerateOrthoFrustum(Vector const&, Vector const&, Vector const&, Vector const&, float, float, float, float, float, float, VPlane*)
t GetInterpolationData(float const*, float const*, int, int, float, bool, float*, float*, float*)
t IsBoxIntersectingBox(Vector const&, Vector const&, Vector const&, Vector const&)
t IsBoxIntersectingRay(Vector const&, Vector const&, Ray_t const&, float)
t IsBoxIntersectingRay(Vector const&, Vector const&, Vector const&, Vector const&, float)
t IsBoxIntersectingRay(Vector const&, Vector const&, Vector const&, Vector const&, Vector const&, float)
t IsBoxIntersectingRay(float __vector(4) const&, float __vector(4) const&, Ray_t const&, float __vector(4) const&)
t IsBoxIntersectingRay(float __vector(4) const&, float __vector(4) const&, float __vector(4) const&, float __vector(4) const&, float __vector(4) const&, float __vector(4) const&)
t IsBoxIntersectingRay(float __vector const&, float __vector const&, Ray_t const&, float __vector const&)
t IsBoxIntersectingRay(float __vector const&, float __vector const&, float __vector const&, float __vector const&, float __vector const&, float __vector const&)
t IsExternalConstraint(IVP_Controller*, void*)
t IsOBBIntersectingOBB(Vector const&, QAngle const&, Vector const&, Vector const&, Vector const&, QAngle const&, Vector const&, Vector const&, float)
t IsRayIntersectingOBB(Ray_t const&, Vector const&, QAngle const&, Vector const&, Vector const&)
t MaterialIndexDataOps()
t MatrixInverseGeneral(VMatrix const&, VMatrix&)
t MatrixQuaternionFast(matrix3x4_t const&, Quaternion&)
t MatrixQuaternionTest(unsigned int)
t MatrixTransformPlane(VMatrix const&, cplane_t const&, cplane_t&)
t MurmurHash2LowerCase(char const*, unsigned int)
t p_link_triangle_self(IVP_Triangle*)
t qh_build_withrestart()
t qh_collectstatistics()
t qh_facetarea_simplex(int, double*, setT*, vertexT*, unsigned int, double*, double*)
t qh_initqhull_buffers()
t qh_initqhull_globals(double*, int, int, unsigned int)
t qh_mergecycle_facets(facetT*, facetT*)
t qh_mergecycle_ridges(facetT*, facetT*)
t qh_partitioncoplanar(double*, facetT*, double*)
t qh_printfacet3vertex(_IO_FILE*, facetT*, int)
t qh_printneighborhood(_IO_FILE*, int, facetT*, facetT*, unsigned int)
t qh_renameridgevertex(ridgeT*, vertexT*, vertexT*)
t qh_sethyperplane_det(int, double**, double*, unsigned int, double*, double*, unsigned int*)
t QuaternionDotProduct(Quaternion const&, Quaternion const&)
t QuaternionionGetRoll(Quaternion const&)
t QuaternionVectorsFLU(Quaternion const&, Vector*, Vector*, Vector*)
t RestorePhysicsObject(physrestoreparams_t const&, CPhysicsObject**)
t RestorePhysicsSpring(physrestoreparams_t const&, CPhysicsSpring**)
t SeedRandomGenerators()
t set_4x4_column_major(IVP_U_Matrix&, float const*)
t SetMassCenterPointer(void*)
t SetupMatrixOrgAngles(Vector const&, QAngle const&)
t Trace_CreateAABBTree(CPhysCollide const*)
t _VectorNormalizeFast(Vector&)
t V_StringToFloatArray(float*, int, char const*)
t V_StripTrailingSlash(char*)
t AngleVectorsTranspose(QAngle const&, Vector*, Vector*, Vector*)
t CalcDistanceSqrToLine(Vector const&, Vector const&, Vector const&, float*)
t CalcSqrDistanceToAABB(Vector const&, Vector const&, Vector const&)
t ColorRGBExp32ToVector(ColorRGBExp32 const&, Vector&)
t ConnectTier1Libraries(void* (**)(char const*, int*), int)
t CreateFixedConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_fixedparams_t const&)
t CreateFluidController(IVP_Environment*, CPhysicsObject*, fluidparams_t*)
t CreateHingeConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_limitedhingeparams_t const&)
t DefaultCompletionFunc(char const*, char (*) [64])
t GetObjectPosition_IVP(IVP_U_Point&, IVP_Real_Object*)
t GreatestCommonDivisor(int, int)
t IntersectRayWithPlane(Ray_t const&, cplane_t const&)
t IntersectRayWithPlane(Vector const&, Vector const&, cplane_t const&)
t IntersectRayWithPlane(Vector const&, Vector const&, Vector const&, float)
t LengthOfMatchingPaths(char const*, char const*)
t MatrixQuaternionTest2(unsigned int)
t out_friction_info_obj(IVP_Core*)
t P_THREE_CHECK_INTRUDE(int, int, int, int, IVP_Tetra_Point*, IVP_Tetra_Point*, IVP_Tri_Edge**, IVP_U_Hesse*, IVP_U_Hesse*, IVP_Tri_Edge**, float*, IVP_U_Point&, IVP_Intrusion_Status*)
t qh_init_qhull_command(int, char**)
t qh_makenew_simplicial(facetT*, vertexT*, int*)
t qh_printallstatistics(_IO_FILE*, char const*)
t qh_printhelp_singular(_IO_FILE*)
t qh_vertexridges_facet(vertexT*, facetT*, setT**)
t QuadWithParallelEdges(Vector const&, Vector const&, float, Vector const&, float, Vector const&, Vector2D&)
t QuaternionionGetPitch(Quaternion const&)
t SavePhysicsConstraint(physsaveparams_t const&, CPhysicsConstraint*)
t SetupMatrixProjection(Vector const&, VPlane const&)
t SetupMatrixReflection(VPlane const&)
t SolveInverseQuadratic(float, float, float, float, float, float, float&, float&, float&)
t Sys_IsDebuggerPresent()
t Trace_DestroyAABBTree(CPhysCollideAABBTree*)
t UnitTestRotateBetween()
t VectorToColorRGBExp32(Vector const&, ColorRGBExp32&)
t V_GetCurrentDirectory(char*, int)
t V_SetCurrentDirectory(char const*)
t V_UnqualifiedFileName(char const*)
t AngleNormalizePositive(float)
t CalcClosestPointOnAABB(Vector const&, Vector const&, Vector const&, Vector&)
t CalcClosestPointOnLine(Vector const&, Vector const&, Vector const&, Vector&, float*)
t ClipLineSegmentToPlane(Vector const&, Vector const&, Vector*, Vector*, float)
t ComputePlanarDistances(GeneratePolyhedronFromPlanes_UnorderedPointLL*, int, float __vector(4))
t ComputePlanarDistances(GeneratePolyhedronFromPlanes_UnorderedPointLL*, int, float __vector)
t ComputeSeparatingPlane(Vector const&, QAngle const&, Vector const&, Vector const&, Vector const&, QAngle const&, Vector const&, Vector const&, float, cplane_t*)
t CreateFrictionSnapshot(IVP_Real_Object*)
t CreateLengthConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_lengthparams_t const&)
t CreateMotionController(CPhysicsEnvironment*, IMotionEvent*, bool)
t CreateObjectFromBuffer(CPhysicsEnvironment*, void*, unsigned char*, unsigned int, bool)
t CreatePlayerController(CPhysicsObject*, bool)
t CreatePulleyConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_pulleyparams_t const&)
t CreateShadowController(CPhysicsObject*, bool, bool)
t DeleteAllFrictionPairs(IVP_Real_Object*, IVP_Real_Object*)
t GammaToLinearFullRange(float)
t GetNoEscCharConversion()
t hk_precache_invert_5x5()
t IntersectRayWithSphere(Vector const&, Vector const&, Vector const&, float, float*, float*)
t ivp_check_for_opposite(IVP_Hash*, IVP_Poly_Point*, IVP_Poly_Point*, IVP_Tri_Edge*)
t LinearToGammaFullRange(float)
t LineCircleIntersection(Vector2D const&, float, Vector2D const&, Vector2D const&, float*, float*)
t MatrixBuildPerspective(VMatrix&, float, float, float, float)
t MatrixBuildTranslation(VMatrix&, float, float, float)
t MatrixBuildTranslation(VMatrix&, Vector const&)
t MatrixInverseTranspose(matrix3x4_t const&, matrix3x4_t&)
t MatrixInverseTranspose(VMatrix const&, VMatrix&)
t OutputCollideDebugInfo(CPhysCollide const*)
t p_del_double_triangles(IVP_Triangle**, IVP_Triangle**, IVP_Triangle**)
t qh_compare_vertexpoint(void const*, void const*)
t qh_getmergeset_initial(facetT*)
t qh_rename_sharedvertex(vertexT*, facetT*)
t qh_sethyperplane_gauss(int, double**, double*, unsigned int, double*, double*, unsigned int*)
t qh_setnew_delnthsorted(setT*, int, int, int)
t qh_vertexintersect_new(setT*, setT*)
t QuaternionBlendNoAlign(Quaternion const&, Quaternion const&, float, Quaternion&)
t QuaternionSlerpNoAlign(Quaternion const&, Quaternion const&, float, Quaternion&)
t ReleaseSIMDRandContext(int)
t RemoveDegeneratePoints(GeneratePolyhedronFromPlanes_Polygon*, CClipLinkedGeometryDestructors&)
t RotationDeltaAxisAngle(QAngle const&, QAngle const&, Vector&, float&)
t SetupMatrixTranslation(Vector const&)
t V_ExtractFileExtension(char const*, char*, int)
t V_GetFileExtensionSafe(char const*)
t V_normalizeFloatString(char*)
t V_StringMatchesPattern(char const*, char const*, int)
t CalcClosestPointToLineT(Vector const&, Vector const&, Vector const&, Vector&)
t CalcDistanceSqrToLine2D(Vector2D const&, Vector2D const&, Vector2D const&, float*)
t ClipPolyToPlane_Precise(double*, int, double*, double const*, double, double)
t ConVar_PrintDescription(ConCommandBase const*)
t CreateInterfaceInternal(char const*, int*)
t CreateRagdollConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_ragdollparams_t const&)
t CreateSlidingConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_slidingparams_t const&)
t CreateVehicleController(CPhysicsEnvironment*, CPhysicsObject*, vehicleparams_t const&, unsigned int, IPhysicsGameTrace*)
t CreateVPhysicsKeyParser(char const*, bool)
t Cubic_Spline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t DestroyFrictionSnapshot(IPhysicsFrictionSnapshot*)
t DestroyPlayerController(IPhysicsPlayerController*)
t FrustumPlanesFromMatrix(VMatrix const&, Frustum_t&)
t GenerateOrthoFrustumFLU(Vector const&, Vector const&, Vector const&, Vector const&, float, float, float, float, float, float, VPlane*)
t IntersectRayWithAAPlane(Vector const&, Vector const&, int, float, float)
t IsBoxIntersectingSphere(Vector const&, Vector const&, Vector const&, float)
t IsRayIntersectingSphere(Vector const&, Vector const&, Vector const&, float, float)
t Kochanek_Bartels_Spline(float, float, float, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t MatrixBuildPerspectiveX(VMatrix&, double, double, double, double)
t p_calc_min_intrude_dist(IVP_Triangle*, IVP_Intrusion_Status*, float)
t qh_mergecycle_neighbors(facetT*, facetT*)
t qh_merge_degenredundant()
t qh_printhelp_degenerate(_IO_FILE*)
t qh_remove_extravertices(facetT*)
t QuaternionIdentityBlend(Quaternion const&, float, Quaternion&)
t RemoveDegeneratePolygon(GeneratePolyhedronFromPlanes_Polygon*, CClipLinkedGeometryDestructors&)
t CalcClosestPointOnLine2D(Vector2D const&, Vector2D const&, Vector2D const&, Vector2D&, float*)
t CalcTriangleTangentSpace(Vector const&, Vector const&, Vector const&, Vector2D const&, Vector2D const&, Vector2D const&, Vector&, Vector&)
t ConcatTransforms_Aligned(matrix3x4a_t const&, matrix3x4a_t const&, matrix3x4a_t&)
t CreatePhysicsEnvironment()
t DestroyVPhysicsKeyParser(IVPhysicsKeyParser*)
t DisconnectTier1Libraries()
t FindConvexShapeLooseAABB(float __vector(4) const*, int, Vector*, Vector*)
t FindConvexShapeLooseAABB(float __vector const*, int, Vector*, Vector*)
t GetCStringCharConversion()
t GetOppositeSynapseObject(IVP_Synapse_Friction*)
t GetWorldCoordFromSynapse(IVP_Synapse_Friction*, IVP_U_Point&)
t IntersectRayWithTriangle(Ray_t const&, Vector const&, Vector const&, Vector const&, bool)
t IsSphereIntersectingCone(Vector const&, float, Vector const&, Vector const&, float, float)
t MatrixQuaternionFastTest(unsigned int)
t PointInQuadToBarycentric(Vector const&, Vector const&, Vector const&, Vector const&, Vector const&, Vector2D&)
t PostRestorePhysicsObject()
t qh_degen_redundant_facet(facetT*)
t qh_makenew_nonsimplicial(facetT*, vertexT*, int*)
t qh_mergecycle_vneighbors(facetT*, facetT*)
t qh_mergevertex_neighbors(facetT*, facetT*)
t qh_order_vertexneighbors(vertexT*)
t QuaternionVectorsForward(Quaternion const&, Vector*)
t RandomVectorInUnitCircle(Vector2D*)
t RandomVectorInUnitSphere(IUniformRandomStream*)
t RandomVectorInUnitSphere(Vector*)
t RandomVectorInUnitSphere()
t RandomVectorOnUnitSphere(IUniformRandomStream*)
t RandomVectorOnUnitSphere()
t RestorePhysicsConstraint(physrestoreparams_t const&, CPhysicsConstraint**)
t SetupMatrixAxisToAxisRot(Vector const&, Vector const&)
t Vector4DMultiplyPosition(VMatrix const&, Vector const&, Vector4D&)
t V_StripLeadingWhitespace(char*)
t V_StripSurroundingQuotes(char*)
t CalcClosestPointToLineT2D(Vector2D const&, Vector2D const&, Vector2D const&, Vector2D&)
t CalcDistanceToLineSegment(Vector const&, Vector const&, Vector const&, float*)
t ComputeShadowControllerHL(CPhysicsObject*, hlshadowcontrol_params_t const&, float, float)
t ConvertCoordinateAxisToHL(int)
t debug_out_friction_system(IVP_Friction_System*)
t IsBoxIntersectingTriangle(Vector const&, Vector const&, Vector const&, Vector const&, Vector const&, cplane_t const&, float)
t qh_neighbor_intersections(vertexT*)
t qh_printfacet2geom_points(_IO_FILE*, double*, double*, facetT*, double, double*)
t qh_printfacet3geom_points(_IO_FILE*, setT*, facetT*, double, double*)
t Vector3DMultiplyTranspose(VMatrix const&, Vector const&, Vector&)
t Vector4DMultiplyTranspose(VMatrix const&, Vector4D const&, Vector4D&)
t V_StripTrailingWhitespace(char*)
t Catmull_Rom_Spline_Tangent(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t ComputeShadowControllerIVP(IVP_Real_Object*, shadowcontrol_params_t&, float, float)
t ConvertCoordinateAxisToIVP(int)
t CreateBallsocketConstraint(IVP_Environment*, CPhysicsObject*, CPhysicsObject*, IPhysicsConstraintGroup*, constraint_ballsocketparams_t const&)
t GeneratePerspectiveFrustum(Vector const&, QAngle const&, float, float, float, float, Frustum_t&)
t GeneratePerspectiveFrustum(Vector const&, Vector const&, Vector const&, Vector const&, float, float, float, float, VPlane*)
t IntersectRayWithAACylinder(Ray_t const&, Vector const&, float, float, CBaseTrace*)
t IsSphereIntersectingSphere(Vector const&, float, Vector const&, float)
t ivp_debug_show_real_values(IVP_Buoyancy_Input const*, IVP_Controller_Buoyancy*, IVP_Template_Buoyancy const*, IVP_Core*, IVP_Real_Object*, IVP_U_Float_Point const*)
t PointInQuadFromBarycentric(Vector const&, Vector const&, Vector const&, Vector const&, Vector2D const&, Vector&)
t SavePhysicsConstraintGroup(physsaveparams_t const&, CPhysicsConstraintGroup*)
t SavePhysicsFluidController(physsaveparams_t const&, CPhysicsFluidController*)
t Vector3DMultiplyProjective(VMatrix const&, Vector const&, Vector&)
t V_TranslateLineFeedsToUnix(char*)
t CalcDistanceToLineSegment2D(Vector2D const&, Vector2D const&, Vector2D const&, float*)
t Catmull_Rom_Spline_Integral(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t Catmull_Rom_Spline_Integral(Vector const&, Vector const&, Vector const&, Vector const&, Vector&)
t ComputePointFromBarycentric(Vector const&, Vector const&, Vector const&, float, float, Vector&)
t ComputePointFromBarycentric(Vector2D const&, Vector2D const&, Vector2D const&, float, float, Vector2D&)
t ConvertShadowControllerToHL(shadowcontrol_params_t const&, hlshadowcontrol_params_t&)
t IsBoxIntersectingBoxExtents(Vector const&, Vector const&, Vector const&, Vector const&)
t Parabolic_Spline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t p_calc_2d_distances_to_axis(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*)
t SavePhysicsMotionController(physsaveparams_t const&, IPhysicsMotionController*)
t SavePhysicsPlayerController(physsaveparams_t const&, CPlayerController*)
t SavePhysicsShadowController(physsaveparams_t const&, IPhysicsShadowController*)
t Sys_RunningWithDebugModules()
t TransformAnglesToLocalSpace(QAngle const&, matrix3x4_t const&)
t TransformAnglesToWorldSpace(QAngle const&, matrix3x4_t const&)
t VectorPerpendicularToVector(Vector const&, Vector*)
t CalcDistanceSqrToLineSegment(Vector const&, Vector const&, Vector const&, float*)
t Catmull_Rom_Spline_Normalize(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t ConvertHavanaLocalMatrixToHL(hk_Transform const&, matrix3x4_t&, IVP_Real_Object*)
t ConvertShadowControllerToIVP(hlshadowcontrol_params_t const&, shadowcontrol_params_t&)
t CreatePhysicsConstraintGroup(IVP_Environment*, constraint_groupparams_t const&)
t GeneratePolyhedronFromPlanes(float const*, int, float, bool)
t GetClientDataForHkConstraint(hk_Breakable_Constraint*)
t MatrixBuildRotationAboutAxis(VMatrix&, Vector const&, float)
t MatrixBuildRotationAboutAxis(Vector const&, float, matrix3x4_t&)
t qh_degen_redundant_neighbors(facetT*, facetT*)
t QuaternionAverageExponential(Quaternion&, int, Quaternion const*, float const*)
t Recursive_MarkPlanarity_Dead(GeneratePolyhedronFromPlanes_LineLL*, MarkPlanarityControlStruct_t&)
t SavePhysicsVehicleController(physsaveparams_t const&, CVehicleController*)
t V_FixupPathSpaceToUnderscore(char*)
t CalcClosestPointOnLineSegment(Vector const&, Vector const&, Vector const&, Vector&, float*)
t Catmull_Rom_Spline_NormalizeX(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t GeneratePerspectiveFrustumFLU(Vector const&, Vector const&, Vector const&, Vector const&, float, float, float, float, VPlane*)
t IsCircleIntersectingRectangle(Vector2D const&, Vector2D const&, Vector2D const&, float)
t ivp_core_get_surface_speed_os(IVP_Core*, IVP_Real_Object*, IVP_U_Float_Point const*, IVP_U_Float_Point*)
t qh_printfacet3geom_simplicial(_IO_FILE*, facetT*, double*)
t qh_printfacet4geom_simplicial(_IO_FILE*, facetT*, double*)
t RecomputePolygonSurfaceNormal(GeneratePolyhedronFromPlanes_Polygon*)
t RestorePhysicsConstraintGroup(physrestoreparams_t const&, CPhysicsConstraintGroup**)
t RestorePhysicsFluidController(physrestoreparams_t const&, CPhysicsFluidController**)
t TexCoordInQuadFromBarycentric(Vector2D const&, Vector2D const&, Vector2D const&, Vector2D const&, Vector2D const&, Vector2D&)
t TransformHavanaLocalToHLWorld(hk_Vector3 const&, IVP_Real_Object*, bool)
t TransformHLWorldToHavanaLocal(Vector const&, IVP_Real_Object*)
t _V_stricmp_NegativeForUnequal(char const*, char const*)
t CalcDistanceSqrToLineSegment2D(Vector2D const&, Vector2D const&, Vector2D const&, float*)
t HashStringCaselessConventional(char const*)
t IntersectInfiniteRayWithSphere(Vector const&, Vector const&, Vector const&, float, float*, float*)
t IsBoxIntersectingSphereExtents(Vector const&, Vector const&, Vector const&, float)
t qh_printhyperplaneintersection(_IO_FILE*, facetT*, facetT*, setT*, double*)
t RestorePhysicsMotionController(physrestoreparams_t const&, IPhysicsMotionController**)
t RestorePhysicsPlayerController(physrestoreparams_t const&, CPlayerController**)
t RestorePhysicsShadowController(physrestoreparams_t const&, IPhysicsShadowController**)
t SolveInverseQuadraticMonotonic(float, float, float, float, float, float, float&, float&, float&)
t StringAfterPrefixCaseSensitive(char const*, char const*)
t V_AddBackSlashesToSpecialChars(char const*)
t CalcClosestPointOnLineSegment2D(Vector2D const&, Vector2D const&, Vector2D const&, Vector2D&, float*)
t ComputePDControllerCoefficients(float*, float, float, float)
t MarkPlanarity_CreateNewPolyLine(MarkPlanarityControlStruct_t&)
t qh_printfacetNvertex_simplicial(_IO_FILE*, facetT*, int)
t Recursive_MarkPlanarity_OnPlane(GeneratePolyhedronFromPlanes_LineLL*, MarkPlanarityControlStruct_t&)
t RestorePhysicsVehicleController(physrestoreparams_t const&, CVehicleController**)
t SolveInverseReciprocalQuadratic(float, float, float, float, float, float, float&, float&, float&)
t CalcSqrDistAndClosestPointOnAABB(Vector const&, Vector const&, Vector const&, Vector&, float&)
t MatrixBuildPerspectiveOffCenterX(VMatrix&, double, double, double, double, double, double, double, double)
t qh_printfacet3geom_nonsimplicial(_IO_FILE*, facetT*, double*)
t qh_printfacet4geom_nonsimplicial(_IO_FILE*, facetT*, double*)
t CalcLineToLineIntersectionSegment(Vector const&, Vector const&, Vector const&, Vector const&, Vector*, Vector*, float*, float*)
t CalculateAABBFromProjectionMatrix(VMatrix const&, Vector*, Vector*)
t ConvertHLLocalMatrixToHavanaLocal(matrix3x4_t const&, hk_Transform&)
t ConvertLinkedGeometryToPolyhedron(GeneratePolyhedronFromPlanes_UnorderedPolygonLL*, GeneratePolyhedronFromPlanes_UnorderedLineLL*, GeneratePolyhedronFromPlanes_UnorderedPointLL*, bool, float __vector(4))
t ConvertLinkedGeometryToPolyhedron(GeneratePolyhedronFromPlanes_UnorderedPolygonLL*, GeneratePolyhedronFromPlanes_UnorderedLineLL*, GeneratePolyhedronFromPlanes_UnorderedPointLL*, bool, float __vector)
t PostRestorePhysicsConstraintGroup()
t Recursive_CanOnPlanePolyCrawlDead(GeneratePolyhedronFromPlanes_LineLL*, MarkPlanarityControlStruct_t&)
t Kochanek_Bartels_Spline_NormalizeX(float, float, float, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t qh_printfacetNvertex_nonsimplicial(_IO_FILE*, facetT*, int, int)
t ShouldOverrideWheelContactFriction(float*, IVP_Real_Object*, IVP_Real_Object*, IVP_U_Float_Point*)
t Vector3DMultiplyPositionProjective(VMatrix const&, Vector const&, Vector&)
t CalculateSphereFromProjectionMatrix(VMatrix const&, Vector*, float*)
t Catmull_Rom_Spline_Integral_Normalize(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t IntersectTriangleWithPlaneBarycentric(Vector const&, Vector const&, Vector const&, Vector4D const&, Vector2D*)
t RestorePhysicsShadowControllerInternal(physrestoreparams_t const&, IPhysicsShadowController**, CPhysicsObject*)
t CalculateAABBFromProjectionMatrixInverse(VMatrix const&, Vector*, Vector*)
t CreateObjectFromBuffer_UseExistingMemory(CPhysicsEnvironment*, void*, unsigned char*, unsigned int, CPhysicsObject*)
t ExtractClipPlanesFromNonTransposedMatrix(VMatrix const&, VPlane*, bool)
t ivp_optimiztion_center_check_successfull()
t OBBHasFullyContainedIntersectionWithQuad(Vector const&, Vector const&, Vector const&, Vector const&, Vector const&, float, Vector const&, Vector const&, float, Vector const&, float)
t RayHasFullyContainedIntersectionWithQuad(Ray_t const&, Vector const&, float, Vector const&, Vector const&, float, Vector const&, float)
t ComputeIntersectionBarycentricCoordinates(Ray_t const&, Vector const&, Vector const&, Vector const&, float&, float&, float*)
t CalculateSphereFromProjectionMatrixInverse(VMatrix const&, Vector*, float*)
t ControlPhysicsPlayerControllerAttachment_Silent(IPhysicsPlayerController*, IVP_Real_Object*, bool)
t ControlPhysicsShadowControllerAttachment_Silent(IPhysicsShadowController*, IVP_Real_Object*, bool)
t Bias(float, float)
t Gain(float, float)
t Hash4(void const*)
t Hash8(void const*)
U ConMsg(char const*, ...)
U DevMsg(char const*, ...)
t dfacet(unsigned int)
t Hash12(void const*)
t Hash16(void const*)
t p_atof(char const*)
t p_atoi(char const*)
t p_free(void*)
t Q_log2(unsigned int)
t _sqrtf(float)
t V_atod(char const*)
t V_atof(char const*)
t V_atoi(char const*)
t BSpline(Vector const&, Vector const&, Vector const&, Vector const&, float, Vector&)
t dvertex(unsigned int)
t HashInt(int)
t qh_rand()
t _rsqrtf(float)
t TestKVs(packedkv_t*, char const*)
t CalcFovX(float, float)
t CalcFovY(float, float)
t CeilPow2(int)
t HSVtoRGB(Vector const&, Vector&)
t ivp_rand()
t p_calloc(int, int)
t p_malloc(unsigned int)
t p_strcmp(char const*, char const*)
t p_strdup(char const*)
t p_strlen(char const*)
t qh_clock()
t qh_point(int)
t qh_qhull()
t qh_setin(setT*, void*)
t qh_srand(int)
t RandSIMD(int)
t RandSIMD()
t RGBtoHSV(Vector const&, Vector&)
t V_atoi64(char const*)
t AngleDiff(float, float)
t FloorPow2(int)
t get_float()
t HashBlock(void const*, unsigned int)
t IsCarBody(IVP_Core*)
t ivp_srand(int)
t nexttoken(char*, char const*, char)
t ParseFile(char*, char*, bool*)
t ParseFile(char const*, char*, bool*, characterset_t*)
t pathmatch(char const*, char**, bool, char*, unsigned int)
t p_get_num()
t p_realloc(void*, int)
t p_str_tok(char*, char const*)
t qh_init_A(_IO_FILE*, _IO_FILE*, _IO_FILE*, int, char**)
t qh_init_B(double*, int, int, unsigned int)
t qh_maxmin(double*, int, int)
t qh_option(char const*, int*, double*)
t qh_setdel(setT*, void*)
t qh_setnew(int)
t qh_stddev(int, double, double, double*)
t qh_strtod(char const*, char**)
t qh_strtol(char const*, char**)
t ReportObj(IVP_Synapse_Real*, CFmtStrN<256, false>&)
t V_atoui64(char const*)
t _V_memcmp(void const*, void const*, int)
t _V_memcpy(void*, void const*, int)
t _V_memset(void*, int, int)
t V_qsort_s(void*, unsigned int, unsigned int, int (*)(void*, void const*, void const*), void*)
t _V_strcmp(char const*, char const*)
t _V_strcpy(char*, char const*)
t V_stristr(char*, char const*)
t V_stristr(char const*, char const*)
t V_StrLeft(char const*, int, char*, int)
t _V_strlen(char const*)
t V_strncat(char*, char const*, unsigned int, int)
t V_strnchr(char const*, char, int)
t V_strncmp(char const*, char const*, int)
t V_strncpy(char*, char const*, int)
t V_strnlwr(char*, unsigned int)
t _V_strstr(char const*, char const*)
t _V_strupr(char*)
t _V_wcscmp(wchar_t const*, wchar_t const*)
t V_wcsistr(wchar_t const*, wchar_t const*)
t V_wcsistr(wchar_t*, wchar_t const*)
t _V_wcslen(wchar_t const*)
t V_wcsncat(wchar_t*, wchar_t const*, int, int)
t V_wcsncpy(wchar_t*, wchar_t const*, int)
t _V_wcsupr(wchar_t*)
t operator delete[](void*)
t operator delete(void*)
b guard variable for datamap_t* DataMapInit<vehicleparams_t>(vehicleparams_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<physcollideheader_t>(physcollideheader_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vehicle_axleparams_t>(vehicle_axleparams_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vehicle_bodyparams_t>(vehicle_bodyparams_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)::dataDesc
b guard variable for datamap_t* DataMapInit<compactsurfaceheader_t>(compactsurfaceheader_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vehicle_engineparams_t>(vehicle_engineparams_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vehicle_steeringparams_t>(vehicle_steeringparams_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)::dataDesc
b guard variable for datamap_t* DataMapInit<vehicle_suspensionparams_t>(vehicle_suspensionparams_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_cphysicsobject_t>(vphysics_save_cphysicsobject_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_cphysicsspring_t>(vphysics_save_cphysicsspring_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_constraintfixed_t>(vphysics_save_constraintfixed_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_constrainthinge_t>(vphysics_save_constrainthinge_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_constraintlength_t>(vphysics_save_constraintlength_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_constraintpulley_t>(vphysics_save_constraintpulley_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_motioncontroller_t>(vphysics_save_motioncontroller_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_constraintragdoll_t>(vphysics_save_constraintragdoll_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_constraintsliding_t>(vphysics_save_constraintsliding_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)::dataDesc
b guard variable for datamap_t* DataMapInit<vphysics_save_cphysicsconstraint_t>(vphysics_save_cphysicsconstraint_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_cvehiclecontroller_t>(vphysics_save_cvehiclecontroller_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_constraintaxislimit_t>(vphysics_save_constraintaxislimit_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_constraintbreakable_t>(vphysics_save_constraintbreakable_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_shadowcontrolparams_t>(vphysics_save_shadowcontrolparams_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_constraintballsocket_t>(vphysics_save_constraintballsocket_t*)::nameHolder
b guard variable for datamap_t* DataMapInit<vphysics_save_cphysicsconstraintgroup_t>(vphysics_save_cphysicsconstraintgroup_t*)::nameHolder
b guard variable for AllocTempVector()::s_nIndex
b guard variable for AllocTempVector()::s_vecTemp
b guard variable for pathmatch(char const*, char**, bool, char*, unsigned int)::s_pszDbgPathMatch
b guard variable for CPhysicsCollision::ConvexFromConvexPolyhedron(CPolyhedron const&)::developerRef
b guard variable for IVP_Material_Manager::get_material_by_index(IVP_Real_Object*, IVP_U_Point const*, int)::simple
b guard variable for hk_Memory::get_instance()::s_memory_instance
b g_BreakSet
t ReadVector(char const*, Vector&)
b s_BreakSet
b nullsurface
b s_bShowDiag
b s_nCVarFlag
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec2_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
b vec4_origin
t AppendPrintf(char*, unsigned int, char const*, ...)
t BuildVertMap(vertmap_t&, Vector const*, int, IVP_Compact_Ledge const*) [clone .constprop.25]
t InitBoxVerts(Vector*, Vector**, Vector const&, Vector const&)
t read_sleb128(unsigned char const*, long*)
t read_uleb128(unsigned char const*, unsigned long*)
t ReadVector4D(char const*, Vector4D&)
r s_ExtIndices
r s_limit_mask
r s_limit_mask
r s_MatIndices
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec2_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
b vec4_invalid
t CM_ClearTrace(CGameTrace*)
b g_MeshManager
d IVP_RAND_SEED
t qh_intcompare(void const*, void const*)
b s_bRegistered
b s_EmptyConVar
b s_VPhysPtrMap
b texgammatable
b emergency_used
b g_PhysicsMutex
b lineartoscreen
t NoPhysSaveFunc(physsaveparams_t const&, void*)
d s_BackSlashMap
r wszCantEndLine
t AngDragIntegral(float, float, float, float)
b dependents_used
t FlushFrameLocks()
t get_ttype_entry(lsda_header_info*, unsigned long) [clone .constprop.6]
r g_nRandomValues
b lineartotexture
t qh_compareangle(void const*, void const*)
t qh_comparemerge(void const*, void const*)
t qh_comparevisit(void const*, void const*)
t Sys_LoadLibrary(char const*)
b texturetolinear
t ComputeBoxOffset(Ray_t const&) [clone .part.7]
b emergency_buffer
t get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)
b g_IdentityMatrix
b s_bBuiltBreakSet
d s_nDLLIdentifier
t UpdateSharedEdge(IVP_Compact_Ledge*, int*, int, IVP_Compact_Edge*)
r wszCantBeginLine
b dependents_buffer
r ivp_uqr_mod_table
t NoPhysRestoreFunc(physrestoreparams_t const&, void**)
t parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*) [clone .constprop.5]
d s_DefaultAccessor
b g_MainDLLInterface
d g_PrintConVarFlags
t InitObjectTemplate(IVP_Template_Real_Object&, int, objectparams_t*, bool) [clone .constprop.96]
t read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)
b s_nConnectionCount
b s_SIMDRandContexts
t ComputeCenterMatrix(Vector const&, QAngle const&, Vector const&, Vector const&, matrix3x4_t&) [clone .constprop.48]
r g_pInterfaceGlobals
t Sys_LoadLibraryGuts(char const*)
t vphys_sleep_timeout(CCommand const&)
t check_exception_spec(lsda_header_info*, std::type_info const*, void*, long) [clone .constprop.4]
t Collision_ClearTrace(Vector const&, Vector const&, CBaseTrace*)
b g_CleanupSymbolTable
t qh_compare_facetarea(void const*, void const*)
b s_nRandContextsInUse
b s_nRegistrationCount
t base_of_encoded_value(unsigned char, _Unwind_Context*)
t IsBreakableConstraint(constraint_breakableparams_t const&)
t qh_compare_facetmerge(void const*, void const*)
t qh_compare_facetvisit(void const*, void const*)
d s_DefaultDebugOverlay
t ComputeSeparatingPlane(matrix3x4_t const&, matrix3x4_t const&, Vector const&, Vector const&, float, cplane_t*) [clone .constprop.47]
b g_IdentityIVPToHLWorld
d g_MaterialIndexDataOps
b s_TempMemoryPolyhedron
b g_Mathlib_GammaToLinear
b g_Mathlib_LinearToGamma
b g_PostRestoreObjectList
t __gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)
b s_BuildVirtualMeshMutex
b g_BreakSetIncludingColons
b s_pConnectionRegistration
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b UNSPECIFIED_LOGGING_COLOR
b s_bRunningWithDebugModules
d s_StubPredictableController
b vphys_sleep_timeout_command
t read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)
b g_ConstraintGroupActivateList
b s_TempMemoryPolyhedron_Buffer
b ivp_surface_manager_ball_global
t localCalcGeomCenterAndRotInertia(IVP_U_BigVector<IVP_Compact_Ledge>*, IVP_U_Point*, IVP_U_Point*) [clone .constprop.13]
d s_pConversionArrays_NoEscConversion
b __g_CreateCPhysicsInterfaceIPhysics_reg
d s_pConversionArrays_StringCharConversion
t __CreateCPhysicsInterfaceIPhysics_interface()
b __g_CreateCPhysicsCollisionIPhysicsCollision_reg
t __CreateCPhysicsCollisionIPhysicsCollision_interface()
b __g_CreateCPhysicsSurfacePropsIPhysicsSurfaceProps_reg
t __CreateCPhysicsSurfacePropsIPhysicsSurfaceProps_interface()
r s_hex
b g_xneg
b g_xpos
b g_yneg
b g_ypos
b g_zneg
b g_zpos
r axisMap
t Descend(char*, unsigned int, bool, unsigned int)
t V_nibble(char)
t ConCommand::CanAutoComplete()
t ConCommand::AutoCompleteSuggest(char const*, CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >&)
t ConCommand::Dispatch(CCommand const&)
t ConCommand::ConCommand(char const*, ICommandCallback*, char const*, int, ICommandCompletionCallback*)
t ConCommand::ConCommand(char const*, void (*)(CCommand const&), char const*, int, int (*)(char const*, char (*) [64]))
t ConCommand::ConCommand(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64]))
t ConCommand::ConCommand(char const*, ICommandCallback*, char const*, int, ICommandCompletionCallback*)
t ConCommand::ConCommand(char const*, void (*)(CCommand const&), char const*, int, int (*)(char const*, char (*) [64]))
t ConCommand::ConCommand(char const*, void (*)(), char const*, int, int (*)(char const*, char (*) [64]))
t ConCommand::~ConCommand()
t ConCommand::~ConCommand()
t ConCommand::~ConCommand()
t CTraceAABB::CTraceAABB(Vector const&, Vector const&, bool)
t CTraceAABB::CTraceAABB(Vector const&, Vector const&, bool)
t CUtlBuffer::ParseToken(characterset_t*, char*, int, bool)
t CUtlBuffer::ParseToken(char const*, char const*, char*, int)
t CUtlBuffer::ConvertCRLF(CUtlBuffer&)
t CUtlBuffer::GetOverflow(int)
t CUtlBuffer::IsBigEndian()
t CUtlBuffer::PutOverflow(int)
t CUtlBuffer::AssumeMemory(void*, int, int, int)
t CUtlBuffer::CheckPeekGet(int, int)
t CUtlBuffer::DetachMemory()
t CUtlBuffer::SetBigEndian(bool)
t CUtlBuffer::EatCPPComment()
t CUtlBuffer::EatWhiteSpace()
t CUtlBuffer::OnGetOverflow(int)
t CUtlBuffer::OnPutOverflow(int)
t CUtlBuffer::SetBufferType(bool, bool)
t CUtlBuffer::EnsureCapacity(int)
t CUtlBuffer::PeekLineLength()
t CUtlBuffer::PeekWhiteSpace(int)
t CUtlBuffer::PeekStringMatch(int, char const*, int)
t CUtlBuffer::GetDelimitedChar(CUtlCharConversion*)
t CUtlBuffer::PeekStringLength()
t CUtlBuffer::PutDelimitedChar(CUtlCharConversion*, char)
t CUtlBuffer::SetOverflowFuncs(bool (CUtlBuffer::*)(int), bool (CUtlBuffer::*)(int))
t CUtlBuffer::SetExternalBuffer(void*, int, int, int)
t CUtlBuffer::AddNullTermination(int)
t CUtlBuffer::GetDelimitedString(CUtlCharConversion*, char*, int)
t CUtlBuffer::PutDelimitedString(CUtlCharConversion*, char const*)
t CUtlBuffer::ActivateByteSwapping(bool)
t CUtlBuffer::CheckArbitraryPeekGet(int, int&)
t CUtlBuffer::GetDelimitedCharInternal(CUtlCharConversion*)
t CUtlBuffer::PeekDelimitedStringLength(CUtlCharConversion*, bool)
t CUtlBuffer::Get(void*, int)
t CUtlBuffer::Put(void const*, int)
t CUtlBuffer::Swap(CUtlMemory<unsigned char, int>&)
t CUtlBuffer::Swap(CUtlBuffer&)
t CUtlBuffer::Scanf(char const*, ...)
t CUtlBuffer::Printf(char const*, ...)
t CUtlBuffer::GetLine(char*, int)
t CUtlBuffer::GetUpTo(void*, int)
t CUtlBuffer::PeekGet(int, int)
t CUtlBuffer::SeekGet(CUtlBuffer::SeekType_t, int)
t CUtlBuffer::SeekPut(CUtlBuffer::SeekType_t, int)
t CUtlBuffer::VaScanf(char const*, char*)
t CUtlBuffer::CheckGet(int)
t CUtlBuffer::CheckPut(int)
t CUtlBuffer::GetToken(char const*)
t CUtlBuffer::VaPrintf(char const*, char*)
t CUtlBuffer::GetString(char*, int)
t CUtlBuffer::PutString(char const*)
t CUtlBuffer::CUtlBuffer(int, int, int)
t CUtlBuffer::CUtlBuffer(void const*, int, int)
t CUtlBuffer::CUtlBuffer(int, int, int)
t CUtlBuffer::CUtlBuffer(void const*, int, int)
t CUtlMemory<CUtlString, int>::Grow(int)
t CUtlMemory<CUtlSymbol, int>::Grow(int)
t CUtlMemory<bboxcache_t, int>::Grow(int)
t CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short>::Grow(int)
t CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short>::Grow(int)
t CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short>::Grow(int)
t CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short>::Grow(int)
t CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short>::Grow(int)
t CUtlMemory<CPhysicsCollisionSet, int>::Grow(int)
t CUtlMemory<postrestore_objectlist_t, int>::Grow(int)
t CUtlMemory<CSurface, int>::Grow(int)
t CUtlMemory<kventry_t, int>::Grow(int)
t CUtlMemory<char, int>::Grow(int)
t CUtlMemory<unsigned char, int>::ConvertToGrowableMemory(int) [clone .part.32]
t CUtlMemory<unsigned char, int>::Grow(int)
t CUtlMemory<unsigned char, int>::Purge()
t CUtlMemory<int, int>::Grow(int)
t CUtlMemory<int, int>::Purge()
t CUtlMemory<unsigned int, int>::Grow(int)
t CUtlMemory<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::ListElem_t, int>::Grow(int)
t CUtlMemory<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::ListElem_t, int>::~CUtlMemory()
t CUtlMemory<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::ListElem_t, int>::~CUtlMemory()
t CUtlMemory<CUtlMultiList<void*, unsigned short>::ListElem_t, int>::Grow(int)
t CUtlMemory<CUtlMultiList<void*, unsigned short>::ListElem_t, int>::~CUtlMemory()
t CUtlMemory<CUtlMultiList<void*, unsigned short>::ListElem_t, int>::~CUtlMemory()
t CUtlMemory<CCollisionSolver::realobjectpair_t, int>::Grow(int)
t CUtlMemory<CCollisionSolver::realobjectpair_t, int>::~CUtlMemory()
t CUtlMemory<CCollisionSolver::realobjectpair_t, int>::~CUtlMemory()
t CUtlMemory<CPhysicsEnvironment::PredictedData_t, int>::Grow(int)
t CUtlMemory<CPhysicsEnvironment::PredictedData_t, int>::~CUtlMemory()
t CUtlMemory<CPhysicsEnvironment::PredictedData_t, int>::~CUtlMemory()
t CUtlMemory<CCountedStringPoolBase<unsigned int>::hash_item_t, int>::Grow(int)
t CUtlMemory<CCountedStringPoolBase<unsigned short>::hash_item_t, int>::Grow(int)
t CUtlMemory<CPredictedPhysicsObject::PhysicsObjectPredictionBackups_t, int>::Grow(int)
t CUtlMemory<CPredictedPhysicsObject::PhysicsObjectPredictionBackups_t, int>::~CUtlMemory()
t CUtlMemory<CPredictedPhysicsObject::PhysicsObjectPredictionBackups_t, int>::~CUtlMemory()
t CUtlMemory<CPredictedPlayerController::PlayerControllerPredictionBackups_t, int>::Grow(int)
t CUtlMemory<CPredictedPlayerController::PlayerControllerPredictionBackups_t, int>::~CUtlMemory()
t CUtlMemory<CPredictedPlayerController::PlayerControllerPredictionBackups_t, int>::~CUtlMemory()
t CUtlMemory<CPredictedPhysicsMotionController::PredictionCommandOffsets_t, int>::Grow(int)
t CUtlMemory<CPredictedPhysicsMotionController::PredictionCommandOffsets_t, int>::~CUtlMemory()
t CUtlMemory<CPredictedPhysicsMotionController::PredictionCommandOffsets_t, int>::~CUtlMemory()
t CUtlMemory<CPredictableControllerSimulationOrderTracker_Manager::CallOrderEntry_t, int>::Grow(int)
t CUtlMemory<CPredictableControllerSimulationOrderTracker_Manager::CallOrderEntry_t, int>::~CUtlMemory()
t CUtlMemory<CPredictableControllerSimulationOrderTracker_Manager::CallOrderEntry_t, int>::~CUtlMemory()
t CUtlMemory<CPhysCollide*, int>::Grow(int)
t CUtlMemory<CPhysCollide*, int>::~CUtlMemory()
t CUtlMemory<CPhysCollide*, int>::~CUtlMemory()
t CUtlMemory<memhandle_t__*, int>::Grow(int)
t CUtlMemory<CPhysicsObject*, int>::Grow(int)
t CUtlMemory<IPhysicsObject*, int>::Grow(int)
t CUtlMemory<IPhysicsObject*, int>::~CUtlMemory()
t CUtlMemory<IPhysicsObject*, int>::~CUtlMemory()
t CUtlMemory<IVP_Real_Object*, int>::Grow(int)
t CUtlMemory<IDeleteQueueItem*, int>::Grow(int)
t CUtlMemory<IDeleteQueueItem*, int>::~CUtlMemory()
t CUtlMemory<IDeleteQueueItem*, int>::~CUtlMemory()
t CUtlMemory<IPhysicsEnvironment*, int>::Grow(int)
t CUtlMemory<CPhysCollideVirtualMesh*, int>::Grow(int)
t CUtlMemory<CPhysCollideVirtualMesh*, int>::~CUtlMemory()
t CUtlMemory<CPhysCollideVirtualMesh*, int>::~CUtlMemory()
t CUtlMemory<CPhysicsConstraintGroup*, int>::Grow(int)
t CUtlMemory<CPhysicsFluidController*, int>::Grow(int)
t CUtlMemory<CPhysicsFluidController*, int>::~CUtlMemory()
t CUtlMemory<CPhysicsFluidController*, int>::~CUtlMemory()
t CUtlMemory<CPredictedPhysicsObject*, int>::Grow(int)
t CUtlMemory<CPredictedPhysicsObject*, int>::~CUtlMemory()
t CUtlMemory<CPredictedPhysicsObject*, int>::~CUtlMemory()
t CUtlMemory<IPhysicsMotionController*, int>::Grow(int)
t CUtlMemory<IPhysicsMotionController*, int>::~CUtlMemory()
t CUtlMemory<IPhysicsMotionController*, int>::~CUtlMemory()
t CUtlMemory<IPhysicsPlayerController*, int>::Grow(int)
t CUtlMemory<IPhysicsPlayerController*, int>::~CUtlMemory()
t CUtlMemory<IPhysicsPlayerController*, int>::~CUtlMemory()
t CUtlMemory<IPredictable_Controller_Independant*, int>::Grow(int)
t CUtlMemory<IPredictable_Controller_Independant*, int>::~CUtlMemory()
t CUtlMemory<IPredictable_Controller_Independant*, int>::~CUtlMemory()
t CUtlMemory<IVP_Core*, int>::Grow(int)
t CUtlMemory<IVP_Core*, int>::~CUtlMemory()
t CUtlMemory<IVP_Core*, int>::~CUtlMemory()
t CUtlMemory<char*, int>::Grow(int)
t CUtlMemory<void (*)(IConVar*, char const*, float), int>::Grow(int)
t CUtlMemory<void (*)(IConVar*, char const*, float), int>::~CUtlMemory()
t CUtlMemory<void (*)(IConVar*, char const*, float), int>::~CUtlMemory()
t CUtlMemory<IVP_Compact_Ledgetree_Node const*, int>::Grow(int)
t CUtlMemory<IVP_Compact_Ledgetree_Node const*, int>::~CUtlMemory()
t CUtlMemory<IVP_Compact_Ledgetree_Node const*, int>::~CUtlMemory()
t CUtlMemory<CUtlSymbolTable::StringPool_t*, int>::Grow(int)
t CUtlMemory<CUtlSymbolTable::StringPool_t*, int>::~CUtlMemory()
t CUtlMemory<CUtlSymbolTable::StringPool_t*, int>::~CUtlMemory()
t CUtlMemory<void*, int>::Grow(int)
t CUtlMemory<wchar_t*, int>::Grow(int)
t CUtlMemory<unsigned short, int>::Grow(int)
t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RotateRight(unsigned short)
t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Purge()
t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Insert(CUtlSymbolTable::CStringPoolIndex const&)
t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::NewNode()
t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::RemoveAll()
t CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
t CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
t CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
t CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::RemoveRebalance(unsigned short)
t CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::Insert(CPhysicsListenerCollision::corepair_t const&)
t CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
t CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::NewNode()
t CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::RemoveAll()
t CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::RotateLeft(unsigned short)
t CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::RotateRight(unsigned short)
t CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::InsertRebalance(unsigned short)
t CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::Insert(CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t const&)
t CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::NewNode()
t CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::RemoveAll()
t CUtlString::MatchesPattern(CUtlString const&, int)
t CUtlString::StripTrailingSlash()
t CUtlString::UnqualifiedFilename()
t CUtlString::Get()
t CUtlString::Set(char const*)
t CUtlString::Left(int)
t CUtlString::Purge()
t CUtlString::Right(int)
t CUtlString::Slice(int, int)
t CUtlString::Append(char const*)
t CUtlString::Format(char const*, ...)
t CUtlString::AbsPath(char const*)
t CUtlString::DirName()
t CUtlString::FormatV(char const*, char*)
t CUtlString::Replace(char, char)
t CUtlString::ToLower()
t CUtlString::PathJoin(char const*, char const*)
t CUtlString::SetDirect(char const*, int)
t CUtlString::SetLength(int)
t CUtlString::operator=(char const*)
t CUtlString::operator=(CUtlString const&)
t CUtlString::CUtlString(char const*)
t CUtlString::CUtlString(void const*, int)
t CUtlString::CUtlString(void*, int, int)
t CUtlString::CUtlString(CUtlString const&)
t CUtlString::CUtlString()
t CUtlString::CUtlString(char const*)
t CUtlString::CUtlString(void const*, int)
t CUtlString::CUtlString(void*, int, int)
t CUtlString::CUtlString(CUtlString const&)
t CUtlString::CUtlString()
t CUtlString::operator+=(char)
t CUtlString::operator+=(double)
t CUtlString::operator+=(int)
t CUtlString::operator+=(char const*)
t CUtlString::operator+=(CUtlString const&)
t CUtlSymbol::Initialize()
b CUtlSymbol::s_pSymbolTable
t CUtlSymbol::LockTableForRead()
t CUtlSymbol::UnlockTableForRead()
t CUtlSymbol::DisableStaticSymbolTable()
d CUtlSymbol::s_bAllowStaticSymbolTable
t CUtlSymbol::CurrTable()
t CUtlSymbol::CUtlSymbol(char const*)
t CUtlSymbol::CUtlSymbol(char const*)
t CUtlVector<CUtlString, CUtlMemory<CUtlString, int> >::InsertBefore(int, CUtlString const&)
t CUtlVector<CUtlSymbol, CUtlMemory<CUtlSymbol, int> >::InsertBefore(int, CUtlSymbol const&)
t CUtlVector<CPhysicsCollisionSet, CUtlMemory<CPhysicsCollisionSet, int> >::InsertBefore(int)
t CUtlVector<postrestore_objectlist_t, CUtlMemory<postrestore_objectlist_t, int> >::InsertBefore(int, postrestore_objectlist_t const&)
t CUtlVector<postrestore_objectlist_t, CUtlMemory<postrestore_objectlist_t, int> >::~CUtlVector()
t CUtlVector<postrestore_objectlist_t, CUtlMemory<postrestore_objectlist_t, int> >::~CUtlVector()
t CUtlVector<Vector, CUtlMemoryFixed<Vector, 8u, 0> >::ShiftElementsRight(int, int)
t CUtlVector<CSurface, CUtlMemory<CSurface, int> >::GrowVector(int)
t CUtlVector<CSurface, CUtlMemory<CSurface, int> >::ShiftElementsRight(int, int)
t CUtlVector<CSurface, CUtlMemory<CSurface, int> >::~CUtlVector()
t CUtlVector<CSurface, CUtlMemory<CSurface, int> >::~CUtlVector()
t CUtlVector<kventry_t, CUtlMemory<kventry_t, int> >::InsertBefore(int, kventry_t const&)
t CUtlVector<unsigned char, CUtlMemory<unsigned char, int> >::SetCount(int)
t CUtlVector<unsigned char, CUtlMemory<unsigned char, int> >::~CUtlVector()
t CUtlVector<unsigned char, CUtlMemory<unsigned char, int> >::~CUtlVector()
t CUtlVector<int, CUtlMemory<int, int> >::GrowVector(int)
t CUtlVector<int, CUtlMemory<int, int> >::EnsureCount(int) [clone .part.22]
t CUtlVector<int, CUtlMemory<int, int> >::ShiftElementsRight(int, int)
t CUtlVector<int, CUtlMemory<int, int> >::~CUtlVector()
t CUtlVector<int, CUtlMemory<int, int> >::~CUtlVector()
t CUtlVector<int, CUtlMemoryFixedGrowable<int, 64u, int> >::GrowVector(int)
t CUtlVector<int, CUtlMemoryFixedGrowable<int, 64u, int> >::SetCount(int)
t CUtlVector<unsigned int, CUtlMemory<unsigned int, int> >::InsertBefore(int, unsigned int const&)
t CUtlVector<unsigned int, CUtlMemory<unsigned int, int> >::SetCount(int)
t CUtlVector<CCollisionSolver::realobjectpair_t, CUtlMemory<CCollisionSolver::realobjectpair_t, int> >::InsertBefore(int, CCollisionSolver::realobjectpair_t const&)
t CUtlVector<CPhysicsEnvironment::PredictedData_t, CUtlMemory<CPhysicsEnvironment::PredictedData_t, int> >::InsertBefore(int, CPhysicsEnvironment::PredictedData_t const&)
t CUtlVector<CPhysicsEnvironment::PredictedData_t, CUtlMemory<CPhysicsEnvironment::PredictedData_t, int> >::~CUtlVector()
t CUtlVector<CPhysicsEnvironment::PredictedData_t, CUtlMemory<CPhysicsEnvironment::PredictedData_t, int> >::~CUtlVector()
t CUtlVector<CCountedStringPoolBase<unsigned int>::hash_item_t, CUtlMemory<CCountedStringPoolBase<unsigned int>::hash_item_t, int> >::GrowVector(int)
t CUtlVector<CCountedStringPoolBase<unsigned int>::hash_item_t, CUtlMemory<CCountedStringPoolBase<unsigned int>::hash_item_t, int> >::ShiftElementsRight(int, int)
t CUtlVector<CCountedStringPoolBase<unsigned short>::hash_item_t, CUtlMemory<CCountedStringPoolBase<unsigned short>::hash_item_t, int> >::GrowVector(int)
t CUtlVector<CCountedStringPoolBase<unsigned short>::hash_item_t, CUtlMemory<CCountedStringPoolBase<unsigned short>::hash_item_t, int> >::ShiftElementsRight(int, int)
t CUtlVector<CPredictedPhysicsObject::PhysicsObjectPredictionBackups_t, CUtlMemory<CPredictedPhysicsObject::PhysicsObjectPredictionBackups_t, int> >::InsertBefore(int, CPredictedPhysicsObject::PhysicsObjectPredictionBackups_t const&)
t CUtlVector<CPredictedPhysicsObject::PhysicsObjectPredictionBackups_t, CUtlMemory<CPredictedPhysicsObject::PhysicsObjectPredictionBackups_t, int> >::RemoveMultipleFromHead(int)
t CUtlVector<CPredictedPlayerController::PlayerControllerPredictionBackups_t, CUtlMemory<CPredictedPlayerController::PlayerControllerPredictionBackups_t, int> >::InsertBefore(int, CPredictedPlayerController::PlayerControllerPredictionBackups_t const&)
t CUtlVector<CPredictedPlayerController::PlayerControllerPredictionBackups_t, CUtlMemory<CPredictedPlayerController::PlayerControllerPredictionBackups_t, int> >::RemoveMultipleFromHead(int)
t CUtlVector<CPredictedPhysicsMotionController::PredictionCommandOffsets_t, CUtlMemory<CPredictedPhysicsMotionController::PredictionCommandOffsets_t, int> >::InsertBefore(int, CPredictedPhysicsMotionController::PredictionCommandOffsets_t const&)
t CUtlVector<CPredictedPhysicsMotionController::PredictionCommandOffsets_t, CUtlMemory<CPredictedPhysicsMotionController::PredictionCommandOffsets_t, int> >::RemoveMultipleFromHead(int)
t CUtlVector<CPredictableControllerSimulationOrderTracker_Manager::CallOrderEntry_t, CUtlMemory<CPredictableControllerSimulationOrderTracker_Manager::CallOrderEntry_t, int> >::InsertBefore(int, CPredictableControllerSimulationOrderTracker_Manager::CallOrderEntry_t const&)
t CUtlVector<CPhysCollide*, CUtlMemory<CPhysCollide*, int> >::InsertBefore(int, CPhysCollide* const&)
t CUtlVector<CPhysCollide*, CUtlMemory<CPhysCollide*, int> >::~CUtlVector()
t CUtlVector<CPhysCollide*, CUtlMemory<CPhysCollide*, int> >::~CUtlVector()
t CUtlVector<memhandle_t__*, CUtlMemory<memhandle_t__*, int> >::InsertBefore(int, memhandle_t__* const&)
t CUtlVector<CPhysicsObject*, CUtlMemory<CPhysicsObject*, int> >::InsertBefore(int, CPhysicsObject* const&)
t CUtlVector<IPhysicsObject*, CUtlMemory<IPhysicsObject*, int> >::FastRemove(int)
t CUtlVector<IPhysicsObject*, CUtlMemory<IPhysicsObject*, int> >::InsertBefore(int, IPhysicsObject* const&)
t CUtlVector<IPhysicsObject*, CUtlMemory<IPhysicsObject*, int> >::~CUtlVector()
t CUtlVector<IPhysicsObject*, CUtlMemory<IPhysicsObject*, int> >::~CUtlVector()
t CUtlVector<IVP_Real_Object*, CUtlMemory<IVP_Real_Object*, int> >::InsertBefore(int, IVP_Real_Object* const&)
t CUtlVector<IDeleteQueueItem*, CUtlMemory<IDeleteQueueItem*, int> >::InsertBefore(int, IDeleteQueueItem* const&)
t CUtlVector<IPhysicsEnvironment*, CUtlMemory<IPhysicsEnvironment*, int> >::InsertBefore(int, IPhysicsEnvironment* const&)
t CUtlVector<IPhysicsEnvironment*, CUtlMemory<IPhysicsEnvironment*, int> >::~CUtlVector()
t CUtlVector<IPhysicsEnvironment*, CUtlMemory<IPhysicsEnvironment*, int> >::~CUtlVector()
t CUtlVector<CPhysCollideVirtualMesh*, CUtlMemory<CPhysCollideVirtualMesh*, int> >::InsertBefore(int, CPhysCollideVirtualMesh* const&)
t CUtlVector<CPhysicsConstraintGroup*, CUtlMemory<CPhysicsConstraintGroup*, int> >::InsertBefore(int, CPhysicsConstraintGroup* const&)
t CUtlVector<CPhysicsConstraintGroup*, CUtlMemory<CPhysicsConstraintGroup*, int> >::~CUtlVector()
t CUtlVector<CPhysicsConstraintGroup*, CUtlMemory<CPhysicsConstraintGroup*, int> >::~CUtlVector()
t CUtlVector<CPhysicsFluidController*, CUtlMemory<CPhysicsFluidController*, int> >::InsertBefore(int, CPhysicsFluidController* const&)
t CUtlVector<CPhysicsFluidController*, CUtlMemory<CPhysicsFluidController*, int> >::~CUtlVector()
t CUtlVector<CPhysicsFluidController*, CUtlMemory<CPhysicsFluidController*, int> >::~CUtlVector()
t CUtlVector<CPredictedPhysicsObject*, CUtlMemory<CPredictedPhysicsObject*, int> >::InsertBefore(int, CPredictedPhysicsObject* const&)
t CUtlVector<CPredictedPhysicsObject*, CUtlMemory<CPredictedPhysicsObject*, int> >::~CUtlVector()
t CUtlVector<CPredictedPhysicsObject*, CUtlMemory<CPredictedPhysicsObject*, int> >::~CUtlVector()
t CUtlVector<IPhysicsMotionController*, CUtlMemory<IPhysicsMotionController*, int> >::InsertBefore(int, IPhysicsMotionController* const&)
t CUtlVector<IPhysicsMotionController*, CUtlMemory<IPhysicsMotionController*, int> >::~CUtlVector()
t CUtlVector<IPhysicsMotionController*, CUtlMemory<IPhysicsMotionController*, int> >::~CUtlVector()
t CUtlVector<IPhysicsPlayerController*, CUtlMemory<IPhysicsPlayerController*, int> >::InsertBefore(int, IPhysicsPlayerController* const&)
t CUtlVector<IPhysicsPlayerController*, CUtlMemory<IPhysicsPlayerController*, int> >::~CUtlVector()
t CUtlVector<IPhysicsPlayerController*, CUtlMemory<IPhysicsPlayerController*, int> >::~CUtlVector()
t CUtlVector<IPredictable_Controller_Independant*, CUtlMemory<IPredictable_Controller_Independant*, int> >::InsertBefore(int, IPredictable_Controller_Independant* const&)
t CUtlVector<IVP_Core*, CUtlMemory<IVP_Core*, int> >::InsertBefore(int, IVP_Core* const&)
t CUtlVector<IVP_Core*, CUtlMemory<IVP_Core*, int> >::Remove(int)
t CUtlVector<char*, CUtlMemory<char*, int> >::InsertBefore(int, char* const&)
t CUtlVector<void (*)(IConVar*, char const*, float), CUtlMemory<void (*)(IConVar*, char const*, float), int> >::InsertBefore(int, void (* const&)(IConVar*, char const*, float))
t CUtlVector<void (*)(IConVar*, char const*, float), CUtlMemory<void (*)(IConVar*, char const*, float), int> >::~CUtlVector()
t CUtlVector<void (*)(IConVar*, char const*, float), CUtlMemory<void (*)(IConVar*, char const*, float), int> >::~CUtlVector()
t CUtlVector<IVP_Compact_Ledgetree_Node const*, CUtlMemory<IVP_Compact_Ledgetree_Node const*, int> >::SetCount(int)
t CUtlVector<CUtlSymbolTable::StringPool_t*, CUtlMemory<CUtlSymbolTable::StringPool_t*, int> >::InsertBefore(int, CUtlSymbolTable::StringPool_t* const&)
t CUtlVector<void*, CUtlMemory<void*, int> >::InsertBefore(int, void* const&)
t CUtlVector<void*, CUtlMemory<void*, int> >::~CUtlVector()
t CUtlVector<void*, CUtlMemory<void*, int> >::~CUtlVector()
t CUtlVector<wchar_t*, CUtlMemory<wchar_t*, int> >::InsertBefore(int, wchar_t* const&)
t CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >::InsertBefore(int, unsigned short const&)
t CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >::SetCount(int)
t CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >::~CUtlVector()
t CUtlVector<unsigned short, CUtlMemory<unsigned short, int> >::~CUtlVector()
t CVisitHash::CVisitHash()
t CVisitHash::CVisitHash()
U CVProfNode::EnterScope()
U CVProfNode::GetSubNode(char const*, int, char const*, int)
U CVProfNode::ExitScope()
t __cxxabiv1::__terminate(void (*)())
t __cxxabiv1::__unexpected(void (*)())
t __cxxabiv1::__forced_unwind::~__forced_unwind()
t __cxxabiv1::__forced_unwind::~__forced_unwind()
t __cxxabiv1::__forced_unwind::~__forced_unwind()
t __cxxabiv1::__foreign_exception::~__foreign_exception()
t __cxxabiv1::__foreign_exception::~__foreign_exception()
t __cxxabiv1::__foreign_exception::~__foreign_exception()
d __cxxabiv1::__terminate_handler
d __cxxabiv1::__unexpected_handler
t hk_Console::get_instance()
d hk_Console::m_default_console_buffer
t hk_Console::exit(int)
t hk_Console::flush()
t hk_Console::printf(char const*, ...)
b hk_Console::m_console
t hk_Console::~hk_Console()
t hk_Console::~hk_Console()
t hk_Console::~hk_Console()
t hk_Link_EF::get_controller_name()
t hk_Link_EF::get_controller_priority()
t hk_Link_EF::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t hk_Link_EF::anchor_will_be_deleted_event(IVP_Anchor*)
t hk_Link_EF::get_associated_controlled_cores()
t hk_Link_EF::core_is_going_to_be_deleted_event(IVP_Core*)
t hk_Link_EF::~hk_Link_EF()
t hk_Link_EF::~hk_Link_EF()
t hk_Link_EF::~hk_Link_EF()
t hk_Matrix3::set_diagonal(float, float, float)
t hk_Matrix3::set_mul3_inv(hk_Rotation const&, hk_Matrix3 const&)
t hk_Matrix3::set_mul3_inv2(hk_Matrix3 const&, hk_Rotation const&)
t hk_Matrix3::set_cross_skew(hk_Vector3 const&, hk_Matrix3 const&)
t hk_Matrix3::set_identity_rotation()
t hk_Matrix3::set_rotated_diagonal_matrix(hk_Rotation const&, hk_Vector3 const&)
t hk_Matrix3::invert(float)
t hk_Matrix3::rotate(int, float)
t hk_Matrix3::set_cols(hk_Vector3 const&, hk_Vector3 const&, hk_Vector3 const&)
t hk_Matrix3::set_mul3(hk_Matrix3 const&, hk_Matrix3 const&)
t hk_Matrix3::set_rows(hk_Vector3 const&, hk_Vector3 const&, hk_Vector3 const&)
t hk_Matrix3::set_zero()
t hk_Matrix3::transpose()
t hk_Matrix3::operator-=(hk_Matrix3 const&)
t hk_Matrix3::operator+=(hk_Matrix3 const&)
t hk_Vector3::set_rotated_dir(hk_Rotation const&, hk_Vector3 const&)
t hk_Vector3::set_rotated_inv_dir(hk_Rotation const&, hk_Vector3 const&)
t hk_Vector3::set_transformed_pos(hk_Transform const&, hk_Vector3 const&)
t hk_Vector3::set_transformed_inv_pos(hk_Transform const&, hk_Vector3 const&)
t IAppSystem::IsSingleton()
t IAppSystem::GetDependencies()
t IAppSystem::GetTier()
t IAppSystem::Reconnect(void* (*)(char const*, int*), char const*)
t IVP_Anchor::init_anchor(IVP_Actuator*, IVP_Template_Anchor*)
t IVP_Anchor::get_next_anchor()
t IVP_Anchor::get_prev_anchor()
t IVP_Anchor::anchor_get_real_object()
t IVP_Anchor::object_is_going_to_be_deleted_event(IVP_Real_Object*)
t IVP_Anchor::IVP_Anchor()
t IVP_Anchor::IVP_Anchor()
t IVP_Anchor::~IVP_Anchor()
t IVP_Anchor::~IVP_Anchor()
t IVP_Object::to_cluster()
t IVP_Object::init(IVP_Environment*)
t IVP_Object::to_ball()
t IVP_Object::to_poly()
t IVP_Object::to_real()
t IVP_Object::set_type(IVP_OBJECT_TYPE)
t IVP_Object::IVP_Object(IVP_Cluster*, IVP_Template_Object const*)
t IVP_Object::IVP_Object(IVP_Environment*)
t IVP_Object::IVP_Object(IVP_Cluster*, IVP_Template_Object const*)
t IVP_Object::IVP_Object(IVP_Environment*)
t IVP_Object::~IVP_Object()
t IVP_Object::~IVP_Object()
t IVP_Object::~IVP_Object()
t IVP_U_Quat::get_angles(IVP_U_Float_Point*)
t IVP_U_Quat::invert_quat()
t IVP_U_Quat::normize_quat()
t IVP_U_Quat::set_mult_quat(IVP_U_Quat const*, IVP_U_Quat const*)
t IVP_U_Quat::set_quaternion(float const (*) [4])
t IVP_U_Quat::set_quaternion(IVP_U_Matrix3 const*)
t IVP_U_Quat::set_invert_mult(IVP_U_Quat const*, IVP_U_Quat const*)
t IVP_U_Quat::fast_normize_quat()
t IVP_U_Quat::set_div_unit_quat(IVP_U_Quat const*, IVP_U_Quat const*)
t IVP_U_Quat::set_fast_multiple(IVP_U_Point const*, float)
t IVP_U_Quat::inline_set_mult_quat(IVP_U_Quat const*, IVP_U_Float_Quat const*)
t IVP_U_Quat::inline_set_mult_quat(IVP_U_Quat const*, IVP_U_Quat const*)
t IVP_U_Quat::normize_correct_step(int)
t IVP_U_Quat::set_invert_unit_quat(IVP_U_Quat const*)
t IVP_U_Quat::set_interpolate_linear(IVP_U_Quat const*, IVP_U_Quat const*, float)
t IVP_U_Quat::set_very_fast_multiple(IVP_U_Float_Point const*, float)
t IVP_U_Quat::set_interpolate_smoothly(IVP_U_Quat const*, IVP_U_Quat const*, float)
t IVP_U_Quat::set_from_rotation_vectors(float, float, float, float, float, float)
t IVP_U_Quat::set_fast_multiple_with_clip(IVP_U_Float_Point const*, float)
t IVP_U_Quat::set(float, float, float)
t IVP_U_Quat::init()
t IVP_U_Quat::byte_swap()
t IVP_U_Quat::IVP_U_Quat(IVP_U_Matrix3 const*)
t IVP_U_Quat::IVP_U_Quat(IVP_U_Point const&)
t IVP_U_Quat::IVP_U_Quat()
t IVP_U_Quat::IVP_U_Quat(IVP_U_Matrix3 const*)
t IVP_U_Quat::IVP_U_Quat(IVP_U_Point const&)
t IVP_U_Quat::IVP_U_Quat()
t CNormalList::ClampVector(Vector const&, float)
t CNormalList::HasPositiveProjection(Vector const&)
t CNormalList::IsFull()
t CNormalList::AddNormal(Vector const&)
t CNormalList::CNormalList(CNormalList const&)
t CNormalList::CNormalList()
t CNormalList::CNormalList(CNormalList const&)
t CNormalList::CNormalList()
t CPolyhedron::~CPolyhedron()
t CPolyhedron::~CPolyhedron()
t CPolyhedron::~CPolyhedron()
t CVProfScope::~CVProfScope()
t CVProfScope::~CVProfScope()
t FourVectors::RotateManyBy(FourVectors*, unsigned int, matrix3x4_t const&)
t FourVectors::RotateManyBy(FourVectors*, unsigned int, matrix3x4_t const&, FourVectors*)
t FourVectors::CalcClosestPointOnLineSIMD(FourVectors const&, FourVectors const&, FourVectors const&, FourVectors&, float __vector(4)*)
t FourVectors::CalcClosestPointOnLineSIMD(FourVectors const&, FourVectors const&, FourVectors const&, FourVectors&, float __vector*)
t FourVectors::CalcClosestPointToLineTSIMD(FourVectors const&, FourVectors const&, FourVectors const&, FourVectors&)
t hk_Rotation::set_axis_angle(hk_Vector3 const&, float)
t hk_Rotation::set(hk_Quaternion const&)
t IVP_Cluster::add_object(IVP_Object*)
t IVP_Cluster::remove_object(IVP_Object*)
t IVP_Cluster::get_next_object_in_cluster(IVP_Object*)
t IVP_Cluster::get_first_object_of_cluster()
t IVP_Cluster::IVP_Cluster(IVP_Environment*)
t IVP_Cluster::IVP_Cluster(IVP_Cluster*, IVP_Template_Cluster*)
t IVP_Cluster::IVP_Cluster(IVP_Environment*)
t IVP_Cluster::IVP_Cluster(IVP_Cluster*, IVP_Template_Cluster*)
t IVP_Cluster::~IVP_Cluster()
t IVP_Cluster::~IVP_Cluster()
t IVP_Cluster::~IVP_Cluster()
t IVP_Mindist::init_mindist(IVP_Real_Object*, IVP_Real_Object*, IVP_Compact_Edge const*, IVP_Compact_Edge const*)
t IVP_Mindist::is_recursive()
t IVP_Mindist::get_coll_dist()
t IVP_Mindist::recalc_mindist()
t IVP_Mindist::get_environment()
t IVP_Mindist::mindist_rescue_push()
t IVP_Mindist::simulate_time_event(IVP_Environment*)
t IVP_Mindist::hull_manager_is_reset(float, float)
t IVP_Mindist::recalc_invalid_mindist()
t IVP_Mindist::exact_mindist_went_invalid(IVP_Mindist_Manager*)
t IVP_Mindist::update_exact_mindist_events(IVP_BOOL, IVP_MINDIST_EVENT_HINT)
t IVP_Mindist::create_cp_in_advance_pretension(IVP_Real_Object*, float)
t IVP_Mindist::try_to_generate_managed_friction(IVP_Friction_System**, IVP_BOOL*, IVP_Simulation_Unit*, IVP_BOOL)
t IVP_Mindist::mindist_hull_limit_exceeded_event(float)
t IVP_Mindist::print(char const*)
t IVP_Mindist::do_impact()
t IVP_Mindist::IVP_Mindist(IVP_Environment*, IVP_Collision_Delegator*)
t IVP_Mindist::IVP_Mindist(IVP_Environment*, IVP_Collision_Delegator*)
t IVP_Mindist::~IVP_Mindist()
t IVP_Mindist::~IVP_Mindist()
t IVP_Mindist::~IVP_Mindist()
t IVP_OV_Node::IVP_OV_Node()
t IVP_OV_Node::IVP_OV_Node()
t IVP_OV_Node::~IVP_OV_Node()
t IVP_OV_Node::~IVP_OV_Node()
t IVP_Polygon::IVP_Polygon(IVP_Cluster*, IVP_SurfaceManager*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
t IVP_Polygon::IVP_Polygon(IVP_Cluster*, IVP_SurfaceManager*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
t IVP_Polygon::~IVP_Polygon()
t IVP_Polygon::~IVP_Polygon()
t IVP_Synapse::get_object()
t IVP_Synapse::init_synapse_real(IVP_Mindist_Base*, IVP_Real_Object*)
t IVP_Synapse::set_synapse_mindist(IVP_Mindist_Base*)
t IVP_Synapse::hull_manager_is_reset(float, float)
t IVP_Synapse::hull_limit_exceeded_event(IVP_Hull_Manager*, float)
t IVP_Synapse::hull_manager_is_going_to_be_deleted_event(IVP_Hull_Manager*)
t IVP_Synapse::get_type()
t IVP_Synapse::~IVP_Synapse()
t IVP_Synapse::~IVP_Synapse()
t IVP_Synapse::~IVP_Synapse()
t IVP_U_Hesse::calc_hesse(IVP_U_Point const*, IVP_U_Point const*, IVP_U_Point const*)
t IVP_U_Hesse::calc_hesse(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_U_Hesse::mult_hesse(float)
t IVP_U_Hesse::calc_hesse_val(IVP_U_Point const*)
t IVP_U_Hesse::normize()
t IVP_U_Hesse::byte_swap()
t IVP_U_Plain::IVP_U_Plain(IVP_U_Hesse const*)
t IVP_U_Plain::IVP_U_Plain(IVP_U_Point const*, IVP_U_Point const*, IVP_U_Point const*)
t IVP_U_Plain::IVP_U_Plain(IVP_U_Hesse const*)
t IVP_U_Plain::IVP_U_Plain(IVP_U_Point const*, IVP_U_Point const*, IVP_U_Point const*)
t IVP_U_Point::set_crossing(IVP_U_Hesse*, IVP_U_Hesse*, IVP_U_Hesse*)
t IVP_U_Point::calc_an_orthogonal(IVP_U_Point const*)
t IVP_U_Point::set_orthogonal_part(IVP_U_Point const*, IVP_U_Float_Point const*)
t IVP_U_Point::set_orthogonal_part(IVP_U_Point const*, IVP_U_Point const*)
t IVP_U_Point::solve_quadratic_equation_fast(IVP_U_Point const*)
t IVP_U_Point::solve_quadratic_equation_accurate(IVP_U_Point const*)
t IVP_U_Point::print(char const*)
t IVP_U_Point::rotate(IVP_COORDINATE_INDEX, float)
t IVP_U_Point::line_max(IVP_U_Point const*)
t IVP_U_Point::line_min(IVP_U_Point const*)
t IVP_U_Point::byte_swap()
t IVP_U_Point::IVP_U_Point(float, float, float)
t IVP_U_Point::IVP_U_Point(IVP_U_Float_Point const&)
t IVP_U_Point::IVP_U_Point()
t IVP_U_Point::IVP_U_Point(float, float, float)
t IVP_U_Point::IVP_U_Point(IVP_U_Float_Point const&)
t IVP_U_Point::IVP_U_Point()
t CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::GetRealSize(void*)
t CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::DestroyResourceStorage(void*)
t CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::Lock()
t CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::Unlock()
t CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::TryLock()
t CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::~CDataManager()
t CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::~CDataManager()
t CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>::~CDataManager()
t CDeleteProxy<IPhysicsConstraint>::Delete()
t CEmptyConVar::SetValue(float)
t CEmptyConVar::SetValue(int)
t CEmptyConVar::SetValue(char const*)
t CEmptyConVar::~CEmptyConVar()
t CEmptyConVar::~CEmptyConVar()
t CEmptyConVar::~CEmptyConVar()
t CPhysCollide::SetOrthographicAreas(Vector const&)
t CPhysCollide::UnserializeFromBuffer(char const*, unsigned int, int, bool)
t CPhysCollide::ComputeOrthographicAreas(float)
t CPhysCollide::~CPhysCollide()
t CPhysCollide::~CPhysCollide()
t CPhysCollide::~CPhysCollide()
t CStringTable::AddString(char const*)
t CStringTable::~CStringTable()
t CStringTable::~CStringTable()
U CThreadEvent::Set()
U CThreadEvent::CThreadEvent(bool)
t CTraceSolver::SweepSingleConvex()
t CTraceSolver::SolveMeshIntersection(simplex_t&, float*)
t CTraceSolver::SolveMeshIntersection2D(simplex_t&)
t CTraceSolver::DoSweep()
t CTraceSolver::CTraceSolver(CGameTrace*, ITraceObject*, CTraceRay*, ITraceObject*, Vector const&)
t CTraceSolver::CTraceSolver(CGameTrace*, ITraceObject*, CTraceRay*, ITraceObject*, Vector const&)
t fourplanes_t::Set2Planes(VPlane const*)
t fourplanes_t::Set4Planes(VPlane const*)
t fourplanes_t::ComputeSignbits()
t fourplanes_t::SetPlane(int, Vector const&, float)
b (anonymous namespace)::emergency_mutex
t hk_Transform::set_transform(hk_Quaternion const&, hk_Vector3 const&)
t hk_Transform::set_interpolate(hk_QTransform&, hk_QTransform&, float)
t hk_Transform::set_identity_transform()
t hk_Transform::set_cols4(hk_Vector3 const&, hk_Vector3 const&, hk_Vector3 const&, hk_Vector3 const&)
t hk_Transform::hk_Transform(hk_Quaternion const&, hk_Vector3 const&)
t hk_Transform::hk_Transform(hk_Quaternion const&, hk_Vector3 const&)
t InterfaceReg::InterfaceReg(void* (*)(), char const*)
t InterfaceReg::InterfaceReg(void* (*)(), char const*)
t IPhysCollide::~IPhysCollide()
t IPhysCollide::~IPhysCollide()
t IPhysCollide::~IPhysCollide()
t IVP_Actuator::get_controller_name()
t IVP_Actuator::get_controller_priority()
t IVP_Actuator::anchor_will_be_deleted_event(IVP_Anchor*)
t IVP_Actuator::get_associated_controlled_cores()
t IVP_Actuator::core_is_going_to_be_deleted_event(IVP_Core*)
t IVP_Actuator::IVP_Actuator(IVP_Environment*)
t IVP_Actuator::IVP_Actuator(IVP_Environment*)
t IVP_Actuator::~IVP_Actuator()
t IVP_Actuator::~IVP_Actuator()
t IVP_Actuator::~IVP_Actuator()
t IVP_KK_Input::calc_quad_distance_edge_edge()
t IVP_KK_Input::IVP_KK_Input(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_KK_Input::IVP_KK_Input(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Material::IVP_Material(IVP_Material const&)
t IVP_Material::IVP_Material()
t IVP_Material::IVP_Material(IVP_Material const&)
t IVP_Material::IVP_Material()
t IVP_Material::~IVP_Material()
t IVP_Material::~IVP_Material()
t IVP_Material::~IVP_Material()
t IVP_Triangle::calc_hesse()
t IVP_Triangle::calc_areasize()
t IVP_Triangle::print(char const*)
t IVP_Triangle::IVP_Triangle()
t IVP_Triangle::IVP_Triangle()
t IVP_Triangle::~IVP_Triangle()
t IVP_Triangle::~IVP_Triangle()
t IVP_Triangle::~IVP_Triangle()
t IVP_Tri_Edge::other_side()
t IVP_Tri_Edge::check_concavity(IVP_Tri_Edge*)
t IVP_Tri_Edge::p()
t IVP_Tri_Edge::search_nearest_edge_to(IVP_U_Point*, float*)
t IVP_Tri_Edge::print(char const*)
t IVP_U_Matrix::init_rows4(IVP_U_Point const*, IVP_U_Point const*, IVP_U_Point const*, IVP_U_Point const*)
t IVP_U_Matrix::set_matrix(IVP_U_Matrix const*)
t IVP_U_Matrix::interpolate(IVP_U_Matrix const*, IVP_U_Matrix const*, float)
t IVP_U_Matrix::real_invert(float)
t IVP_U_Matrix::real_invert(IVP_U_Matrix const*, float)
t IVP_U_Matrix::get_position()
t IVP_U_Matrix::init_columns4(IVP_U_Point const*, IVP_U_Point const*, IVP_U_Point const*, IVP_U_Point const*)
t IVP_U_Matrix::rotate_invers(IVP_COORDINATE_INDEX, float, IVP_U_Matrix*)
t IVP_U_Matrix::set_transpose(IVP_U_Matrix const*)
t IVP_U_Matrix::write_to_file(_IO_FILE*, char const*)
t IVP_U_Matrix::read_from_file(_IO_FILE*)
t IVP_U_Matrix::quad_distance_to(IVP_U_Matrix const*)
t IVP_U_Matrix::init_rot_multiple(IVP_U_Point const*, float)
t IVP_U_Matrix::init()
t IVP_U_Matrix::print(char const*)
t IVP_U_Matrix::rotate(IVP_COORDINATE_INDEX, float, IVP_U_Matrix*)
t IVP_U_Matrix::shift_os(IVP_U_Point const*)
t IVP_U_Matrix::shift_ws(IVP_U_Point const*)
t IVP_U_Matrix::byte_swap()
t IVP_U_Matrix::transpose()
t IVP_U_Memory::neuer_sp_block(unsigned int)
t IVP_U_Memory::get_mem_transaction(unsigned int)
t IVP_U_Memory::align_to_next_adress(void*)
t IVP_U_Memory::free_mem_transaction()
t IVP_U_Memory::end_memory_transaction()
t IVP_U_Memory::start_memory_transaction()
t IVP_U_Memory::init_mem_transaction_usage(char*, int)
t IVP_U_Memory::get_mem(unsigned int)
t IVP_U_Memory::free_mem()
t IVP_U_Memory::get_memc(unsigned int)
t IVP_U_Memory::init_mem()
t IVP_U_Memory::IVP_U_Memory()
t IVP_U_Memory::IVP_U_Memory()
t IVP_U_Memory::~IVP_U_Memory()
t IVP_U_Memory::~IVP_U_Memory()
t IVP_U_Vector<IVV_Sphere>::clear()
t IVP_U_Vector<IVP_U_Hesse>::clear()
t IVP_U_Vector<IVP_U_Point>::clear()
t IVP_U_Vector<IVP_Triangle>::clear()
t IVP_U_Vector<IVP_Controller>::~IVP_U_Vector()
t IVP_U_Vector<IVP_Listener_PSI>::~IVP_U_Vector()
t IVP_U_Vector<IVP_Compact_Ledge>::~IVP_U_Vector()
t IVP_U_Vector<IVP_Listener_Object>::~IVP_U_Vector()
t IVP_U_Vector<IVP_Listener_Phantom>::~IVP_U_Vector()
t IVP_U_Vector<IVP_Listener_Collision>::~IVP_U_Vector()
t IVP_U_Vector<IVP_Listener_Constraint>::~IVP_U_Vector()
t IVP_U_Vector<IVP_Listener_Set_Active<IVP_Real_Object> >::~IVP_U_Vector()
t IVP_U_Vector<IVP_Listener_Set_Active<IVP_Mindist_Base> >::~IVP_U_Vector()
t IVP_U_Vector<IVP_Listener_Set_Active<IVP_Core> >::~IVP_U_Vector()
t IVP_U_Vector<IVP_U_Active_Int_Delayed>::~IVP_U_Vector()
t IVP_U_Vector<IVP_Constraint_Car_Object>::clear()
t IVP_U_Vector<IVP_U_Active_Float_Delayed>::~IVP_U_Vector()
t IVP_U_Vector<IVP_Collision_Delegator_Root>::clear()
t IVP_U_Vector<IVP_Listener_Check_Dist_Event>::~IVP_U_Vector()
t IVP_U_Vector<IVP_Core>::~IVP_U_Vector()
t AsianWordWrap::CanEndLine(wchar_t)
t AsianWordWrap::CanBeginLine(wchar_t)
t AsianWordWrap::CanBreakAfter(wchar_t const*)
t AsianWordWrap::CanBreakRepeated(wchar_t)
t CMeshInstance::EstimatedSize(virtualmeshlist_t const&)
t CMeshInstance::CreateResource(virtualmeshlist_t const&)
t CMeshInstance::ComputeRootLedgeSize(unsigned char const*)
t CMeshInstance::Init(virtualmeshlist_t const&)
t CMeshInstance::~CMeshInstance()
t CMeshInstance::~CMeshInstance()
t CPhysicsTrace::SweepBoxIVP(Ray_t const&, unsigned int, IConvexInfo*, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
t CPhysicsTrace::SweepBoxIVP(Vector const&, Vector const&, Vector const&, Vector const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
t CPhysicsTrace::IsBoxIntersectingCone(Vector const&, Vector const&, truncatedcone_t const&)
t CPhysicsTrace::SweepBoxAxisAlignedIVP(Ray_t const&, CPhysCollide const*, CPhysCollideAABBTree const*, CGameTrace*)
t CPhysicsTrace::GetAABB(Vector*, Vector*, CPhysCollide const*, Vector const&, QAngle const&)
t CPhysicsTrace::SweepIVP(Vector const&, Vector const&, CPhysCollide const*, QAngle const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
t CPhysicsTrace::GetExtent(CPhysCollide const*, Vector const&, QAngle const&, Vector const&)
t CPhysicsTrace::CPhysicsTrace()
t CPhysicsTrace::CPhysicsTrace()
t CPhysicsTrace::~CPhysicsTrace()
t CPhysicsTrace::~CPhysicsTrace()
t CPhysPolysoup::CPhysPolysoup()
t CPhysPolysoup::CPhysPolysoup()
t CSleepObjects::event_object_frozen(IVP_Event_Object*)
t CSleepObjects::event_object_created(IVP_Event_Object*)
t CSleepObjects::event_object_deleted(IVP_Event_Object*)
t CSleepObjects::event_object_revived(IVP_Event_Object*)
t CSleepObjects::~CSleepObjects()
t CSleepObjects::~CSleepObjects()
t CSleepObjects::~CSleepObjects()
U CThreadRWLock::UnlockWrite()
U CThreadRWLock::WaitForRead()
U CThreadRWLock::LockForWrite()
t CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::CreateList()
t CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
t CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Alloc()
t CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::Unlink(unsigned short, unsigned short)
t CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::LinkAfter(unsigned short, unsigned short, unsigned short)
t CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::CUtlMultiList(int, int)
t CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::CUtlMultiList(int, int)
t CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
t CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::~CUtlMultiList()
t CUtlMultiList<void*, unsigned short>::CreateList()
t CUtlMultiList<void*, unsigned short>::LinkBefore(unsigned short, unsigned short, unsigned short)
t CUtlMultiList<void*, unsigned short>::Alloc()
t CUtlMultiList<void*, unsigned short>::Remove(unsigned short, unsigned short)
t CUtlMultiList<void*, unsigned short>::Unlink(unsigned short, unsigned short)
t CUtlMultiList<void*, unsigned short>::CUtlMultiList(int, int)
t CUtlMultiList<void*, unsigned short>::CUtlMultiList(int, int)
t CUtlMultiList<void*, unsigned short>::~CUtlMultiList()
t CUtlMultiList<void*, unsigned short>::~CUtlMultiList()
t CVoidPairHash::~CVoidPairHash()
t CVoidPairHash::~CVoidPairHash()
t CVoidPairHash::~CVoidPairHash()
t hk_Array_Base::grow_mem(int)
t hk_Array_Base::grow_mem(int, int)
t hk_Array_Base::alloc_mem(int, int)
t hk_Constraint::get_constraint_dof()
t hk_Constraint::get_constraint_type()
t hk_Constraint::hk_Constraint(hk_Local_Constraint_System*, hk_Rigid_Body*, hk_Rigid_Body*, IVP_CONTROLLER_PRIORITY, int)
t hk_Constraint::hk_Constraint(hk_Local_Constraint_System*, hk_Rigid_Body*, hk_Rigid_Body*, IVP_CONTROLLER_PRIORITY, int)
t hk_Constraint::~hk_Constraint()
t hk_Constraint::~hk_Constraint()
t hk_Constraint::~hk_Constraint()
t hk_Quaternion::set_axis_angle(hk_Vector3 const&, float)
t hk_Quaternion::set(hk_Rotation const&)
t hk_Quaternion::set_slerp(hk_Quaternion const&, hk_Quaternion const&, float)
t IVP_3D_Solver::calc_nullstelle(IVP_Time, IVP_Time, float, float, float, IVP_Real_Object*, IVP_Real_Object*)
t IVP_3D_Solver::set_max_deviation(float)
t IVP_3D_Solver::find_first_t_for_value_coll(float, float, IVP_Time, IVP_Time, IVP_U_Matrix_Cache*, IVP_U_Matrix_Cache*, float*, IVP_Time*)
t IVP_3D_Solver::find_first_t_for_value_max_dev(float, IVP_Time, IVP_Time, int, IVP_U_Matrix_Cache*, IVP_U_Matrix_Cache*, float*, IVP_Time*)
t IVP_3D_Solver::find_first_t_for_value_max_dev2(float, IVP_Time, IVP_Time, int, IVP_U_Matrix_Cache*, IVP_U_Matrix_Cache*, float*, IVP_Time*)
t IVP_CFEP_Hash::pair_to_index(IVP_CFEP_Objectpair*)
t IVP_CFEP_Hash::add(IVP_CFEP_Objectpair*)
t IVP_CFEP_Hash::find(IVP_CFEP_Objectpair*)
t IVP_CFEP_Hash::remove(IVP_CFEP_Objectpair*)
t IVP_CFEP_Hash::IVP_CFEP_Hash(int)
t IVP_CFEP_Hash::IVP_CFEP_Hash(int)
t IVP_CFEP_Hash::~IVP_CFEP_Hash()
t IVP_CFEP_Hash::~IVP_CFEP_Hash()
t IVP_CFEP_Hash::~IVP_CFEP_Hash()
t IVP_Collision::set_fvector_index(int, int)
t IVP_Collision::delegator_is_going_to_be_deleted_event(IVP_Collision_Delegator*)
t IVP_Collision::IVP_Collision(IVP_Collision_Delegator*)
t IVP_Collision::IVP_Collision(IVP_Collision_Delegator*)
t IVP_Collision::~IVP_Collision()
t IVP_Collision::~IVP_Collision()
t IVP_Collision::~IVP_Collision()
t IVP_MI_Vector::add_multiple(IVP_MI_Vector const*, float)
t IVP_MI_Vector::set_time_stamp(IVP_Time)
t IVP_MI_Vector::malloc_mi_vector(int)
t IVP_MI_Vector::malloc_and_set_mi_vector(int, float*)
t IVP_MI_Vector::add(IVP_MI_Vector const*)
t IVP_MI_Vector::set(int, float)
t IVP_MI_Vector::set(IVP_MI_Vector const*)
t IVP_MI_Vector::mult(float)
t IVP_MI_Vector::subtract(IVP_MI_Vector const*)
t IVP_U_FVector<IVP_Collision>::~IVP_U_FVector()
t IVP_U_FVector<IVP_Collision>::~IVP_U_FVector()
t IVP_U_Matrix3::get_angles(float*, float*, float*)
t IVP_U_Matrix3::init_rows3(IVP_U_Point const*, IVP_U_Point const*, IVP_U_Point const*)
t IVP_U_Matrix3::transpose3()
t IVP_U_Matrix3::orthogonize()
t IVP_U_Matrix3::real_invert(float)
t IVP_U_Matrix3::orthonormize()
t IVP_U_Matrix3::init_columns3(IVP_U_Point const*, IVP_U_Point const*, IVP_U_Point const*)
t IVP_U_Matrix3::init_rotated3(IVP_COORDINATE_INDEX, float)
t IVP_U_Matrix3::set_transpose3(IVP_U_Matrix3 const*)
t IVP_U_Matrix3::calc_eigen_vector(float, IVP_U_Point*)
t IVP_U_Matrix3::init_normized3_col(IVP_U_Point const*, IVP_COORDINATE_INDEX)
t IVP_U_Matrix3::init_normized3_col(IVP_U_Point const*, IVP_COORDINATE_INDEX, IVP_U_Point const*)
t IVP_U_Matrix3::init_normized3_row(IVP_U_Point const*, IVP_COORDINATE_INDEX)
t IVP_U_Matrix3::init_normized3_row(IVP_U_Point const*, IVP_COORDINATE_INDEX, IVP_U_Point const*)
t IVP_U_Matrix3::quad_rot_distance_to(IVP_U_Matrix3 const*)
t IVP_U_Matrix3::init3()
t IVP_U_Matrix3::normize()
t IVP_U_Matrix3::set_col(IVP_COORDINATE_INDEX, IVP_U_Point const*)
t IVP_U_Matrix3::set_col(IVP_COORDINATE_INDEX, IVP_U_Float_Point const*)
t IVP_U_Matrix3::set_row(IVP_COORDINATE_INDEX, IVP_U_Point const*)
t IVP_U_Matrix3::set_row(IVP_COORDINATE_INDEX, IVP_U_Float_Point const*)
t IVP_U_Matrix3::set_elem(int, int, float)
t IVP_U_Matrix3::byte_swap()
t IVP_Vec_PCore::IVP_Vec_PCore(IVP_Core const*, IVP_U_Float_Point const*)
t IVP_Vec_PCore::IVP_Vec_PCore(IVP_Core const*, IVP_U_Float_Point const*)
t P_Sur_2D_Line::has_points(P_Sur_2D_Point*, P_Sur_2D_Point*)
t P_Sur_2D_Line::dist_to_point(IVP_U_Point*)
t P_Sur_2D_Line::is_crossing_line(P_Sur_2D_Line*)
t P_Sur_2D_Line::overlaps_with_line(P_Sur_2D_Line*)
t P_Sur_2D_Line::hesse_dist_to_point(IVP_U_Point*)
t P_Sur_2D_Line::point_lies_in_interval(IVP_U_Point*)
t P_Sur_2D_Line::point_lies_to_the_left(IVP_U_Point*)
t P_Sur_2D_Line::P_Sur_2D_Line(P_Sur_2D_Point*, P_Sur_2D_Point*)
t P_Sur_2D_Line::P_Sur_2D_Line(P_Sur_2D_Point*, P_Sur_2D_Point*)
t P_Sur_2D_Line::~P_Sur_2D_Line()
t P_Sur_2D_Line::~P_Sur_2D_Line()
t CBaseAppSystem<IPhysics>::Disconnect()
t CBaseAppSystem<IPhysics>::QueryInterface(char const*)
t CBaseAppSystem<IPhysics>::GetDependencies()
t CBaseAppSystem<IPhysics>::Init()
t CBaseAppSystem<IPhysics>::Connect(void* (*)(char const*, int*))
t CBaseAppSystem<IPhysics>::GetTier()
t CBaseAppSystem<IPhysics>::Shutdown()
t CBaseAppSystem<IPhysics>::Reconnect(void* (*)(char const*, int*), char const*)
t CDefConvexInfo::GetContents(int)
t ConCommandBase::CopyString(char const*)
t ConCommandBase::RemoveFlags(int)
b ConCommandBase::s_pAccessor
b ConCommandBase::s_pConCommandBases
t ConCommandBase::Init()
t ConCommandBase::Create(char const*, char const*, int)
t ConCommandBase::GetNext()
t ConCommandBase::AddFlags(int)
t ConCommandBase::Shutdown()
t ConCommandBase::ConCommandBase(char const*, char const*, int)
t ConCommandBase::ConCommandBase()
t ConCommandBase::ConCommandBase(char const*, char const*, int)
t ConCommandBase::ConCommandBase()
t ConCommandBase::~ConCommandBase()
t ConCommandBase::~ConCommandBase()
t ConCommandBase::~ConCommandBase()
t CPhysicsObject::EnableDrag(bool)
t CPhysicsObject::NotifyWake()
t CPhysicsObject::SetDamping(float const*, float const*)
t CPhysicsObject::SetInertia(Vector const&)
t CPhysicsObject::AddVelocity(Vector const*, Vector const*)
t CPhysicsObject::NotifySleep()
t CPhysicsObject::SetContents(unsigned int)
t CPhysicsObject::SetGameData(void*)
t CPhysicsObject::SetPosition(Vector const&, QAngle const&, bool)
t CPhysicsObject::SetVelocity(Vector const*, Vector const*)
t CPhysicsObject::BecomeHinged(int)
t CPhysicsObject::EnableMotion(bool)
t CPhysicsObject::RemoveHinged()
t CPhysicsObject::SetGameFlags(unsigned short)
t CPhysicsObject::SetGameIndex(unsigned short)
t CPhysicsObject::UpdateShadow(Vector const&, QAngle const&, bool, float)
t CPhysicsObject::BecomeTrigger()
t CPhysicsObject::ClampVelocity()
t CPhysicsObject::EnableGravity(bool)
t CPhysicsObject::RemoveTrigger()
t CPhysicsObject::SetSphereRadius(float)
t CPhysicsObject::WriteToTemplate(vphysics_save_cphysicsobject_t&)
t CPhysicsObject::ApplyForceCenter(Vector const&)
t CPhysicsObject::ApplyForceOffset(Vector const&, Vector const&)
t CPhysicsObject::EnableCollisions(bool)
t CPhysicsObject::InitFromTemplate(CPhysicsEnvironment*, void*, vphysics_save_cphysicsobject_t const&)
t CPhysicsObject::SetBuoyancyRatio(float)
t CPhysicsObject::SetCallbackFlags(unsigned short)
t CPhysicsObject::SetMaterialIndex(int)
t CPhysicsObject::ApplyTorqueCenter(Vector const&)
t CPhysicsObject::SetCollisionHints(unsigned int)
t CPhysicsObject::SetPositionMatrix(matrix3x4_t const&, bool)
t CPhysicsObject::RecomputeDragBases()
t CPhysicsObject::SetDragCoefficient(float*, float*)
t CPhysicsObject::ComputeShadowControl(hlshadowcontrol_params_t const&, float, float)
t CPhysicsObject::RecheckContactPoints(bool)
t CPhysicsObject::CreateFrictionSnapshot()
t CPhysicsObject::GetVPhysicsEnvironment()
t CPhysicsObject::RecheckCollisionFilter()
t CPhysicsObject::RemoveShadowController()
t CPhysicsObject::SetErrorDelta_Position(Vector const&)
t CPhysicsObject::SetErrorDelta_Velocity(Vector const&)
t CPhysicsObject::SetUseAlternateGravity(bool)
t CPhysicsObject::DestroyFrictionSnapshot(IPhysicsFrictionSnapshot*)
t CPhysicsObject::RestoreShadowController(IPhysicsShadowController*)
t CPhysicsObject::SetVelocityInstantaneous(Vector const*, Vector const*)
t CPhysicsObject::Init(CPhysCollide const*, IVP_Real_Object*, int, float, float, float)
t CPhysicsObject::Wake()
t CPhysicsObject::Sleep()
t CPhysicsObject::SetMass(float)
t CPhysicsObject::SyncWith(IPhysicsObject*)
t CPhysicsObject::SetShadow(float, float, bool, bool)
t CPhysicsObject::SetVolume(float)
t CPhysicsObject::CPhysicsObject()
t CPhysicsObject::CPhysicsObject()
t CPhysicsObject::~CPhysicsObject()
t CPhysicsObject::~CPhysicsObject()
t CPhysicsObject::~CPhysicsObject()
t CPhysicsSpring::GetEndObject()
t CPhysicsSpring::GetEndpoints(Vector*, Vector*)
t CPhysicsSpring::AttachListener()
t CPhysicsSpring::DetachListener()
t CPhysicsSpring::GetStartObject()
t CPhysicsSpring::SetSpringLength(float)
t CPhysicsSpring::WriteToTemplate(vphysics_save_cphysicsspring_t&)
t CPhysicsSpring::SetSpringDamping(float)
t CPhysicsSpring::SetSpringConstant(float)
t CPhysicsSpring::event_object_frozen(IVP_Event_Object*)
t CPhysicsSpring::event_object_created(IVP_Event_Object*)
t CPhysicsSpring::event_object_deleted(IVP_Event_Object*)
t CPhysicsSpring::event_object_revived(IVP_Event_Object*)
t CPhysicsSpring::CPhysicsSpring(CPhysicsObject*, CPhysicsObject*, IVP_Actuator_Spring*)
t CPhysicsSpring::CPhysicsSpring(CPhysicsObject*, CPhysicsObject*, IVP_Actuator_Spring*)
t CPhysicsSpring::~CPhysicsSpring()
t CPhysicsSpring::~CPhysicsSpring()
t CPhysicsSpring::~CPhysicsSpring()
t CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
t CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
t CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::~CUtlLinkedList()
t CUtlLinkedList<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<CDataManagerBase::resource_lru_element_t, unsigned short>::List_t, unsigned short>, unsigned short> >::~CUtlLinkedList()
t CUtlLinkedList<CUtlMultiList<void*, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short> >::AllocInternal(bool)
t CUtlLinkedList<CUtlMultiList<void*, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short> >::Unlink(unsigned short)
t CUtlLinkedList<CUtlMultiList<void*, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short> >::~CUtlLinkedList()
t CUtlLinkedList<CUtlMultiList<void*, unsigned short>::List_t, unsigned short, false, unsigned short, CUtlMemory<UtlLinkedListElem_t<CUtlMultiList<void*, unsigned short>::List_t, unsigned short>, unsigned short> >::~CUtlLinkedList()
t CVPhysicsParse::ParseFluid(fluid_t*, IVPhysicsKeyHandler*)
t CVPhysicsParse::ParseSolid(solid_t*, IVPhysicsKeyHandler*)
t CVPhysicsParse::ParseCustom(void*, IVPhysicsKeyHandler*)
t CVPhysicsParse::ParseVehicle(vehicleparams_t*, IVPhysicsKeyHandler*)
t CVPhysicsParse::ParseVehicleAxle(vehicle_axleparams_t&)
t CVPhysicsParse::ParseVehicleBody(vehicle_bodyparams_t&)
t CVPhysicsParse::ParseSurfaceTable(int*, IVPhysicsKeyHandler*)
t CVPhysicsParse::ParseVehicleWheel(vehicle_wheelparams_t&)
t CVPhysicsParse::ParseVehicleEngine(vehicle_engineparams_t&)
t CVPhysicsParse::GetCurrentBlockName()
t CVPhysicsParse::ParseCollisionRules(ragdollcollisionrules_t*, IVPhysicsKeyHandler*)
t CVPhysicsParse::ParseVehicleSteering(vehicle_steeringparams_t&)
t CVPhysicsParse::ParseRagdollConstraint(constraint_ragdollparams_t*, IVPhysicsKeyHandler*)
t CVPhysicsParse::ParseVehicleSuspension(vehicle_suspensionparams_t&)
t CVPhysicsParse::ParseVehicleEngineBoost(vehicle_engineparams_t&)
t CVPhysicsParse::ParseRagdollAnimatedFriction(ragdollanimatedfriction_t*, IVPhysicsKeyHandler*)
t CVPhysicsParse::Finished()
t CVPhysicsParse::NextBlock()
t CVPhysicsParse::SkipBlock()
t CVPhysicsParse::CVPhysicsParse(char const*)
t CVPhysicsParse::CVPhysicsParse(char const*)
t CVPhysicsParse::~CVPhysicsParse()
t CVPhysicsParse::~CVPhysicsParse()
t CVPhysicsParse::~CVPhysicsParse()
t IPhysicsObject::~IPhysicsObject()
t IPhysicsObject::~IPhysicsObject()
t IPhysicsObject::~IPhysicsObject()
t IPhysicsSpring::~IPhysicsSpring()
t IPhysicsSpring::~IPhysicsSpring()
t IPhysicsSpring::~IPhysicsSpring()
t IVP_Car_System::calc_ackerman_angle(float, float, float)
t IVP_Car_System::event_object_deleted(IVP_Event_Object*)
t IVP_Car_System::IVP_Car_System()
t IVP_Car_System::IVP_Car_System()
t IVP_Car_System::~IVP_Car_System()
t IVP_Car_System::~IVP_Car_System()
t IVP_Car_System::~IVP_Car_System()
t IVP_Constraint::deactivate()
t IVP_Constraint::get_environment()
t IVP_Constraint::fix_rotation_axis(IVP_COORDINATE_INDEX)
t IVP_Constraint::free_rotation_axis(IVP_COORDINATE_INDEX)
t IVP_Constraint::limit_rotation_axis(IVP_COORDINATE_INDEX, float, float)
t IVP_Constraint::fix_translation_axis(IVP_COORDINATE_INDEX)
t IVP_Constraint::free_translation_axis(IVP_COORDINATE_INDEX)
t IVP_Constraint::limit_translation_axis(IVP_COORDINATE_INDEX, float, float)
t IVP_Constraint::change_fixing_point_Ros(IVP_U_Point const*)
t IVP_Constraint::get_controller_priority()
t IVP_Constraint::change_rotation_axes_Ros(IVP_U_Matrix3 const*)
t IVP_Constraint::change_max_rotation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
t IVP_Constraint::change_translation_axes_Ros(IVP_U_Matrix3 const*)
t IVP_Constraint::change_max_translation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
t IVP_Constraint::change_target_fixing_point_Ros(IVP_U_Point const*)
t IVP_Constraint::change_Aos_to_relaxe_constraint()
t IVP_Constraint::change_Ros_to_relaxe_constraint()
t IVP_Constraint::change_target_rotation_axes_Ros(IVP_U_Matrix3 const*)
t IVP_Constraint::get_associated_controlled_cores()
t IVP_Constraint::get_minimum_simulation_frequency()
t IVP_Constraint::core_is_going_to_be_deleted_event(IVP_Core*)
t IVP_Constraint::change_target_translation_axes_Ros(IVP_U_Matrix3 const*)
t IVP_Constraint::activate()
t IVP_Constraint::IVP_Constraint()
t IVP_Constraint::IVP_Constraint()
t IVP_Constraint::~IVP_Constraint()
t IVP_Constraint::~IVP_Constraint()
t IVP_Constraint::~IVP_Constraint()
t IVP_Controller::reset_time(IVP_Time)
t IVP_Controller::get_controller_name()
t IVP_Controller::get_minimum_simulation_frequency()
t IVP_Controller::core_is_going_to_be_deleted_event(IVP_Core*)
t IVP_Controller::~IVP_Controller()
t IVP_Controller::~IVP_Controller()
t IVP_Controller::~IVP_Controller()
t IVP_Extra_Info::IVP_Extra_Info()
t IVP_Extra_Info::IVP_Extra_Info()
t IVP_Merge_Core::set_radius()
t IVP_Merge_Core::place_objects()
t IVP_Merge_Core::find_main_axis()
t IVP_Merge_Core::find_mass_center()
t IVP_Merge_Core::find_damp_factors()
t IVP_Merge_Core::synchronize_motion()
t IVP_Merge_Core::check_for_unmovable_core()
t IVP_Merge_Core::calc_calc()
t IVP_Merge_Core::set_speed()
t IVP_Merge_Core::IVP_Merge_Core(IVP_Core_Merged*, IVP_Core*, IVP_Core*)
t IVP_Merge_Core::IVP_Merge_Core()
t IVP_Merge_Core::IVP_Merge_Core(IVP_Core_Merged*, IVP_Core*, IVP_Core*)
t IVP_Merge_Core::IVP_Merge_Core()
t IVP_Merge_Core::~IVP_Merge_Core()
t IVP_Merge_Core::~IVP_Merge_Core()
t IVP_OO_Watcher::get_ledges(IVP_Compact_Ledge const**)
t IVP_OO_Watcher::get_objects(IVP_Real_Object**)
t IVP_OO_Watcher::get_synapse(int)
t IVP_OO_Watcher::hull_limit_exceeded_event()
t IVP_OO_Watcher::collision_is_going_to_be_deleted_event(IVP_Collision*)
t IVP_OO_Watcher::hull_manager_is_going_to_be_deleted_event()
t IVP_OO_Watcher::IVP_OO_Watcher(IVP_Collision_Delegator*, IVP_Real_Object*, IVP_Real_Object*)
t IVP_OO_Watcher::IVP_OO_Watcher(IVP_Collision_Delegator*, IVP_Real_Object*, IVP_Real_Object*)
t IVP_OO_Watcher::~IVP_OO_Watcher()
t IVP_OO_Watcher::~IVP_OO_Watcher()
t IVP_OO_Watcher::~IVP_OO_Watcher()
t IVP_OV_Element::add_oo_collision(IVP_Collision*)
t IVP_OV_Element::add_to_hull_manager(IVP_Hull_Manager*, float)
t IVP_OV_Element::remove_oo_collision(IVP_Collision*)
t IVP_OV_Element::hull_limit_exceeded_event(IVP_Hull_Manager*, float)
t IVP_OV_Element::hull_manager_is_going_to_be_deleted_event(IVP_Hull_Manager*)
t IVP_OV_Element::get_type()
t IVP_OV_Element::IVP_OV_Element(IVP_Real_Object*)
t IVP_OV_Element::IVP_OV_Element(IVP_Real_Object*)
t IVP_OV_Element::~IVP_OV_Element()
t IVP_OV_Element::~IVP_OV_Element()
t IVP_OV_Element::~IVP_OV_Element()
t IVP_point_hash::find_point(IVP_Poly_Point*)
t IVP_point_hash::remove_point(IVP_Poly_Point*)
t IVP_point_hash::point_to_index(IVP_Poly_Point*)
t IVP_point_hash::add_point(IVP_Poly_Point*)
t IVP_point_hash::IVP_point_hash(int)
t IVP_point_hash::IVP_point_hash(int)
t IVP_point_hash::~IVP_point_hash()
t IVP_point_hash::~IVP_point_hash()
t IVP_point_hash::~IVP_point_hash()
t IVP_Poly_Point::p()
t IVP_Poly_Point::print(char const*)
t IVP_Poly_Point::point_num()
t IVP_Ray_Solver::check_ray_against_ball(IVP_Ball*)
t IVP_Ray_Solver::check_ray_against_cube(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_Ray_Solver::check_ray_against_node(IVP_OV_Node*, IVP_OV_Tree_Manager*)
t IVP_Ray_Solver::check_ray_against_object(IVP_Real_Object*)
t IVP_Ray_Solver::check_ray_against_square(float, float, IVP_U_Float_Point const*, IVP_U_Float_Point const*, int, int)
t IVP_Ray_Solver::check_ray_against_all_objects_in_sim(IVP_Environment const*)
t IVP_Ray_Solver::IVP_Ray_Solver(IVP_Ray_Solver_Template const*)
t IVP_Ray_Solver::IVP_Ray_Solver(IVP_Ray_Solver_Template const*)
t IVP_Ray_Solver::~IVP_Ray_Solver()
t IVP_Ray_Solver::~IVP_Ray_Solver()
t IVP_Ray_Solver::~IVP_Ray_Solver()
t IVP_Synapse_OO::init_synapse_oo(IVP_OO_Watcher*, IVP_Real_Object*)
t IVP_Synapse_OO::hull_limit_exceeded_event(IVP_Hull_Manager*, float)
t IVP_Synapse_OO::hull_manager_is_going_to_be_deleted_event(IVP_Hull_Manager*)
t IVP_Synapse_OO::get_type()
t IVP_Synapse_OO::IVP_Synapse_OO()
t IVP_Synapse_OO::IVP_Synapse_OO()
t IVP_Synapse_OO::~IVP_Synapse_OO()
t IVP_Synapse_OO::~IVP_Synapse_OO()
t IVP_Synapse_OO::~IVP_Synapse_OO()
t IVP_Tetra_Edge::p()
t IVP_Tetra_Edge::print(char const*)
t IVP_Time_Event::simulate_time_event(IVP_Environment*)
t IVP_Time_Event::IVP_Time_Event()
t IVP_Time_Event::IVP_Time_Event()
t IVP_U_Min_Hash::remove_min()
t IVP_U_Min_Hash::change_value(void*, float)
t IVP_U_Min_Hash::find_min_elem()
t IVP_U_Min_Hash::find_min_value()
t IVP_U_Min_Hash::min_added_at_index(IVP_U_Min_Hash_Elem*, int)
t IVP_U_Min_Hash::min_removed_at_index(IVP_U_Min_Hash_Elem*, int)
t IVP_U_Min_Hash::add(void*, float)
t IVP_U_Min_Hash::remove(void*)
t IVP_U_Min_Hash::IVP_U_Min_Hash(int)
t IVP_U_Min_Hash::IVP_U_Min_Hash(int)
t IVP_U_Min_Hash::~IVP_U_Min_Hash()
t IVP_U_Min_Hash::~IVP_U_Min_Hash()
t IVP_U_Min_List::has_elements()
t IVP_U_Min_List::find_min_elem()
t IVP_U_Min_List::find_min_value()
t IVP_U_Min_List::prefetch0_minlist()
t IVP_U_Min_List::prefetch1_minlist()
t IVP_U_Min_List::remove_minlist_elem(unsigned int)
t IVP_U_Min_List::add(void*, float)
t IVP_U_Min_List::check()
t IVP_U_Min_List::IVP_U_Min_List(int)
t IVP_U_Min_List::IVP_U_Min_List(int)
t IVP_U_Min_List::~IVP_U_Min_List()
t IVP_U_Min_List::~IVP_U_Min_List()
t IVP_U_Straight::calc_intersect_with(IVP_U_Straight const*, IVP_U_Point*, float*)
t IVP_U_Straight::set(IVP_U_Point const*, IVP_U_Point const*)
t IVP_U_Straight::set(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_U_Straight::IVP_U_Straight(IVP_U_Point const*, IVP_U_Point const*)
t IVP_U_Straight::IVP_U_Straight(IVP_U_Point const*, IVP_U_Point const*)
t P_Sur_2D_Point::P_Sur_2D_Point(int)
t P_Sur_2D_Point::P_Sur_2D_Point(int)
t P_Sur_2D_Point::~P_Sur_2D_Point()
t P_Sur_2D_Point::~P_Sur_2D_Point()
t CCollisionQuery::ConvexCount()
t CCollisionQuery::GetGameData(int)
t CCollisionQuery::TriangleCount(int)
t CCollisionQuery::GetTriangleVerts(int, int, Vector*)
t CCollisionQuery::SetTriangleVerts(int, int, Vector const*)
t CCollisionQuery::GetTriangleMaterialIndex(int, int)
t CCollisionQuery::SetTriangleMaterialIndex(int, int, int)
t CCollisionQuery::Triangle(IVP_Compact_Ledge*, int)
t CCollisionQuery::CCollisionQuery(CPhysCollide*)
t CCollisionQuery::CCollisionQuery(CPhysCollide*)
t CCollisionQuery::~CCollisionQuery()
t CCollisionQuery::~CCollisionQuery()
t CCollisionQuery::~CCollisionQuery()
t CDragController::get_controller_name()
t CDragController::get_controller_priority()
t CDragController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t CDragController::~CDragController()
t CDragController::~CDragController()
t CDragController::~CDragController()
t CObjectPairHash::AddObjectPair(void*, void*)
t CObjectPairHash::IsObjectInHash(void*)
t CObjectPairHash::RemoveObjectPair(void*, void*)
t CObjectPairHash::IsObjectPairInHash(void*, void*)
t CObjectPairHash::GetPairListForObject(void*, int, void**)
t CObjectPairHash::GetPairCountForObject(void*)
t CObjectPairHash::RemoveAllPairsForObject(void*)
t CObjectPairHash::~CObjectPairHash()
t CObjectPairHash::~CObjectPairHash()
t CObjectPairHash::~CObjectPairHash()
t CTier1AppSystem<IPhysics, 0>::Disconnect()
t CTier1AppSystem<IPhysics, 0>::Init()
t CTier1AppSystem<IPhysics, 0>::Connect(void* (*)(char const*, int*))
t CTier1AppSystem<IPhysics, 0>::GetTier()
t CTier1AppSystem<IPhysics, 0>::Shutdown()
t CUtlBinaryBlock::Set(void const*, int)
t CUtlBinaryBlock::SetLength(int)
t CUtlBinaryBlock::operator=(CUtlBinaryBlock const&)
t CUtlBinaryBlock::CUtlBinaryBlock(int, int)
t CUtlBinaryBlock::CUtlBinaryBlock(void const*, int)
t CUtlBinaryBlock::CUtlBinaryBlock(void*, int, int)
t CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&)
t CUtlBinaryBlock::CUtlBinaryBlock(int, int)
t CUtlBinaryBlock::CUtlBinaryBlock(void const*, int)
t CUtlBinaryBlock::CUtlBinaryBlock(void*, int, int)
t CUtlBinaryBlock::CUtlBinaryBlock(CUtlBinaryBlock const&)
t CUtlSymbolTable::CTree::~CTree()
t CUtlSymbolTable::CTree::~CTree()
t CUtlSymbolTable::AddString(char const*)
t CUtlSymbolTable::RemoveAll()
t CUtlSymbolTable::CUtlSymbolTable(int, int, bool)
t CUtlSymbolTable::CUtlSymbolTable(int, int, bool)
t CUtlSymbolTable::~CUtlSymbolTable()
t CUtlSymbolTable::~CUtlSymbolTable()
t hk_Linear_Query::initialize(hk_Rigid_Body_Core*, hk_Rigid_Body_Core*, float __vector(4), float __vector(4))
t hk_Linear_Query::initialize(hk_Rigid_Body_Core*, hk_Rigid_Body_Core*, float __vector, float __vector)
t hk_Vector3_Util::random_vec()
t hk_Vector3_Util::perp_vec(hk_Vector3 const&)
t ICollisionQuery::~ICollisionQuery()
t ICollisionQuery::~ICollisionQuery()
t ICollisionQuery::~ICollisionQuery()
t IVP_Core_Merged::set_by_merge(IVP_Core*, IVP_Core*)
t IVP_Core_Merged::IVP_Core_Merged(IVP_Real_Object*)
t IVP_Core_Merged::IVP_Core_Merged(IVP_Core*, IVP_Core*)
t IVP_Core_Merged::IVP_Core_Merged(IVP_Real_Object*)
t IVP_Core_Merged::IVP_Core_Merged(IVP_Core*, IVP_Core*)
t IVP_Environment::reset_time()
t IVP_Environment::create_ball(IVP_Template_Ball const*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
t IVP_Environment::do_d_events()
t IVP_Environment::get_gravity()
t IVP_Environment::set_gravity(IVP_U_Point*)
t IVP_Environment::create_force(IVP_Template_Force*)
t IVP_Environment::simulate_psi(IVP_Time)
t IVP_Environment::create_rotmot(IVP_Template_Rot_Mot*)
t IVP_Environment::create_spring(IVP_Template_Spring*)
t IVP_Environment::create_torque(IVP_Template_Torque*)
t IVP_Environment::get_env_state()
t IVP_Environment::merge_objects(IVP_U_Vector<IVP_Real_Object>*)
t IVP_Environment::create_polygon(IVP_SurfaceManager*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
t IVP_Environment::fire_event_PSI()
t IVP_Environment::simulate_dtime(float)
t IVP_Environment::simulate_until(IVP_Time)
t IVP_Environment::add_draw_vector(IVP_U_Point const*, IVP_U_Float_Point const*, char const*, int)
t IVP_Environment::add_revive_core(IVP_Core*)
t IVP_Environment::add_listener_PSI(IVP_Listener_PSI*)
t IVP_Environment::get_current_time()
t IVP_Environment::get_root_cluster()
t IVP_Environment::get_sim_unit_mem()
t IVP_Environment::get_wakeup_count()
t IVP_Environment::revive_cores_PSI()
t IVP_Environment::set_current_time(IVP_Time)
t IVP_Environment::create_check_dist(IVP_Template_Check_Dist*)
t IVP_Environment::create_constraint(IVP_Template_Constraint const*)
t IVP_Environment::create_stabilizer(IVP_Template_Stabilizer*)
t IVP_Environment::create_suspension(IVP_Template_Suspension*)
t IVP_Environment::get_next_PSI_time()
t IVP_Environment::get_delta_PSI_time()
t IVP_Environment::get_freeze_manager()
t IVP_Environment::get_short_term_mem()
t IVP_Environment::remove_revive_core(IVP_Core*)
t IVP_Environment::set_delta_PSI_time(float)
t IVP_Environment::simulate_time_step(float)
t IVP_Environment::remove_listener_PSI(IVP_Listener_PSI*)
t IVP_Environment::get_current_time_code()
t IVP_Environment::get_statistic_manager()
t IVP_Environment::get_gravity_controller()
t IVP_Environment::get_inv_delta_PSI_time()
t IVP_Environment::get_performancecounter()
t IVP_Environment::create_controller_motion(IVP_Real_Object*, IVP_Template_Controller_Motion const*)
t IVP_Environment::delete_draw_vector_debug()
t IVP_Environment::fire_event_object_frozen(IVP_Event_Object*)
t IVP_Environment::fire_event_pre_collision(IVP_Event_Collision*)
t IVP_Environment::get_old_time_of_last_PSI()
t IVP_Environment::fire_event_object_created(IVP_Event_Object*)
t IVP_Environment::fire_event_object_deleted(IVP_Event_Object*)
t IVP_Environment::fire_event_object_revived(IVP_Event_Object*)
t IVP_Environment::fire_event_post_collision(IVP_Event_Collision*)
t IVP_Environment::add_listener_object_global(IVP_Listener_Object*)
t IVP_Environment::get_integrated_energy_damp()
t IVP_Environment::add_listener_object_private(IVP_Real_Object*, IVP_Listener_Object*)
t IVP_Environment::fire_event_friction_created(IVP_Event_Friction*)
t IVP_Environment::fire_event_friction_deleted(IVP_Event_Friction*)
t IVP_Environment::get_betterstatisticsmanager()
t IVP_Environment::must_perform_movement_check()
t IVP_Environment::simulate_variable_time_step(float)
t IVP_Environment::fire_event_constraint_broken(IVP_Constraint*)
t IVP_Environment::fire_event_constraint_broken(hk_Breakable_Constraint*)
t IVP_Environment::force_psi_on_next_simulation()
t IVP_Environment::add_listener_collision_global(IVP_Listener_Collision*)
t IVP_Environment::remove_listener_object_global(IVP_Listener_Object*)
t IVP_Environment::add_listener_collision_private(IVP_Real_Object*, IVP_Listener_Collision*)
t IVP_Environment::add_listener_constraint_global(IVP_Listener_Constraint*)
t IVP_Environment::get_global_collision_tolerance()
t IVP_Environment::install_listener_object_global(IVP_Listener_Object*)
t IVP_Environment::remove_listener_object_private(IVP_Real_Object*, IVP_Listener_Object*)
t IVP_Environment::set_global_collision_tolerance(float, float)
t IVP_Environment::fire_event_friction_pair_created(IVP_Friction_Core_Pair*)
t IVP_Environment::fire_event_friction_pair_deleted(IVP_Friction_Core_Pair*)
t IVP_Environment::remove_listener_collision_global(IVP_Listener_Collision*)
t IVP_Environment::remove_listener_collision_private(IVP_Real_Object*, IVP_Listener_Collision*)
t IVP_Environment::remove_listener_constraint_global(IVP_Listener_Constraint*)
t IVP_Environment::fire_object_is_removed_from_collision_detection(IVP_Real_Object*)
t IVP_Environment::IVP_Environment(IVP_Environment_Manager*, IVP_Application_Environment*, char const*, unsigned int)
t IVP_Environment::IVP_Environment(IVP_Environment_Manager*, IVP_Application_Environment*, char const*, unsigned int)
t IVP_Environment::~IVP_Environment()
t IVP_Environment::~IVP_Environment()
t IVP_Inline_Math::save_acosf(float)
t IVP_Inline_Math::approx5_cos(float)
t IVP_Inline_Math::approx5_sin(float)
t IVP_Inline_Math::isqrt_float(float)
t IVP_Inline_Math::isqrt_double(float)
t IVP_Inline_Math::fast_approx_asin(float)
t IVP_Inline_Math::upper_limit_asin(float)
t IVP_Inline_Math::invert_2x2_matrix(float, float, float, float, float*, float*, float*, float*)
t IVP_Inline_Math::fast_anywhere_asin(float)
t IVP_Inline_Math::cosd(float)
t IVP_Inline_Math::sind(float)
t IVP_Inline_Math::acosd(float)
t IVP_Inline_Math::asind(float)
t IVP_Inline_Math::atand(float)
t IVP_Inline_Math::fabsd(float)
t IVP_Inline_Math::sqrtd(float)
t IVP_Inline_Math::atan2d(float, float)
t IVP_Inline_Math::ivp_cosf(float)
t IVP_Inline_Math::ivp_expf(float)
t IVP_Inline_Math::ivp_sinf(float)
t IVP_Inline_Math::fast_asin(float)
t IVP_Inline_Math::int_div_2(int)
t IVP_Inline_Math::ivp_sqrtf(float)
t IVP_Real_Object::reset_time(IVP_Time)
t IVP_Real_Object::set_pinned(IVP_BOOL)
t IVP_Real_Object::change_mass(float)
t IVP_Real_Object::insert_anchor(IVP_Anchor*)
t IVP_Real_Object::remove_anchor(IVP_Anchor*)
t IVP_Real_Object::set_is_debris(IVP_BOOL)
t IVP_Real_Object::get_ov_element()
t IVP_Real_Object::delete_silently()
t IVP_Real_Object::get_cache_object()
t IVP_Real_Object::get_first_anchor()
t IVP_Real_Object::get_hull_manager()
t IVP_Real_Object::init_object_core(IVP_Environment*, IVP_Template_Real_Object const*)
t IVP_Real_Object::set_extra_radius(float)
t IVP_Real_Object::do_radar_checking(IVP_Radar*)
t IVP_Real_Object::convert_to_phantom(IVP_Template_Phantom const*)
t IVP_Real_Object::disable_simulation()
t IVP_Real_Object::get_movement_state()
t IVP_Real_Object::recalc_core_radius()
t IVP_Real_Object::set_movement_state(IVP_Movement_Type)
t IVP_Real_Object::add_listener_object(IVP_Listener_Object*)
t IVP_Real_Object::async_push_object_ws(IVP_U_Point const*, IVP_U_Float_Point const*)
t IVP_Real_Object::calc_m_core_f_object(IVP_U_Matrix*)
t IVP_Real_Object::ensure_in_simulation()
t IVP_Real_Object::change_unmovable_flag(IVP_BOOL)
t IVP_Real_Object::get_all_near_mindists()
t IVP_Real_Object::unlink_contact_points(IVP_BOOL)
t IVP_Real_Object::add_listener_collision(IVP_Listener_Collision*)
t IVP_Real_Object::get_controller_phantom()
t IVP_Real_Object::remove_listener_object(IVP_Listener_Object*)
t IVP_Real_Object::disable_simulation_list(IVP_Environment*, IVP_Real_Object**, int)
t IVP_Real_Object::get_first_exact_synapse()
t IVP_Real_Object::set_new_m_object_f_core(IVP_U_Matrix const*)
t IVP_Real_Object::set_new_surface_manager(IVP_SurfaceManager*)
t IVP_Real_Object::ensure_in_simulation_now()
t IVP_Real_Object::get_cache_object_no_lock()
t IVP_Real_Object::recheck_collision_filter()
t IVP_Real_Object::recompile_values_changed()
t IVP_Real_Object::async_add_speed_object_ws(IVP_U_Float_Point const*)
t IVP_Real_Object::clear_internal_references()
t IVP_Real_Object::delete_and_check_vicinity()
t IVP_Real_Object::remove_listener_collision(IVP_Listener_Collision*)
t IVP_Real_Object::change_fast_piling_allowed(IVP_BOOL)
t IVP_Real_Object::enable_collision_detection(IVP_BOOL)
t IVP_Real_Object::force_grow_friction_system()
t IVP_Real_Object::get_first_friction_synapse()
t IVP_Real_Object::recompile_material_changed()
t IVP_Real_Object::set_new_quat_object_f_core(IVP_U_Quat const*, IVP_U_Point const*)
t IVP_Real_Object::beam_object_to_new_position(IVP_U_Quat const*, IVP_U_Point const*, IVP_BOOL)
t IVP_Real_Object::revive_object_for_simulation()
t IVP_Real_Object::async_add_rot_speed_object_cs(IVP_U_Float_Point const*)
t IVP_Real_Object::is_collision_detection_enabled()
t IVP_Real_Object::revive_nearest_objects_grow_fs()
t IVP_Real_Object::recalc_exact_mindists_of_object()
t IVP_Real_Object::unlink_contact_points_for_object(IVP_Real_Object*)
t IVP_Real_Object::recalc_invalid_mindists_of_object()
t IVP_Real_Object::get_collision_check_reference_count()
t IVP_Real_Object::update_exact_mindist_events_of_object()
t IVP_Real_Object::IVP_Real_Object(IVP_Cluster*, IVP_SurfaceManager*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
t IVP_Real_Object::IVP_Real_Object(IVP_Cluster*, IVP_SurfaceManager*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
t IVP_Real_Object::~IVP_Real_Object()
t IVP_Real_Object::~IVP_Real_Object()
t IVP_Real_Object::~IVP_Real_Object()
t IVP_Tetra_Point::p()
t IVP_Tetra_Point::init(IVP_Tetra_Intrude*)
t IVP_Tetra_Point::print(char const*)
t IVP_U_BigVector<IVP_Compact_Ledge>::~IVP_U_BigVector()
t IVP_U_BigVector<IVP_Compact_Ledge>::~IVP_U_BigVector()
t IVP_VHash_Store::change_elem(void*, void*)
t IVP_VHash_Store::remove_elem(void*)
t IVP_VHash_Store::remove_elem(void*, unsigned int)
t IVP_VHash_Store::untouch_all()
t IVP_VHash_Store::touch_element(void*, unsigned int)
t IVP_VHash_Store::check()
t IVP_VHash_Store::print()
t IVP_VHash_Store::rehash(int)
t IVP_VHash_Store::add_elem(void*, void*)
t IVP_VHash_Store::add_elem(void*, void*, int)
t IVP_VHash_Store::find_elem(void*)
t IVP_VHash_Store::find_elem(void*, unsigned int)
t IVP_VHash_Store::IVP_VHash_Store(int)
t IVP_VHash_Store::IVP_VHash_Store(IVP_VHash_Store_Elem*, int)
t IVP_VHash_Store::IVP_VHash_Store(int)
t IVP_VHash_Store::IVP_VHash_Store(IVP_VHash_Store_Elem*, int)
t IVP_VHash_Store::~IVP_VHash_Store()
t IVP_VHash_Store::~IVP_VHash_Store()
t vehicleparams_t::GetBaseMap()
d vehicleparams_t::m_DataMap
t CCollisionSolver::inter_penetration(IVP_Mindist*, IVP_Real_Object*, IVP_Real_Object*, float)
t CCollisionSolver::max_velocity_exceeded(IVP_Anomaly_Limits*, IVP_Core*, IVP_U_Float_Point*)
t CCollisionSolver::environment_will_be_deleted(IVP_Environment*)
t CCollisionSolver::max_collision_checks_exceeded(int)
t CCollisionSolver::max_contacts_exceeded_check_freezing(IVP_Core**, int)
t CCollisionSolver::check_objects_for_collision_detection(IVP_Real_Object*, IVP_Real_Object*)
t CCollisionSolver::max_collisions_exceeded_check_freezing(IVP_Anomaly_Limits*, IVP_Core*)
t CCollisionSolver::~CCollisionSolver()
t CCollisionSolver::~CCollisionSolver()
t CCollisionSolver::~CCollisionSolver()
t CDataManagerBase::TargetSize()
t CDataManagerBase::MarkAsStale(memhandle_t__*)
t CDataManagerBase::CreateHandle(bool)
t CDataManagerBase::LockResource(memhandle_t__*)
t CDataManagerBase::TouchByIndex(unsigned short)
t CDataManagerBase::AvailableSize()
t CDataManagerBase::BreakAllLocks()
t CDataManagerBase::SetTargetSize(unsigned int)
t CDataManagerBase::TouchResource(memhandle_t__*)
t CDataManagerBase::EnsureCapacity(unsigned int)
t CDataManagerBase::UnlockResource(memhandle_t__*)
t CDataManagerBase::DestroyResource(memhandle_t__*)
t CDataManagerBase::FlushAllUnlocked()
t CDataManagerBase::GetLRUHandleList(CUtlVector<memhandle_t__*, CUtlMemory<memhandle_t__*, int> >&)
t CDataManagerBase::FlushToTargetSize()
t CDataManagerBase::GetForFreeByIndex(unsigned short)
t CDataManagerBase::GetLockHandleList(CUtlVector<memhandle_t__*, CUtlMemory<memhandle_t__*, int> >&)
t CDataManagerBase::NotifySizeChanged(memhandle_t__*, unsigned int, unsigned int)
t CDataManagerBase::GetResource_NoLock(memhandle_t__*)
t CDataManagerBase::StoreResourceInHandle(unsigned short, void*, unsigned int)
t CDataManagerBase::LockResourceReturnCount(int*, memhandle_t__*)
t CDataManagerBase::GetResource_NoLockNoLRUTouch(memhandle_t__*)
t CDataManagerBase::Lock()
t CDataManagerBase::Purge(unsigned int)
t CDataManagerBase::Unlock()
t CDataManagerBase::TryLock()
t CDataManagerBase::FlushAll()
t CDataManagerBase::ToHandle(unsigned short)
t CDataManagerBase::UsedSize()
t CDataManagerBase::BreakLock(memhandle_t__*)
t CDataManagerBase::CDataManagerBase(unsigned int)
t CDataManagerBase::CDataManagerBase(unsigned int)
t CDataManagerBase::~CDataManagerBase()
t CDataManagerBase::~CDataManagerBase()
t CDataManagerBase::~CDataManagerBase()
t CDefaultAccessor::RegisterConCommandBase(ConCommandBase*)
t CDllDemandLoader::GetFactory()
t CDllDemandLoader::Unload()
t CDllDemandLoader::CDllDemandLoader(char const*)
t CDllDemandLoader::CDllDemandLoader(char const*)
t CDllDemandLoader::~CDllDemandLoader()
t CDllDemandLoader::~CDllDemandLoader()
t CDllDemandLoader::~CDllDemandLoader()
t CPhysics_Airboat::IsBoosting()
t CPhysics_Airboat::do_steering(float, bool)
t CPhysics_Airboat::InitAirboat(IVP_Template_Car_System const*)
t CPhysics_Airboat::PreRaycasts(IVP_Ray_Solver_Template*, IVP_U_Matrix const*, IVP_Raycast_Airboat_Impact*)
t CPhysics_Airboat::PostRaycasts(IVP_Ray_Solver_Template*, IVP_U_Matrix const*, IVP_Raycast_Airboat_Impact*)
t CPhysics_Airboat::get_skid_info(IVP_Wheel_Skid_Info*)
t CPhysics_Airboat::GetWaterDepth(Ray_t*, IPhysicsObject*)
t CPhysics_Airboat::get_body_speed(IVP_COORDINATE_INDEX)
t CPhysics_Airboat::set_powerslide(float, float)
t CPhysics_Airboat::update_booster(float)
t CPhysics_Airboat::update_throttle(float)
t CPhysics_Airboat::activate_booster(float, float, float)
t CPhysics_Airboat::DoSimulationDrag(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
t CPhysics_Airboat::get_wheel_torque(IVP_POS_WHEEL)
t CPhysics_Airboat::SetWheelFriction(int, float)
t CPhysics_Airboat::do_steering_wheel(IVP_POS_WHEEL, float)
t CPhysics_Airboat::get_booster_delay()
t CPhysics_Airboat::InitRaycastCarAxes(IVP_Template_Car_System const*)
t CPhysics_Airboat::InitRaycastCarBody(IVP_Template_Car_System const*)
t CPhysics_Airboat::change_wheel_torque(IVP_POS_WHEEL, float)
t CPhysics_Airboat::DoSimulationGravity(IVP_Event_Sim*)
t CPhysics_Airboat::DoSimulationTurbine(IVP_Event_Sim*)
t CPhysics_Airboat::get_controller_name()
t CPhysics_Airboat::UpdateAirborneState(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
t CPhysics_Airboat::change_spring_length(IVP_POS_WHEEL, float)
t CPhysics_Airboat::do_raycasts_gameside(int, IVP_Ray_Solver_Template*, IVP_Raycast_Airboat_Impact*)
t CPhysics_Airboat::DoSimulationPontoons(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
t CPhysics_Airboat::DoSimulationSteering(IVP_Event_Sim*)
t CPhysics_Airboat::InitRaycastCarWheels(IVP_Template_Car_System const*)
t CPhysics_Airboat::change_body_downforce(float)
t CPhysics_Airboat::change_max_body_force(IVP_POS_WHEEL, float)
t CPhysics_Airboat::GetCarSystemDebugData(IVP_CarSystemDebugData_t&)
t CPhysics_Airboat::pre_raycasts_gameside(int, IVP_Ray_Solver_Template*, Ray_t*, IVP_Raycast_Airboat_Impact*)
t CPhysics_Airboat::SetCarSystemDebugData(IVP_CarSystemDebugData_t const&)
t CPhysics_Airboat::change_spring_constant(IVP_POS_WHEEL, float)
t CPhysics_Airboat::get_booster_time_to_go()
t CPhysics_Airboat::update_wheel_positions()
t CPhysics_Airboat::change_fast_turn_factor(float)
t CPhysics_Airboat::change_spring_dampening(IVP_POS_WHEEL, float)
t CPhysics_Airboat::get_controller_priority()
t CPhysics_Airboat::get_orig_axles_distance()
t CPhysics_Airboat::change_friction_of_wheel(IVP_POS_WHEEL, float)
t CPhysics_Airboat::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t CPhysics_Airboat::set_booster_acceleration(float)
t CPhysics_Airboat::change_spring_pre_tension(IVP_POS_WHEEL, float)
t CPhysics_Airboat::CountSurfaceContactPoints(IVP_Raycast_Airboat_Impact*)
t CPhysics_Airboat::DoSimulationPontoonsWater(IVP_Raycast_Airboat_Wheel*, IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
t CPhysics_Airboat::InitRaycastCarEnvironment(IVP_Environment*, IVP_Template_Car_System const*)
t CPhysics_Airboat::update_body_countertorque()
t CPhysics_Airboat::change_stabilizer_constant(IVP_POS_AXIS, float)
t CPhysics_Airboat::DoSimulationPontoonsGround(IVP_Raycast_Airboat_Wheel*, IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
t CPhysics_Airboat::get_wheel_angular_velocity(IVP_POS_WHEEL)
t CPhysics_Airboat::DoSimulationKeepUprightRoll(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
t CPhysics_Airboat::PerformFrictionNotification(float, float, int, IPhysicsCollisionData*)
t CPhysics_Airboat::ComputeFrontPontoonWaveNoise(int, float)
t CPhysics_Airboat::DoSimulationKeepUprightPitch(IVP_Raycast_Airboat_Impact*, IVP_Event_Sim*)
t CPhysics_Airboat::get_orig_front_wheel_distance()
t CPhysics_Airboat::get_associated_controlled_cores()
t CPhysics_Airboat::core_is_going_to_be_deleted_event(IVP_Core*)
t CPhysics_Airboat::change_spring_dampening_compression(IVP_POS_WHEEL, float)
t CPhysics_Airboat::get_axle(IVP_POS_AXIS)
t CPhysics_Airboat::GetWheel(int)
t CPhysics_Airboat::fix_wheel(IVP_POS_WHEEL, IVP_BOOL)
t CPhysics_Airboat::get_wheel(IVP_POS_WHEEL)
t CPhysics_Airboat::CPhysics_Airboat(IVP_Environment*, IVP_Template_Car_System const*, IPhysicsGameTrace*)
t CPhysics_Airboat::CPhysics_Airboat(IVP_Environment*, IVP_Template_Car_System const*, IPhysicsGameTrace*)
t CPhysics_Airboat::~CPhysics_Airboat()
t CPhysics_Airboat::~CPhysics_Airboat()
t CPhysics_Airboat::~CPhysics_Airboat()
t IVP_Cache_Object::get_core_pos()
t IVP_Cache_Object::remove_reference()
t IVP_Cache_Object::update_cache_object()
d IVP_Compact_Edge::next_table
d IVP_Compact_Edge::prev_table
t IVP_Compact_Edge::get_opposite()
t IVP_Compact_Edge::set_is_virtual(unsigned int)
t IVP_Compact_Edge::set_opposite_index(int)
t IVP_Compact_Edge::set_start_point_index(int)
t IVP_Compact_Edge::get_next()
t IVP_Compact_Edge::get_prev()
t IVP_Compact_Edge::byte_swap()
t IVP_Compact_Edge::IVP_Compact_Edge()
t IVP_Compact_Edge::IVP_Compact_Edge()
t IVP_Hull_Manager::reset_time(IVP_Time)
t IVP_Hull_Manager::reset_times()
t IVP_Hull_Manager::delete_hull_manager()
t IVP_Hull_Manager::get_synapse_check_count(IVP_Environment*)
t IVP_Hull_Manager::too_many_synapses_checked_error_get_additional(IVP_Environment*, int)
t IVP_Mindist_Base::get_ledges(IVP_Compact_Ledge const**)
t IVP_Mindist_Base::get_objects(IVP_Real_Object**)
t IVP_Mindist_Base::get_mindist_synapse(int)
t IVP_Mindist_Base::IVP_Mindist_Base(IVP_Collision_Delegator*)
t IVP_Mindist_Base::IVP_Mindist_Base(IVP_Collision_Delegator*)
t IVP_Mindist_Base::~IVP_Mindist_Base()
t IVP_Mindist_Base::~IVP_Mindist_Base()
t IVP_Mindist_Base::~IVP_Mindist_Base()
t IVP_ov_tree_hash::node_to_index(IVP_OV_Node*)
t IVP_ov_tree_hash::~IVP_ov_tree_hash()
t IVP_ov_tree_hash::~IVP_ov_tree_hash()
t IVP_ov_tree_hash::~IVP_ov_tree_hash()
t IVP_Poly_Surface::get_surface_index()
t IVP_Poly_Surface::set(IVP_Template_Surface*, IVP_Object_Polygon_Tetra*)
t IVP_Synapse_Real::get_mindist()
t IVP_Synapse_Real::init_synapse(IVP_Mindist*, IVP_Real_Object*, IVP_Compact_Edge const*, IVP_SYNAPSE_POLYGON_STATUS)
t IVP_Synapse_Real::update_synapse(IVP_Compact_Edge const*, IVP_SYNAPSE_POLYGON_STATUS)
t IVP_Synapse_Real::get_hull_manager()
t IVP_Synapse_Real::print()
t IVP_Synapse_Real::get_next()
t IVP_Synapse_Real::get_prev()
t IVP_Synapse_Real::IVP_Synapse_Real()
t IVP_Synapse_Real::IVP_Synapse_Real()
t IVP_Synapse_Real::~IVP_Synapse_Real()
t IVP_Synapse_Real::~IVP_Synapse_Real()
t IVP_Synapse_Real::~IVP_Synapse_Real()
t IVP_Time_Event_D::simulate_time_event(IVP_Environment*)
t IVP_Time_Event_D::IVP_Time_Event_D(IVP_Time)
t IVP_Time_Event_D::IVP_Time_Event_D(IVP_Time)
t IVP_Time_Event_N::simulate_time_event(IVP_Environment*)
t IVP_Time_Event_N::IVP_Time_Event_N(IVP_Time)
t IVP_Time_Event_N::IVP_Time_Event_N(IVP_Time)
t IVP_Time_Manager::event_loop(IVP_Environment*, IVP_Time)
t IVP_Time_Manager::reset_time(IVP_Time)
t IVP_Time_Manager::insert_event(IVP_Time_Event*, IVP_Time)
t IVP_Time_Manager::remove_event(IVP_Time_Event*)
t IVP_Time_Manager::update_event(IVP_Time_Event*, IVP_Time)
t IVP_Time_Manager::get_next_event(IVP_Time)
t IVP_Time_Manager::get_next_event()
t IVP_Time_Manager::get_event_count()
t IVP_Time_Manager::env_set_current_time(IVP_Environment*, IVP_Time)
t IVP_Time_Manager::simulate_variable_time_step(IVP_Environment*, float)
t IVP_Time_Manager::IVP_Time_Manager()
t IVP_Time_Manager::IVP_Time_Manager()
t IVP_Time_Manager::~IVP_Time_Manager()
t IVP_Time_Manager::~IVP_Time_Manager()
t IVP_U_Active_Add::active_float_changed(IVP_U_Active_Float*)
t IVP_U_Active_Add::print()
t IVP_U_Active_Add::IVP_U_Active_Add(char const*, IVP_U_Active_Float*, IVP_U_Active_Float*)
t IVP_U_Active_Add::IVP_U_Active_Add(char const*, IVP_U_Active_Float*, IVP_U_Active_Float*)
t IVP_U_Active_Add::~IVP_U_Active_Add()
t IVP_U_Active_Add::~IVP_U_Active_Add()
t IVP_U_Active_Add::~IVP_U_Active_Add()
t IVP_U_Active_Int::add_dependency(IVP_U_Active_Int_Listener*)
t IVP_U_Active_Int::give_int_value()
t IVP_U_Active_Int::update_derived()
t IVP_U_Active_Int::remove_dependency(IVP_U_Active_Int_Listener*)
t IVP_U_Active_Int::IVP_U_Active_Int(char const*)
t IVP_U_Active_Int::IVP_U_Active_Int(char const*)
t IVP_U_Active_Int::~IVP_U_Active_Int()
t IVP_U_Active_Int::~IVP_U_Active_Int()
t IVP_U_Active_Int::~IVP_U_Active_Int()
t IVP_U_Active_Sub::active_float_changed(IVP_U_Active_Float*)
t IVP_U_Active_Sub::print()
t IVP_U_Active_Sub::IVP_U_Active_Sub(char const*, IVP_U_Active_Float*, IVP_U_Active_Float*)
t IVP_U_Active_Sub::IVP_U_Active_Sub(char const*, IVP_U_Active_Float*, IVP_U_Active_Float*)
t IVP_U_Active_Sub::~IVP_U_Active_Sub()
t IVP_U_Active_Sub::~IVP_U_Active_Sub()
t IVP_U_Active_Sub::~IVP_U_Active_Sub()
t IVP_U_Float_Quat::set(IVP_U_Quat const*)
t IVP_U_Float_Quat::byte_swap()
t IVP_U_Set_Active<IVP_Real_Object>::~IVP_U_Set_Active()
t IVP_U_Set_Active<IVP_Real_Object>::~IVP_U_Set_Active()
t IVP_U_Set_Active<IVP_Mindist_Base>::~IVP_U_Set_Active()
t IVP_U_Set_Active<IVP_Mindist_Base>::~IVP_U_Set_Active()
t IVP_U_Set_Active<IVP_Core>::~IVP_U_Set_Active()
t IVP_U_Set_Active<IVP_Core>::~IVP_U_Set_Active()
t CAlignedNewDelete<16, aligned_tmp_t>::operator delete(void*)
t CBoyerMooreSearch::Search(unsigned char const*, int)
t CBoyerMooreSearch::CBoyerMooreSearch(unsigned char const*, int)
t CBoyerMooreSearch::CBoyerMooreSearch(unsigned char const*, int)
t CBuoyancyAttacher::get_parameters_per_core(IVP_Core*)
t CBuoyancyAttacher::CBuoyancyAttacher(IVP_Template_Buoyancy&, IVP_U_Set_Active<IVP_Core>*, IVP_Liquid_Surface_Descriptor*)
t CBuoyancyAttacher::CBuoyancyAttacher(IVP_Template_Buoyancy&, IVP_U_Set_Active<IVP_Core>*, IVP_Liquid_Surface_Descriptor*)
t CBuoyancyAttacher::~CBuoyancyAttacher()
t CBuoyancyAttacher::~CBuoyancyAttacher()
t CBuoyancyAttacher::~CBuoyancyAttacher()
t CFrictionSnapshot::GetMaterial(int)
t CFrictionSnapshot::GetNormalForce()
t CFrictionSnapshot::GetContactPoint(Vector&)
t CFrictionSnapshot::GetSurfaceNormal(Vector&)
t CFrictionSnapshot::NextFrictionData()
t CFrictionSnapshot::GetEnergyAbsorbed()
t CFrictionSnapshot::RecomputeFriction()
t CFrictionSnapshot::ClearFrictionForce()
t CFrictionSnapshot::SetFrictionSynapse(IVP_Synapse_Friction*)
t CFrictionSnapshot::MarkContactForDelete()
t CFrictionSnapshot::GetFrictionCoefficient()
t CFrictionSnapshot::DeleteAllMarkedContacts(bool)
t CFrictionSnapshot::IsValid()
t CFrictionSnapshot::GetObject(int)
t CFrictionSnapshot::CFrictionSnapshot(IVP_Real_Object*)
t CFrictionSnapshot::CFrictionSnapshot(IVP_Real_Object*)
t CFrictionSnapshot::~CFrictionSnapshot()
t CFrictionSnapshot::~CFrictionSnapshot()
t CFrictionSnapshot::~CFrictionSnapshot()
t CMaterialIndexOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
t CMaterialIndexOps::IsEmpty(SaveRestoreFieldInfo_t const&)
t CMaterialIndexOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
t CMaterialIndexOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
t collision_rules_t::SetDefaults(void*)
t collision_rules_t::ParseKeyValue(void*, char const*, char const*)
t CPhysicsCollision::ConvexFree(CPhysConvex*)
t CPhysicsCollision::TraceBoxAA(Ray_t const&, CPhysCollide const*, CGameTrace*)
t CPhysicsCollision::CollideSize(CPhysCollide*)
t CPhysicsCollision::IsBBoxCache(CPhysCollide*)
t CPhysicsCollision::AddBBoxCache(CPhysCollideCompactSurface*, Vector const&, Vector const&)
t CPhysicsCollision::BBoxToConvex(Vector const&, Vector const&)
t CPhysicsCollision::CollideIndex(CPhysCollide const*)
t CPhysicsCollision::CollideWrite(char*, CPhysCollide*, bool)
t CPhysicsCollision::ConvexVolume(CPhysConvex*)
t CPhysicsCollision::GetBBoxCache(Vector const&, Vector const&)
t CPhysicsCollision::TraceCollide(Vector const&, Vector const&, CPhysCollide const*, QAngle const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
t CPhysicsCollision::VCollideLoad(vcollide_t*, int, char const*, int, bool)
t CPhysicsCollision::BBoxToCollide(Vector const&, Vector const&)
t CPhysicsCollision::CollideVolume(CPhysCollide*)
t CPhysicsCollision::InitBBoxCache()
t CPhysicsCollision::VCollideCheck(vcollide_t*, char const*)
t CPhysicsCollision::CollideGetAABB(Vector*, Vector*, CPhysCollide const*, Vector const&, QAngle const&)
t CPhysicsCollision::DestroyCollide(CPhysCollide*)
t CPhysicsCollision::PolysoupCreate()
t CPhysicsCollision::VCollideUnload(vcollide_t*)
t CPhysicsCollision::ConvexFromVerts(Vector**, int)
t CPhysicsCollision::CreateDebugMesh(CPhysCollide const*, Vector**)
t CPhysicsCollision::FastBboxCollide(CPhysCollideCompactSurface const*, Vector const&, Vector const&)
t CPhysicsCollision::OutputDebugInfo(CPhysCollide const*)
t CPhysicsCollision::PolysoupDestroy(CPhysPolysoup*)
t CPhysicsCollision::CollideGetExtent(CPhysCollide const*, Vector const&, QAngle const&, Vector const&)
t CPhysicsCollision::CollideGetRadius(CPhysCollide const*)
t CPhysicsCollision::ConvexFromPlanes(float*, int, float)
t CPhysicsCollision::CreateQueryModel(CPhysCollide*)
t CPhysicsCollision::DestroyDebugMesh(int, Vector*)
t CPhysicsCollision::GetBBoxCacheSize(int*, int*)
t CPhysicsCollision::ConvexSurfaceArea(CPhysConvex*)
t CPhysicsCollision::CreateVirtualMesh(virtualmeshparams_t const&)
t CPhysicsCollision::DestroyQueryModel(ICollisionQuery*)
t CPhysicsCollision::SetConvexGameData(CPhysConvex*, unsigned int)
t CPhysicsCollision::CollideSurfaceArea(CPhysCollide*)
t CPhysicsCollision::UnserializeCollide(char*, int, int)
t CPhysicsCollision::ConvexFromVertsFast(Vector**, int)
t CPhysicsCollision::PolysoupAddTriangle(CPhysPolysoup*, Vector const&, Vector const&, Vector const&, int)
t CPhysicsCollision::SupportsVirtualMesh()
t CPhysicsCollision::ThreadContextCreate()
t CPhysicsCollision::CollideGetMassCenter(CPhysCollide*, Vector*)
t CPhysicsCollision::CollideSetMassCenter(CPhysCollide*, Vector const&)
t CPhysicsCollision::PolyhedronFromConvex(CPhysConvex*, bool)
t CPhysicsCollision::ThreadContextDestroy(IPhysicsCollision*)
t CPhysicsCollision::VCollideFreeUserData(vcollide_t*)
t CPhysicsCollision::IsBoxIntersectingCone(Vector const&, Vector const&, truncatedcone_t const&)
t CPhysicsCollision::VCollideAllocUserData(vcollide_t*, unsigned int)
t CPhysicsCollision::ConvertConvexToCollide(CPhysConvex**, int)
t CPhysicsCollision::RebuildConvexFromPlanes(CPhysConvex*, float)
t CPhysicsCollision::VPhysicsKeyParserCreate(vcollide_t*)
t CPhysicsCollision::VPhysicsKeyParserCreate(char const*)
t CPhysicsCollision::ConvertPolysoupToCollide(CPhysPolysoup*, bool)
t CPhysicsCollision::VPhysicsKeyParserDestroy(IVPhysicsKeyParser*)
t CPhysicsCollision::ConvexesFromConvexPolygon(Vector const&, Vector const*, int, CPhysConvex**)
t CPhysicsCollision::ConvexFromConvexPolyhedron(CPolyhedron const&)
t CPhysicsCollision::CollideGetOrthographicAreas(CPhysCollide const*)
t CPhysicsCollision::CollideSetOrthographicAreas(CPhysCollide*, Vector const&)
t CPhysicsCollision::ConvertConvexToCollideParams(CPhysConvex**, int, convertconvexparams_t const&)
t CPhysicsCollision::GetConvexesUsedInCollideable(CPhysCollide const*, CPhysConvex**, int)
t CPhysicsCollision::ReadStat(int)
t CPhysicsCollision::TraceBox(Ray_t const&, unsigned int, IConvexInfo*, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
t CPhysicsCollision::TraceBox(Ray_t const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
t CPhysicsCollision::TraceBox(Vector const&, Vector const&, Vector const&, Vector const&, CPhysCollide const*, Vector const&, QAngle const&, CGameTrace*)
t CPhysicsCollision::~CPhysicsCollision()
t CPhysicsCollision::~CPhysicsCollision()
t CPhysicsCollision::~CPhysicsCollision()
t CPhysicsInterface::QueryInterface(char const*)
t CPhysicsInterface::FindCollisionSet(unsigned int)
t CPhysicsInterface::CreateEnvironment()
t CPhysicsInterface::DestroyEnvironment(IPhysicsEnvironment*)
t CPhysicsInterface::CreateObjectPairHash()
t CPhysicsInterface::DestroyObjectPairHash(IPhysicsObjectPairHash*)
t CPhysicsInterface::DestroyAllCollisionSets()
t CPhysicsInterface::FindOrCreateCollisionSet(unsigned int, int)
t CPhysicsInterface::GetActiveEnvironmentByIndex(int)
t CPhysicsInterface::~CPhysicsInterface()
t CPhysicsInterface::~CPhysicsInterface()
t CPlayerController::IsInContact()
t CPlayerController::IsPredicted()
t CPlayerController::AttachObject()
t CPlayerController::DetachObject()
t CPlayerController::GetLastImpulse(Vector*)
t CPlayerController::GetContactState(unsigned short)
t CPlayerController::SetEventHandler(IPhysicsPlayerControllerEvent*)
t CPlayerController::GetPushMassLimit()
t CPlayerController::SetPushMassLimit(float)
t CPlayerController::GetPushSpeedLimit()
t CPlayerController::GetShadowPosition(Vector*, QAngle*)
t CPlayerController::GetShadowVelocity(Vector*)
t CPlayerController::SetPushSpeedLimit(float)
t CPlayerController::TryTeleportObject()
t CPlayerController::event_object_frozen(IVP_Event_Object*)
t CPlayerController::get_controller_name()
t CPlayerController::event_object_created(IVP_Event_Object*)
t CPlayerController::event_object_deleted(IVP_Event_Object*)
t CPlayerController::event_object_revived(IVP_Event_Object*)
t CPlayerController::Prediction_Resimulate(float)
t CPlayerController::SetCallOrderRegistrar(CPredictableControllerSimulationOrderTracker*)
t CPlayerController::get_controller_priority()
t CPlayerController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t CPlayerController::ForceTeleportToCurrentPosition()
t CPlayerController::Jump()
t CPlayerController::StepUp(float)
t CPlayerController::Update(Vector const&, Vector const&, float, bool, IPhysicsObject*)
t CPlayerController::MaxSpeed(Vector const&)
t CPlayerController::GetObject()
t CPlayerController::SetGround(CPhysicsObject*)
t CPlayerController::SetObject(IPhysicsObject*)
t CPlayerController::WasFrozen()
t CPlayerController::CPlayerController(CPhysicsObject*)
t CPlayerController::CPlayerController(CPhysicsObject*)
t CPlayerController::~CPlayerController()
t CPlayerController::~CPlayerController()
t CPlayerController::~CPlayerController()
t CShadowController::GetMaxSpeed(float*, float*)
t CShadowController::AttachObject()
t CShadowController::DetachObject()
t CShadowController::AllowsRotation()
t CShadowController::GetLastImpulse(Vector*)
t CShadowController::Update_Internal(Vector const&, QAngle const&, float)
t CShadowController::WriteToTemplate(vphysics_save_cshadowcontroller_t&)
t CShadowController::InitFromTemplate(vphysics_save_cshadowcontroller_t const&)
t CShadowController::AllowsTranslation()
t CShadowController::GetTargetPosition(Vector*, QAngle*)
t CShadowController::UseShadowMaterial(bool)
t CShadowController::get_controller_name()
t CShadowController::GetTeleportDistance()
t CShadowController::SetTeleportDistance(float)
t CShadowController::ObjectMaterialChanged(int)
t CShadowController::IsPhysicallyControlled()
t CShadowController::get_controller_priority()
t CShadowController::SetPhysicallyControlled(bool)
t CShadowController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t CShadowController::StepUp(float)
t CShadowController::Update(Vector const&, QAngle const&, float)
t CShadowController::MaxSpeed(float, float)
t CShadowController::SetObject(IPhysicsObject*)
t CShadowController::CShadowController(CPhysicsObject*, bool, bool)
t CShadowController::CShadowController()
t CShadowController::CShadowController(CPhysicsObject*, bool, bool)
t CShadowController::CShadowController()
t CShadowController::~CShadowController()
t CShadowController::~CShadowController()
t CShadowController::~CShadowController()
U CThreadSpinRWLock::SpinLockForRead()
U CThreadSpinRWLock::SpinLockForWrite()
U CThreadSyncObject::~CThreadSyncObject()
t CUtlInplaceBuffer::InplaceGetLinePtr(char**, int*)
t CUtlInplaceBuffer::InplaceGetLinePtr()
t CUtlInplaceBuffer::CUtlInplaceBuffer(int, int, int)
t CUtlInplaceBuffer::CUtlInplaceBuffer(int, int, int)
t CUtlSymbolTableMT::AddString(char const*)
t CUtlSymbolTableMT::~CUtlSymbolTableMT()
t CUtlSymbolTableMT::~CUtlSymbolTableMT()
t IPhysicsCollision::~IPhysicsCollision()
t IPhysicsCollision::~IPhysicsCollision()
t IPhysicsCollision::~IPhysicsCollision()
t IVP_Compact_Ledge::is_compact()
t IVP_Compact_Ledge::c_ledge_init()
t IVP_Compact_Ledge::byte_swap_all(IVP_U_BigVector<IVP_Compact_Poly_Point>*)
t IVP_Compact_Ledge::set_is_compact(IVP_BOOL)
t IVP_Compact_Ledge::get_point_array()
t IVP_Compact_Ledge::set_client_data(unsigned int)
t IVP_Compact_Ledge::set_cache_handle(unsigned short)
t IVP_Compact_Ledge::get_first_triangle()
t IVP_Compact_Ledge::set_offset_ledge_points(int)
t IVP_Compact_Ledge::set_size(int)
t IVP_Compact_Ledge::byte_swap()
t IVP_Contact_Point::reset_time(IVP_Time)
t IVP_Contact_Point::get_material_info(IVP_Material**)
t IVP_Contact_Point::calc_coll_distance()
t IVP_Contact_Point::get_contact_normal(IVP_U_Float_Point*)
t IVP_Contact_Point::recompute_friction()
t IVP_Contact_Point::set_contact_normal(IVP_U_Float_Point const&)
t IVP_Contact_Point::two_values_friction(IVP_U_Float_Point*)
t IVP_Contact_Point::p_calc_friction_s_PK(IVP_U_Point const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Impact_Solver_Long_Term*, IVP_U_Float_Point*)
t IVP_Contact_Point::p_calc_friction_s_PP(IVP_U_Point const*, IVP_U_Point const*, IVP_Impact_Solver_Long_Term*, IVP_U_Float_Point*)
t IVP_Contact_Point::p_calc_friction_qr_PF(IVP_U_Point const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Impact_Solver_Long_Term*, IVP_U_Float_Point*)
t IVP_Contact_Point::p_calc_friction_ss_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*, IVP_Impact_Solver_Long_Term*, IVP_U_Float_Point*)
t IVP_Contact_Point::recalc_friction_s_vals(IVP_Environment*)
t IVP_Contact_Point::static_friction_single(IVP_Event_Sim const*, float, float)
t IVP_Contact_Point::ease_the_friction_force(IVP_U_Float_Point*)
t IVP_Contact_Point::get_rescue_speed_impact(IVP_Environment*)
t IVP_Contact_Point::set_friction_to_neutral()
t IVP_Contact_Point::get_rot_speed_uncertainty()
t IVP_Contact_Point::calc_virtual_mass_of_mindist()
t IVP_Contact_Point::get_and_set_real_friction_len(IVP_U_Float_Point*)
t IVP_Contact_Point::friction_force_local_constraint_1d(IVP_Event_Sim const*)
t IVP_Contact_Point::friction_force_local_constraint_2d(IVP_Event_Sim const*)
t IVP_Contact_Point::read_materials_for_contact_situation(IVP_Impact_Solver_Long_Term*)
t IVP_Contact_Point::friction_force_local_constraint_2d_wheel(IVP_Core*, IVP_Impact_Solver_Long_Term*, IVP_Event_Sim const*, float&)
t IVP_Contact_Point::IVP_Contact_Point(IVP_Mindist*)
t IVP_Contact_Point::IVP_Contact_Point(IVP_Mindist*)
t IVP_Contact_Point::~IVP_Contact_Point()
t IVP_Contact_Point::~IVP_Contact_Point()
t IVP_Core_Fast_PSI::~IVP_Core_Fast_PSI()
t IVP_Debug_Manager::init_debug_manager()
t IVP_Debug_Manager::clear_debug_manager()
t IVP_Debug_Manager::IVP_Debug_Manager()
t IVP_Debug_Manager::IVP_Debug_Manager()
t IVP_Debug_Manager::~IVP_Debug_Manager()
t IVP_Debug_Manager::~IVP_Debug_Manager()
t IVP_Event_Manager::simulate_time_events(IVP_Time_Manager*, IVP_Environment*, IVP_Time)
t IVP_Event_Manager::simulate_variable_time_step(IVP_Time_Manager*, IVP_Environment*, IVP_Time_Event_PSI*, float)
t IVP_Friction_Hash::~IVP_Friction_Hash()
t IVP_Friction_Hash::~IVP_Friction_Hash()
t IVP_Halfspacesoup::add_halfspace(IVP_U_Hesse const*)
t IVP_Halfspacesoup::IVP_Halfspacesoup(IVP_Compact_Ledge const*)
t IVP_Halfspacesoup::IVP_Halfspacesoup()
t IVP_Halfspacesoup::IVP_Halfspacesoup(IVP_Compact_Ledge const*)
t IVP_Halfspacesoup::IVP_Halfspacesoup()
t IVP_Halfspacesoup::~IVP_Halfspacesoup()
t IVP_Halfspacesoup::~IVP_Halfspacesoup()
t IVP_Impact_Solver::confirm_impact(int)
t IVP_Impact_Solver::delay_decision(IVP_Core**)
t IVP_Impact_Solver::do_rescue_push(IVP_U_Float_Point*, IVP_BOOL)
t IVP_Impact_Solver::delay_of_impact(int)
t IVP_Impact_Solver::do_push_on_core(IVP_U_Float_Point*, int)
t IVP_Impact_Solver::get_total_energy()
t IVP_Impact_Solver::estimate_push_impulse()
t IVP_Impact_Solver::get_cos_sin_for_impact(float, float, float*, float*)
t IVP_Impact_Solver::get_world_push_direction()
t IVP_Impact_Solver::clear_change_values_cores()
t IVP_Impact_Solver::get_relative_speed_vector()
t IVP_Impact_Solver::calc_virt_masses_impact_solver(IVP_U_Float_Point const*)
t IVP_Impact_Solver::get_world_direction_second_friction(IVP_Contact_Point*)
t IVP_Impact_Solver::get_world_push_direction_two_friction(float)
t IVP_Impact_Solver::do_push(float)
t IVP_Impact_Solver::do_impact(IVP_Core**, IVP_BOOL, int, float)
t IVP_Impact_Solver::undo_push()
t IVP_Impact_System::test_loop_all_pairs()
t IVP_Impact_System::add_pair_to_impact_system(IVP_Friction_Core_Pair*)
t IVP_Impact_System::pair_is_already_in_system(IVP_Friction_Core_Pair*)
t IVP_Impact_System::recalc_all_affected_cores()
t IVP_Impact_System::invalidate_impact_mindists(IVP_Core*)
t IVP_Impact_System::debug_check_all_dists_at_end()
t IVP_Impact_System::init_and_solve_impact_system(IVP_Mindist*, IVP_Friction_System*, IVP_Friction_Core_Pair*, IVP_Contact_Point*)
t IVP_Impact_System::impact_system_check_start_pair(IVP_Friction_Core_Pair*, IVP_Contact_Point*)
t IVP_Impact_System::add_pushed_core_with_pairs_except(IVP_Core*, IVP_Friction_Core_Pair*)
t IVP_Impact_System::synchronize_core_for_impact_system(IVP_Core*)
t IVP_I_Point_VHash::find_point(IVP_U_Point*)
t IVP_I_Point_VHash::remove_point(IVP_U_Point*)
t IVP_I_Point_VHash::point_to_index(IVP_U_Point*)
t IVP_I_Point_VHash::add_point(IVP_U_Point*)
t IVP_I_Point_VHash::IVP_I_Point_VHash(int)
t IVP_I_Point_VHash::IVP_I_Point_VHash(int)
t IVP_I_Point_VHash::~IVP_I_Point_VHash()
t IVP_I_Point_VHash::~IVP_I_Point_VHash()
t IVP_I_Point_VHash::~IVP_I_Point_VHash()
t IVP_Listener_Hull::hull_manager_is_reset(float, float)
t IVP_Range_Manager::get_coll_range_in_world(IVP_Real_Object const*)
t IVP_Range_Manager::environment_will_be_deleted(IVP_Environment*)
t IVP_Range_Manager::get_coll_range_intra_objects(IVP_Real_Object const*, IVP_Real_Object const*, float*, float*)
t IVP_Range_Manager::IVP_Range_Manager(IVP_Environment*, IVP_BOOL)
t IVP_Range_Manager::IVP_Range_Manager(IVP_Environment*, IVP_BOOL)
t IVP_Ray_Solver_Os::check_ray_against_compact_ledge_os(IVP_Compact_Ledge const*)
t IVP_Ray_Solver_Os::check_ray_against_compact_surface_os(IVP_Compact_Surface const*)
t IVP_Ray_Solver_Os::check_ray_against_ledge_tree_node_os(IVP_Compact_Ledgetree_Node const*)
t IVP_Ray_Solver_Os::IVP_Ray_Solver_Os(IVP_Ray_Solver*, IVP_Real_Object*)
t IVP_Ray_Solver_Os::IVP_Ray_Solver_Os(IVP_Ray_Solver*, IVP_Real_Object*)
t IVP_Tetra_Intrude::checkin_edge(IVP_Tri_Edge*)
t IVP_Tetra_Intrude::point_2_bits(IVP_U_Point*, IVP_U_Point*, int*)
t IVP_Tetra_Intrude::checkout_edge(IVP_Tri_Edge*)
t IVP_Tetra_Intrude::check_intrusion(IVP_Tri_Edge*, IVP_Tri_Edge*, IVP_Tri_Edge*, IVP_Tri_Edge*, IVP_Extra_Point*, int, IVP_Intrusion_Status*)
t IVP_Tetra_Intrude::init_tetra_edge(IVP_Tetra_Edge*, IVP_Tetra_Point*, IVP_Tetra_Point*, IVP_Tri_Edge*)
t IVP_Tetra_Intrude::calc_intrusion_status(IVP_Tri_Edge*, IVP_Tri_Edge*, IVP_Tri_Edge*, IVP_Tri_Edge*, IVP_Extra_Point*, int)
t IVP_Tetra_Intrude::pe(int)
t IVP_Tetra_Intrude::IVP_Tetra_Intrude(IVP_Tetra_Point*, int)
t IVP_Tetra_Intrude::IVP_Tetra_Intrude(IVP_Tetra_Point*, int)
t IVP_Tetra_Intrude::~IVP_Tetra_Intrude()
t IVP_Tetra_Intrude::~IVP_Tetra_Intrude()
t IVP_U_Active_Mult::active_float_changed(IVP_U_Active_Float*)
t IVP_U_Active_Mult::print()
t IVP_U_Active_Mult::IVP_U_Active_Mult(char const*, IVP_U_Active_Float*, IVP_U_Active_Float*)
t IVP_U_Active_Mult::IVP_U_Active_Mult(char const*, IVP_U_Active_Float*, IVP_U_Active_Float*)
t IVP_U_Active_Mult::~IVP_U_Active_Mult()
t IVP_U_Active_Mult::~IVP_U_Active_Mult()
t IVP_U_Active_Mult::~IVP_U_Active_Mult()
t IVP_U_Active_Sine::active_float_changed(IVP_U_Active_Float*)
t IVP_U_Active_Sine::print()
t IVP_U_Active_Sine::IVP_U_Active_Sine(char const*, IVP_U_Active_Float*, float, float, float, float)
t IVP_U_Active_Sine::IVP_U_Active_Sine(char const*, IVP_U_Active_Float*, float, float, float, float)
t IVP_U_Active_Sine::~IVP_U_Active_Sine()
t IVP_U_Active_Sine::~IVP_U_Active_Sine()
t IVP_U_Active_Sine::~IVP_U_Active_Sine()
t IVP_U_Float_Hesse::calc_hesse(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_U_Float_Hesse::mult_hesse(float)
t IVP_U_Float_Hesse::calc_hesse_val(IVP_U_Float_Point const*)
t IVP_U_Float_Hesse::set4(IVP_U_Float_Hesse const*)
t IVP_U_Float_Hesse::normize()
t IVP_U_Float_Hesse::byte_swap()
t IVP_U_Float_Hesse::IVP_U_Float_Hesse(float, float, float, float)
t IVP_U_Float_Hesse::IVP_U_Float_Hesse()
t IVP_U_Float_Hesse::IVP_U_Float_Hesse(float, float, float, float)
t IVP_U_Float_Hesse::IVP_U_Float_Hesse()
t IVP_U_Float_Point::set_to_zero()
t IVP_U_Float_Point::add_multiple(IVP_U_Float_Point const*, float)
t IVP_U_Float_Point::add_multiple(IVP_U_Float_Point const*, IVP_U_Float_Point const*, float)
t IVP_U_Float_Point::fast_normize()
t IVP_U_Float_Point::set_multiple(IVP_U_Quat const*, float)
t IVP_U_Float_Point::set_multiple(IVP_U_Float_Point const*, float)
t IVP_U_Float_Point::set_negative(IVP_U_Float_Point const*)
t IVP_U_Float_Point::set_interpolate(IVP_U_Float_Point const*, IVP_U_Float_Point const*, float)
t IVP_U_Float_Point::set_pairwise_mult(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_U_Float_Point::calc_cross_product(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_U_Float_Point::set_orthogonal_part(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_U_Float_Point::inline_subtract_and_mult(IVP_U_Float_Point const*, IVP_U_Float_Point const*, float)
t IVP_U_Float_Point::real_length_plus_normize()
t IVP_U_Float_Point::inline_calc_cross_product(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_U_Float_Point::inline_calc_cross_product_and_normize(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_U_Float_Point::add(IVP_U_Float_Point const*)
t IVP_U_Float_Point::add(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_U_Float_Point::set(float, float, float)
t IVP_U_Float_Point::set(float const*)
t IVP_U_Float_Point::set(IVP_U_Float_Point const*)
t IVP_U_Float_Point::inline_set_vert_to_area_defined_by_three_points(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_U_Float_Point::mult(float)
t IVP_U_Float_Point::rotate(IVP_COORDINATE_INDEX, float)
t IVP_U_Float_Point::normize()
t IVP_U_Float_Point::subtract(IVP_U_Float_Point const*)
t IVP_U_Float_Point::subtract(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_U_Float_Point::byte_swap()
t IVP_U_Float_Point::line_sqrt()
t IVP_U_Float_Point::IVP_U_Float_Point(float, float, float)
t IVP_U_Float_Point::IVP_U_Float_Point(IVP_U_Float_Point const*)
t IVP_U_Float_Point::IVP_U_Float_Point()
t IVP_U_Float_Point::IVP_U_Float_Point(float, float, float)
t IVP_U_Float_Point::IVP_U_Float_Point(IVP_U_Float_Point const*)
t IVP_U_Float_Point::IVP_U_Float_Point()
t IVP_U_String_Hash::add(char const*, void*)
t IVP_U_String_Hash::remove(char const*)
t IVP_U_String_Hash::IVP_U_String_Hash(int, void*)
t IVP_U_String_Hash::IVP_U_String_Hash(int, void*)
t IVP_U_String_Hash::~IVP_U_String_Hash()
t IVP_U_String_Hash::~IVP_U_String_Hash()
t IVP_U_Vector_Base::increment_mem()
t P_Sur_2D_Triangle::P_Sur_2D_Triangle(int, int, int)
t P_Sur_2D_Triangle::P_Sur_2D_Triangle(int, int, int)
t CDefSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
t CDefSaveRestoreOps::Parse(SaveRestoreFieldInfo_t const&, char const*)
t CDefSaveRestoreOps::IsEmpty(SaveRestoreFieldInfo_t const&)
t CDefSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
t CDefSaveRestoreOps::MakeEmpty(SaveRestoreFieldInfo_t const&)
t CPhysicsConstraint::Deactivate()
t CPhysicsConstraint::InitLength(IVP_Environment*, CPhysicsConstraintGroup*, constraint_lengthparams_t const&)
t CPhysicsConstraint::InitPulley(IVP_Environment*, CPhysicsConstraintGroup*, constraint_pulleyparams_t const&)
t CPhysicsConstraint::InitRagdoll(IVP_Environment*, CPhysicsConstraintGroup*, constraint_ragdollparams_t const&)
t CPhysicsConstraint::InitSliding(IVP_Environment*, CPhysicsConstraintGroup*, constraint_slidingparams_t const&)
t CPhysicsConstraint::SetGameData(void*)
t CPhysicsConstraint::DetachListener()
t CPhysicsConstraint::InitBallsocket(IVP_Environment*, CPhysicsConstraintGroup*, constraint_ballsocketparams_t const&)
t CPhysicsConstraint::SetLinearMotor(float, float)
t CPhysicsConstraint::OutputDebugInfo()
t CPhysicsConstraint::SetAngularMotor(float, float)
t CPhysicsConstraint::SetupRagdollAxis(int, constraint_axislimit_t const&, hk_Limited_Ball_Socket_BP*)
t CPhysicsConstraint::event_object_frozen(IVP_Event_Object*)
t CPhysicsConstraint::event_object_created(IVP_Event_Object*)
t CPhysicsConstraint::event_object_deleted(IVP_Event_Object*)
t CPhysicsConstraint::event_object_revived(IVP_Event_Object*)
t CPhysicsConstraint::UpdateRagdollTransforms(matrix3x4_t const&, matrix3x4_t const&)
t CPhysicsConstraint::Activate()
t CPhysicsConstraint::InitFixed(IVP_Environment*, CPhysicsConstraintGroup*, constraint_fixedparams_t const&)
t CPhysicsConstraint::InitHinge(IVP_Environment*, CPhysicsConstraintGroup*, constraint_limitedhingeparams_t const&)
t CPhysicsConstraint::CPhysicsConstraint(CPhysicsObject*, CPhysicsObject*)
t CPhysicsConstraint::CPhysicsConstraint(CPhysicsObject*, CPhysicsObject*)
t CPhysicsConstraint::~CPhysicsConstraint()
t CPhysicsConstraint::~CPhysicsConstraint()
t CPhysicsConstraint::~CPhysicsConstraint()
t CUtlCharConversion::FindConversion(char const*, int*)
t CUtlCharConversion::CUtlCharConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
t CUtlCharConversion::CUtlCharConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
t CVehicleController::CalcEngine(float, float, bool, float, bool)
t CVehicleController::IsBoosting()
t CVehicleController::CreateWheel(int, vehicle_axleparams_t&)
t CVehicleController::CalcSteering(float, float, float, bool)
t CVehicleController::UpdateEngine(vehicle_controlparams_t const&, float, float, float, bool, bool)
t CVehicleController::GetWheelCount()
t CVehicleController::InitCarSystem(CPhysicsObject*)
t CVehicleController::OnVehicleExit()
t CVehicleController::UpdateBooster(float)
t CVehicleController::AttachListener()
t CVehicleController::OnVehicleEnter()
t CVehicleController::UpdateSkidding(bool)
t CVehicleController::UpdateSteering(vehicle_controlparams_t const&, float, float)
t CVehicleController::CreateTraceData(int, vehicle_axleparams_t&)
t CVehicleController::InitVehicleData(vehicleparams_t const&)
t CVehicleController::SetSpringLength(int, float)
t CVehicleController::UpdateHandbrake(vehicle_controlparams_t const&, float, bool, bool)
t CVehicleController::WriteToTemplate(vphysics_save_cvehiclecontroller_t&)
t CVehicleController::CreateIVPObjects()
t CVehicleController::GetVehicleParams()
t CVehicleController::InitFromTemplate(CPhysicsEnvironment*, void*, IPhysicsGameTrace*, vphysics_save_cvehiclecontroller_t const&)
t CVehicleController::IsEngineDisabled()
t CVehicleController::SetWheelFriction(int, float)
t CVehicleController::UpdatePowerslide(vehicle_controlparams_t const&, bool, float)
t CVehicleController::InitCarSystemBody(IVP_Template_Car_System&)
t CVehicleController::SetEngineDisabled(bool)
t CVehicleController::ShutdownCarSystem()
t CVehicleController::UpdateExtraForces()
t CVehicleController::VehicleDataReload()
t CVehicleController::GetOperatingParams()
t CVehicleController::event_object_frozen(IVP_Event_Object*)
t CVehicleController::InitCarSystemWheels(IVP_Template_Car_System&)
t CVehicleController::event_object_created(IVP_Event_Object*)
t CVehicleController::event_object_deleted(IVP_Event_Object*)
t CVehicleController::event_object_revived(IVP_Event_Object*)
t CVehicleController::GetWheelContactPoint(int, Vector*, int*)
t CVehicleController::UpdateWheelPositions()
t CVehicleController::GetCarSystemDebugData(vehicle_debugcarsystem_t&)
t CVehicleController::CalcEngineTransmission(float)
t CVehicleController::UpdateEngineTurboStart(vehicle_controlparams_t const&, float)
t CVehicleController::UpdateEngineTurboFinish()
t CVehicleController::GetVehicleParamsForChange()
t CVehicleController::Update(float, vehicle_controlparams_t&)
t CVehicleController::GetWheel(int)
t CVehicleController::CVehicleController(vehicleparams_t const&, CPhysicsEnvironment*, unsigned int, IPhysicsGameTrace*)
t CVehicleController::CVehicleController(vehicleparams_t const&, CPhysicsEnvironment*, unsigned int, IPhysicsGameTrace*)
t CVehicleController::~CVehicleController()
t CVehicleController::~CVehicleController()
t CVehicleController::~CVehicleController()
t hk_Rigid_Body_Core::apply_impulses(hk_Core_VMQ_Input&, float const*)
t hk_Rigid_Body_Core::apply_impulse3_spin(hk_Core_VMQ_Input&, float __vector(4))
t hk_Rigid_Body_Core::apply_impulse3_spin(hk_Core_VMQ_Input&, float __vector)
t hk_Rigid_Body_Core::add_to_mass_matrix_inv(hk_Core_VMQ_Input&, hk_Dense_Matrix&, float*)
t IPhysicsConstraint::~IPhysicsConstraint()
t IPhysicsConstraint::~IPhysicsConstraint()
t IPhysicsConstraint::~IPhysicsConstraint()
t IVP_Actuator_Extra::do_float_cam(float)
t IVP_Actuator_Extra::do_puck_force(float)
t IVP_Actuator_Extra::get_float_cam_props(float*, float*, float*, float*)
t IVP_Actuator_Extra::active_float_changed(IVP_U_Active_Float*)
t IVP_Actuator_Extra::calc_float_cam_matrix(IVP_U_Matrix*)
t IVP_Actuator_Extra::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Actuator_Extra::get_force()
t IVP_Actuator_Extra::IVP_Actuator_Extra(IVP_Environment*, IVP_Template_Extra*)
t IVP_Actuator_Extra::IVP_Actuator_Extra(IVP_Environment*, IVP_Template_Extra*)
t IVP_Actuator_Extra::~IVP_Actuator_Extra()
t IVP_Actuator_Extra::~IVP_Actuator_Extra()
t IVP_Actuator_Extra::~IVP_Actuator_Extra()
t IVP_Actuator_Force::get_controller_name()
t IVP_Actuator_Force::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Actuator_Force::set_force(float)
t IVP_Actuator_Force::IVP_Actuator_Force(IVP_Environment*, IVP_Template_Force*)
t IVP_Actuator_Force::IVP_Actuator_Force(IVP_Environment*, IVP_Template_Force*)
t IVP_Actuator_Force::~IVP_Actuator_Force()
t IVP_Actuator_Force::~IVP_Actuator_Force()
t IVP_Actuator_Force::~IVP_Actuator_Force()
t IVP_Anomaly_Limits::get_max_collisions_per_psi()
t IVP_Anomaly_Limits::environment_will_be_deleted(IVP_Environment*)
t IVP_Anomaly_Limits::get_max_collision_checks_per_psi()
t IVP_Anomaly_Limits::IVP_Anomaly_Limits(IVP_BOOL)
t IVP_Anomaly_Limits::IVP_Anomaly_Limits(IVP_BOOL)
t IVP_Anomaly_Limits::~IVP_Anomaly_Limits()
t IVP_Anomaly_Limits::~IVP_Anomaly_Limits()
t IVP_Anomaly_Limits::~IVP_Anomaly_Limits()
t IVP_Buoyancy_Input::IVP_Buoyancy_Input()
t IVP_Buoyancy_Input::IVP_Buoyancy_Input()
t IVP_Core_Collision::split_collision_merged_core_next_PSI()
t IVP_Core_Collision::IVP_Core_Collision(IVP_Core*, IVP_Core*)
t IVP_Core_Collision::IVP_Core_Collision(IVP_Core*, IVP_Core*)
t IVP_Freeze_Manager::init_freeze_manager()
t IVP_Freeze_Manager::IVP_Freeze_Manager()
t IVP_Freeze_Manager::IVP_Freeze_Manager()
t IVPhysicsKeyParser::~IVPhysicsKeyParser()
t IVPhysicsKeyParser::~IVPhysicsKeyParser()
t IVPhysicsKeyParser::~IVPhysicsKeyParser()
t IVP_I_FPoint_VHash::find_point(IVP_U_Float_Point*)
t IVP_I_FPoint_VHash::remove_point(IVP_U_Float_Point*)
t IVP_I_FPoint_VHash::point_to_index(IVP_U_Float_Point*)
t IVP_I_FPoint_VHash::add_point(IVP_U_Float_Point*)
t IVP_I_FPoint_VHash::IVP_I_FPoint_VHash(int)
t IVP_I_FPoint_VHash::IVP_I_FPoint_VHash(int)
t IVP_I_FPoint_VHash::~IVP_I_FPoint_VHash()
t IVP_I_FPoint_VHash::~IVP_I_FPoint_VHash()
t IVP_I_FPoint_VHash::~IVP_I_FPoint_VHash()
t IVP_Ray_Solver_Min::get_ray_hit()
t IVP_Ray_Solver_Min::get_ray_dist()
t IVP_Ray_Solver_Min::add_hit_object(IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_Compact_Triangle const*, float, IVP_U_Point*)
t IVP_Ray_Solver_Min::IVP_Ray_Solver_Min(IVP_Ray_Solver_Template const*)
t IVP_Ray_Solver_Min::IVP_Ray_Solver_Min(IVP_Ray_Solver_Template const*)
t IVP_Ray_Solver_Min::~IVP_Ray_Solver_Min()
t IVP_Ray_Solver_Min::~IVP_Ray_Solver_Min()
t IVP_Ray_Solver_Min::~IVP_Ray_Solver_Min()
t IVP_SurfaceManager::add_reference_to_ledge(IVP_Compact_Ledge const*)
t IVP_SurfaceManager::remove_reference_to_ledge(IVP_Compact_Ledge const*)
t IVP_SurfaceManager::get_ledge_specific_client_data(IVP_Compact_Ledge const*)
t IVP_SurfaceManager::set_ledge_specific_client_data(IVP_Compact_Ledge*, unsigned int)
t IVP_SurfaceManager::~IVP_SurfaceManager()
t IVP_SurfaceManager::~IVP_SurfaceManager()
t IVP_SurfaceManager::~IVP_SurfaceManager()
t IVP_Template_Force::IVP_Template_Force()
t IVP_Template_Force::IVP_Template_Force()
t IVP_Time_Event_PSI::simulate_time_event(IVP_Environment*)
t IVP_Time_Event_PSI::IVP_Time_Event_PSI()
t IVP_Time_Event_PSI::IVP_Time_Event_PSI()
d IVP_U_Active_Float::change_meter
t IVP_U_Active_Float::add_dependency(IVP_U_Active_Float_Listener*)
t IVP_U_Active_Float::update_derived()
t IVP_U_Active_Float::get_float_value()
t IVP_U_Active_Float::give_double_value()
t IVP_U_Active_Float::remove_dependency(IVP_U_Active_Float_Listener*)
t IVP_U_Active_Float::IVP_U_Active_Float(char const*)
t IVP_U_Active_Float::IVP_U_Active_Float(char const*)
t IVP_U_Active_Float::~IVP_U_Active_Float()
t IVP_U_Active_Float::~IVP_U_Active_Float()
t IVP_U_Active_Float::~IVP_U_Active_Float()
t IVP_U_Active_Limit::active_float_changed(IVP_U_Active_Float*)
t IVP_U_Active_Limit::print()
t IVP_U_Active_Limit::IVP_U_Active_Limit(char const*, IVP_U_Active_Float*, float, float)
t IVP_U_Active_Limit::IVP_U_Active_Limit(char const*, IVP_U_Active_Float*, float, float)
t IVP_U_Active_Limit::~IVP_U_Active_Limit()
t IVP_U_Active_Limit::~IVP_U_Active_Limit()
t IVP_U_Active_Limit::~IVP_U_Active_Limit()
t IVP_U_Active_Pulse::active_float_changed(IVP_U_Active_Float*)
t IVP_U_Active_Pulse::print()
t IVP_U_Active_Pulse::IVP_U_Active_Pulse(char const*, IVP_U_Active_Float*, float, int, int, float, float)
t IVP_U_Active_Pulse::IVP_U_Active_Pulse(char const*, IVP_U_Active_Float*, float, int, int, float, float)
t IVP_U_Active_Pulse::~IVP_U_Active_Pulse()
t IVP_U_Active_Pulse::~IVP_U_Active_Pulse()
t IVP_U_Active_Pulse::~IVP_U_Active_Pulse()
t IVP_U_Active_Value::add_reference()
t IVP_U_Active_Value::remove_reference()
t IVP_U_Active_Value::get_name()
t IVP_U_Active_Value::IVP_U_Active_Value(char const*)
t IVP_U_Active_Value::IVP_U_Active_Value(char const*)
t IVP_U_Active_Value::~IVP_U_Active_Value()
t IVP_U_Active_Value::~IVP_U_Active_Value()
t IVP_U_Active_Value::~IVP_U_Active_Value()
t IVP_U_Float_Point3::set(float const*)
t IVP_U_Float_Point3::byte_swap()
t IVP_U_Matrix_Cache::calc_matrix_at(IVP_Time, int)
t IVP_U_Matrix_Cache::calc_matrix_at_now(IVP_Time, int)
t IVP_U_Matrix_Cache::calc_calc_matrix_cache(IVP_Cache_Object*)
t IVP_U_Matrix_Cache::p_init(IVP_Cache_Object*)
t IVP_U_Matrix_Cache::IVP_U_Matrix_Cache(IVP_Cache_Object*)
t IVP_U_Matrix_Cache::IVP_U_Matrix_Cache(IVP_Cache_Object*)
t CIVPMaterialManager::SetPropMap(int*, int)
t CIVPMaterialManager::get_elasticity(IVP_Contact_Situation*)
t CIVPMaterialManager::get_friction_factor(IVP_Contact_Situation*)
t CIVPMaterialManager::get_material_by_index(IVP_Real_Object*, IVP_U_Point const*, int)
t CIVPMaterialManager::CIVPMaterialManager()
t CIVPMaterialManager::CIVPMaterialManager()
t CIVPMaterialManager::~CIVPMaterialManager()
t CIVPMaterialManager::~CIVPMaterialManager()
t CIVPMaterialManager::~CIVPMaterialManager()
t CPhysicsEnvironment::ClearStats()
t CPhysicsEnvironment::PhantomAdd(CPhysicsObject*)
t CPhysicsEnvironment::PreRestore(physprerestoreparams_t const&)
t CPhysicsEnvironment::SetGravity(Vector const&)
t CPhysicsEnvironment::IsPredicted()
t CPhysicsEnvironment::PostRestore()
t CPhysicsEnvironment::CreateSpring(IPhysicsObject*, IPhysicsObject*, springparams_t*)
t CPhysicsEnvironment::SetPredicted(bool)
t CPhysicsEnvironment::DestroyObject(IPhysicsObject*)
t CPhysicsEnvironment::DestroySpring(IPhysicsSpring*)
t CPhysicsEnvironment::PhantomRemove(CPhysicsObject*)
t CPhysicsEnvironment::SetAirDensity(float)
t CPhysicsEnvironment::SetQuickDelete(bool)
t CPhysicsEnvironment::TransferObject(IPhysicsObject*, IPhysicsEnvironment*)
t CPhysicsEnvironment::GetDebugOverlay()
t CPhysicsEnvironment::SetDebugOverlay(void* (*)(char const*, int*))
t CPhysicsEnvironment::ClearDeadObjects()
t CPhysicsEnvironment::CreatePolyObject(CPhysCollide const*, int, Vector const&, QAngle const&, objectparams_t*)
t CPhysicsEnvironment::SweepCollideable(CPhysCollide const*, Vector const&, Vector const&, QAngle const&, unsigned int, IPhysicsTraceFilter*, CGameTrace*)
t CPhysicsEnvironment::CleanupDeleteList()
t CPhysicsEnvironment::DestroyConstraint(IPhysicsConstraint*)
t CPhysicsEnvironment::EnableDeleteQueue(bool)
t CPhysicsEnvironment::CreateSphereObject(float, int, Vector const&, QAngle const&, objectparams_t*, bool)
t CPhysicsEnvironment::DebugCheckContacts()
t CPhysicsEnvironment::SetCollisionSolver(IPhysicsCollisionSolver*)
t CPhysicsEnvironment::AddPlayerController(IPhysicsPlayerController*)
t CPhysicsEnvironment::ForceObjectsToSleep(IPhysicsObject**, int)
t CPhysicsEnvironment::SetAlternateGravity(Vector const&)
t CPhysicsEnvironment::SetupLibraryOptions()
t CPhysicsEnvironment::FindPlayerController(IPhysicsObject*)
t CPhysicsEnvironment::ResetSimulationClock()
t CPhysicsEnvironment::UpdateDeleteHighMark()
t CPhysicsEnvironment::CreateConstraintGroup(constraint_groupparams_t const&)
t CPhysicsEnvironment::CreateFixedConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_fixedparams_t const&)
t CPhysicsEnvironment::CreateFluidController(IPhysicsObject*, fluidparams_t*)
t CPhysicsEnvironment::CreateHingeConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_hingeparams_t const&)
t CPhysicsEnvironment::SetObjectEventHandler(IPhysicsObjectEvent*)
t CPhysicsEnvironment::SetSimulationTimestep(float)
t CPhysicsEnvironment::CreateLengthConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_lengthparams_t const&)
t CPhysicsEnvironment::CreateMotionController(IMotionEvent*)
t CPhysicsEnvironment::CreatePlayerController(IPhysicsObject*)
t CPhysicsEnvironment::CreatePolyObjectStatic(CPhysCollide const*, int, Vector const&, QAngle const&, objectparams_t*)
t CPhysicsEnvironment::CreatePulleyConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_pulleyparams_t const&)
t CPhysicsEnvironment::CreateShadowController(IPhysicsObject*, bool, bool)
t CPhysicsEnvironment::DestroyConstraintGroup(IPhysicsConstraintGroup*)
t CPhysicsEnvironment::DestroyFluidController(IPhysicsFluidController*)
t CPhysicsEnvironment::EnableConstraintNotify(bool)
t CPhysicsEnvironment::RemovePlayerController(IPhysicsPlayerController*)
t CPhysicsEnvironment::SetPerformanceSettings(physics_performanceparams_t const*)
t CPhysicsEnvironment::CreateRagdollConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_ragdollparams_t const&)
t CPhysicsEnvironment::CreateSlidingConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_slidingparams_t const&)
t CPhysicsEnvironment::CreateVehicleController(IPhysicsObject*, vehicleparams_t const&, unsigned int, IPhysicsGameTrace*)
t CPhysicsEnvironment::DestroyMotionController(IPhysicsMotionController*)
t CPhysicsEnvironment::DestroyPlayerController(IPhysicsPlayerController*)
t CPhysicsEnvironment::DestroyShadowController(IPhysicsShadowController*)
t CPhysicsEnvironment::GetPredictionCommandNum()
t CPhysicsEnvironment::SerializeObjectToBuffer(IPhysicsObject*, unsigned char*, unsigned int)
t CPhysicsEnvironment::SetPredictionCommandNum(int)
t CPhysicsEnvironment::DestroyVehicleController(IPhysicsVehicleController*)
t CPhysicsEnvironment::GetCollisionEventHandler()
t CPhysicsEnvironment::NotifyConstraintDisabled(IPhysicsConstraint*)
t CPhysicsEnvironment::SetCollisionEventHandler(IPhysicsCollisionEvent*)
t CPhysicsEnvironment::SetConstraintEventHandler(IPhysicsConstraintEvent*)
t CPhysicsEnvironment::CreateBallsocketConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_ballsocketparams_t const&)
t CPhysicsEnvironment::RestorePredictedSimulation()
t CPhysicsEnvironment::UnserializeObjectFromBuffer(void*, unsigned char*, unsigned int, bool)
t CPhysicsEnvironment::CreateLimitedHingeConstraint(IPhysicsObject*, IPhysicsObject*, IPhysicsConstraintGroup*, constraint_limitedhingeparams_t const&)
t CPhysicsEnvironment::DestroyCollideOnDeadObjectFlush(CPhysCollide*)
t CPhysicsEnvironment::DoneReferencingPreviousCommands(int)
t CPhysicsEnvironment::Save(physsaveparams_t const&)
t CPhysicsEnvironment::Restore(physrestoreparams_t const&)
t CPhysicsEnvironment::Simulate(float)
t CPhysicsEnvironment::TraceBox(CGameTrace*, Vector const&, Vector const&, Vector const&, Vector const&)
t CPhysicsEnvironment::TraceRay(Ray_t const&, unsigned int, IPhysicsTraceFilter*, CGameTrace*)
t CPhysicsEnvironment::ReadStats(physics_stats_t*)
t CPhysicsEnvironment::CPhysicsEnvironment()
t CPhysicsEnvironment::CPhysicsEnvironment()
t CPhysicsEnvironment::~CPhysicsEnvironment()
t CPhysicsEnvironment::~CPhysicsEnvironment()
t CPhysicsEnvironment::~CPhysicsEnvironment()
t CUtlNoEscConversion::FindConversion(char const*, int*)
t hk_Fixed_Constraint::init_constraint(void const*)
t hk_Fixed_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Fixed_Constraint::apply_effector_PSI(hk_PSI_Info&)
t hk_Fixed_Constraint::get_constraint_dof()
t hk_Fixed_Constraint::write_to_blueprint(hk_Fixed_BP*)
t hk_Fixed_Constraint::get_constraint_type()
t hk_Fixed_Constraint::get_vmq_storage_size()
t hk_Fixed_Constraint::init_fixed_constraint(hk_Fixed_BP const*)
t hk_Fixed_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Fixed_Constraint::hk_Fixed_Constraint(hk_Environment*, hk_Fixed_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Fixed_Constraint::hk_Fixed_Constraint(hk_Local_Constraint_System*, hk_Fixed_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Fixed_Constraint::hk_Fixed_Constraint(hk_Environment*, hk_Fixed_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Fixed_Constraint::hk_Fixed_Constraint(hk_Local_Constraint_System*, hk_Fixed_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Fixed_Constraint::~hk_Fixed_Constraint()
t hk_Fixed_Constraint::~hk_Fixed_Constraint()
t hk_Fixed_Constraint::~hk_Fixed_Constraint()
t hk_Hinge_BP_Builder::set_axis_ws(hk_Rigid_Body*, hk_Rigid_Body*, hk_Vector3 const&)
t hk_Hinge_BP_Builder::set_position_os(int, hk_Vector3 const&)
t hk_Hinge_BP_Builder::set_axis_perp_os(int, hk_Vector3 const&)
t hk_Hinge_BP_Builder::set_angular_motor(float, float)
t hk_Hinge_BP_Builder::set_angular_limits(float, float)
t hk_Hinge_BP_Builder::set_joint_friction(float)
t hk_Hinge_BP_Builder::set_tau(float)
t hk_Hinge_Constraint::set_limits(float, float)
t hk_Hinge_Constraint::set_friction(float)
t hk_Hinge_Constraint::init_constraint(void const*)
t hk_Hinge_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Hinge_Constraint::apply_effector_PSI(hk_PSI_Info&)
t hk_Hinge_Constraint::get_constraint_dof()
t hk_Hinge_Constraint::write_to_blueprint(hk_Hinge_BP*)
t hk_Hinge_Constraint::get_constraint_type()
t hk_Hinge_Constraint::get_vmq_storage_size()
t hk_Hinge_Constraint::init_hinge_constraint(hk_Hinge_BP const*)
t hk_Hinge_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Hinge_Constraint::set_motor(float, float)
t hk_Hinge_Constraint::hk_Hinge_Constraint(hk_Environment*, hk_Hinge_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Hinge_Constraint::hk_Hinge_Constraint(hk_Local_Constraint_System*, hk_Hinge_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Hinge_Constraint::hk_Hinge_Constraint(hk_Environment*, hk_Hinge_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Hinge_Constraint::hk_Hinge_Constraint(hk_Local_Constraint_System*, hk_Hinge_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Hinge_Constraint::~hk_Hinge_Constraint()
t hk_Hinge_Constraint::~hk_Hinge_Constraint()
t hk_Hinge_Constraint::~hk_Hinge_Constraint()
t IPhysicsEnvironment::~IPhysicsEnvironment()
t IPhysicsEnvironment::~IPhysicsEnvironment()
t IPhysicsEnvironment::~IPhysicsEnvironment()
t IVP_3D_Solver_PK_KK::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
t IVP_Actuator_Spring::get_constant()
t IVP_Actuator_Spring::set_constant(float)
t IVP_Actuator_Spring::get_damp_factor()
t IVP_Actuator_Spring::get_only_stretch()
t IVP_Actuator_Spring::get_rel_pos_damp()
t IVP_Actuator_Spring::set_rel_pos_damp(float)
t IVP_Actuator_Spring::set_break_max_len(float)
t IVP_Actuator_Spring::get_controller_name()
t IVP_Actuator_Spring::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Actuator_Spring::fire_event_spring_broken()
t IVP_Actuator_Spring::get_spring_length_zero_force()
t IVP_Actuator_Spring::set_len(float)
t IVP_Actuator_Spring::set_damp(float)
t IVP_Actuator_Spring::IVP_Actuator_Spring(IVP_Environment*, IVP_Template_Spring*, IVP_ACTUATOR_TYPE)
t IVP_Actuator_Spring::IVP_Actuator_Spring(IVP_Environment*, IVP_Template_Spring*, IVP_ACTUATOR_TYPE)
t IVP_Actuator_Spring::~IVP_Actuator_Spring()
t IVP_Actuator_Spring::~IVP_Actuator_Spring()
t IVP_Actuator_Spring::~IVP_Actuator_Spring()
t IVP_Actuator_Torque::get_torque()
t IVP_Actuator_Torque::set_torque(float)
t IVP_Actuator_Torque::get_controller_name()
t IVP_Actuator_Torque::set_max_rotation_speed(float)
t IVP_Actuator_Torque::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Actuator_Torque::IVP_Actuator_Torque(IVP_Environment*, IVP_Template_Torque*)
t IVP_Actuator_Torque::IVP_Actuator_Torque(IVP_Environment*, IVP_Template_Torque*)
t IVP_Actuator_Torque::~IVP_Actuator_Torque()
t IVP_Actuator_Torque::~IVP_Actuator_Torque()
t IVP_Actuator_Torque::~IVP_Actuator_Torque()
t IVP_Anomaly_Manager::inter_penetration(IVP_Mindist*, IVP_Real_Object*, IVP_Real_Object*, float)
t IVP_Anomaly_Manager::max_velocity_exceeded(IVP_Anomaly_Limits*, IVP_Core*, IVP_U_Float_Point*)
t IVP_Anomaly_Manager::get_push_speed_penetration(IVP_Real_Object*, IVP_Real_Object*)
t IVP_Anomaly_Manager::environment_will_be_deleted(IVP_Environment*)
t IVP_Anomaly_Manager::max_angular_velocity_exceeded(IVP_Anomaly_Limits*, IVP_Core*, IVP_U_Float_Point*)
t IVP_Anomaly_Manager::max_collision_checks_exceeded(int)
t IVP_Anomaly_Manager::solve_inter_penetration_simple(IVP_Real_Object*, IVP_Real_Object*, float)
t IVP_Anomaly_Manager::max_contacts_exceeded_check_freezing(IVP_Core**, int)
t IVP_Anomaly_Manager::max_collisions_exceeded_check_freezing(IVP_Anomaly_Limits*, IVP_Core*)
t IVP_Anomaly_Manager::IVP_Anomaly_Manager(IVP_BOOL)
t IVP_Anomaly_Manager::IVP_Anomaly_Manager(IVP_BOOL)
t IVP_Anomaly_Manager::~IVP_Anomaly_Manager()
t IVP_Anomaly_Manager::~IVP_Anomaly_Manager()
t IVP_Anomaly_Manager::~IVP_Anomaly_Manager()
t IVP_Buoyancy_Output::IVP_Buoyancy_Output()
t IVP_Buoyancy_Output::IVP_Buoyancy_Output()
t IVP_Buoyancy_Solver::compute_forces(IVP_U_Float_Point const*, IVP_U_Float_Hesse const*, IVP_Real_Object*)
t IVP_Buoyancy_Solver::compute_values_for_one_ball(IVP_Real_Object const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*)
t IVP_Buoyancy_Solver::compute_values_for_one_ledge(IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*)
t IVP_Buoyancy_Solver::compute_values_for_one_polygon(IVP_Real_Object*, IVP_U_Float_Hesse const*)
t IVP_Buoyancy_Solver::compute_values_for_one_triangle(IVP_Real_Object*, IVP_Compact_Triangle const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*, IVP_Compact_Ledge const*)
t IVP_Buoyancy_Solver::compute_disection_points_with_ball(IVP_U_Float_Hesse const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*, float const&, IVP_U_Float_Point*, IVP_U_Float_Point*)
t IVP_Buoyancy_Solver::compute_buoyancy_values_for_one_ball(int const&, float const&, float const&, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*)
t IVP_Buoyancy_Solver::compute_dampening_values_for_one_ball(int const&, float const&, float const&, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Hesse const*, IVP_U_Float_Hesse const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_Buoyancy_Solver::compute_rotation_and_translation_values_for_one_triangle(IVP_Real_Object*, IVP_Compact_Triangle const*, IVP_U_Float_Point const**, IVP_Compact_Ledge const*, float const*, int const&, int const&, int const&)
t IVP_Buoyancy_Solver::IVP_Buoyancy_Solver(IVP_Core*, IVP_Controller_Buoyancy*, IVP_Template_Buoyancy const*, IVP_U_Float_Point const*)
t IVP_Buoyancy_Solver::IVP_Buoyancy_Solver(IVP_Core*, IVP_Controller_Buoyancy*, IVP_Template_Buoyancy const*, IVP_U_Float_Point const*)
t IVP_Cluster_Manager::add_object(IVP_Real_Object*)
t IVP_Cluster_Manager::remove_object(IVP_Real_Object*)
t IVP_Cluster_Manager::get_root_cluster()
t IVP_Cluster_Manager::add_listener_object(IVP_Real_Object*, IVP_Listener_Object*)
t IVP_Cluster_Manager::add_listener_collision(IVP_Real_Object*, IVP_Listener_Collision*)
t IVP_Cluster_Manager::remove_listener_object(IVP_Real_Object*, IVP_Listener_Object*)
t IVP_Cluster_Manager::check_for_unused_objects(IVP_Universe_Manager*)
t IVP_Cluster_Manager::fire_event_object_frozen(IVP_Event_Object*)
t IVP_Cluster_Manager::fire_event_pre_collision(IVP_Real_Object*, IVP_Event_Collision*)
t IVP_Cluster_Manager::fire_event_object_created(IVP_Event_Object*)
t IVP_Cluster_Manager::fire_event_object_deleted(IVP_Event_Object*)
t IVP_Cluster_Manager::fire_event_object_revived(IVP_Event_Object*)
t IVP_Cluster_Manager::fire_event_post_collision(IVP_Real_Object*, IVP_Event_Collision*)
t IVP_Cluster_Manager::remove_listener_collision(IVP_Real_Object*, IVP_Listener_Collision*)
t IVP_Cluster_Manager::fire_event_friction_created(IVP_Real_Object*, IVP_Event_Friction*)
t IVP_Cluster_Manager::fire_event_friction_deleted(IVP_Real_Object*, IVP_Event_Friction*)
t IVP_Cluster_Manager::fire_event_collision_object_deleted(IVP_Real_Object*)
t IVP_Cluster_Manager::get_next_real_object_in_cluster_tree(IVP_Object*)
t IVP_Cluster_Manager::IVP_Cluster_Manager(IVP_Environment*)
t IVP_Cluster_Manager::IVP_Cluster_Manager(IVP_Environment*)
t IVP_Cluster_Manager::~IVP_Cluster_Manager()
t IVP_Cluster_Manager::~IVP_Cluster_Manager()
t IVP_Compact_Surface::byte_swap_all(IVP_BOOL, int)
t IVP_Compact_Surface::byte_swap()
t IVP_Event_Manager_D::simulate_time_events(IVP_Time_Manager*, IVP_Environment*, IVP_Time)
t IVP_Friction_Solver::complex_failed(IVP_Friction_System*)
t IVP_Friction_Solver::calc_solver_PSI(IVP_Friction_System*, int*)
t IVP_Friction_Solver::do_penalty_step(float*, float*, float, float)
t IVP_Friction_Solver::ease_two_mindists(IVP_Contact_Point*, IVP_Contact_Point*, IVP_U_Float_Point*, IVP_U_Float_Point*, float)
t IVP_Friction_Solver::factor_result_vec()
t IVP_Friction_Solver::ease_friction_pair(IVP_Friction_Core_Pair*, IVP_U_Memory*)
t IVP_Friction_Solver::do_inactives_pushes(IVP_Friction_System*)
t IVP_Friction_Solver::do_resulting_pushes(IVP_Friction_System*)
t IVP_Friction_Solver::setup_coords_mindists(IVP_Friction_System*)
t IVP_Friction_Solver::ease_test_two_mindists(IVP_Contact_Point*, IVP_Contact_Point*, IVP_U_Float_Point*)
t IVP_Friction_Solver::normize_constraint_equ()
t IVP_Friction_Solver::debug_distance_after_push(int)
t IVP_Friction_Solver::solve_linear_equation_and_push(IVP_Friction_System*, int*, int, IVP_U_Memory*)
t IVP_Friction_Solver::test_gauss_solution_suggestion(float*, int*, int, IVP_U_Memory*)
t IVP_Friction_Solver::IVP_Friction_Solver(IVP_Friction_System*, IVP_Event_Sim const*)
t IVP_Friction_Solver::IVP_Friction_Solver(IVP_Friction_System*, IVP_Event_Sim const*)
t IVP_Friction_System::reset_time(IVP_Time)
t IVP_Friction_System::add_fr_pair(IVP_Friction_Core_Pair*)
t IVP_Friction_System::del_fr_pair(IVP_Friction_Core_Pair*)
t IVP_Friction_System::print_all_dists()
t IVP_Friction_System::union_find_fr_sys()
t IVP_Friction_System::add_core_to_system(IVP_Core*)
t IVP_Friction_System::add_dist_to_system(IVP_Contact_Point*)
t IVP_Friction_System::debug_fs_out_ascii()
t IVP_Friction_System::do_friction_system(IVP_Event_Sim const*)
t IVP_Friction_System::find_pair_of_cores(IVP_Core*, IVP_Core*)
t IVP_Friction_System::apply_real_friction(IVP_Event_Sim const*)
t IVP_Friction_System::get_controller_name()
t IVP_Friction_System::get_max_energy_gain()
t IVP_Friction_System::undo_complex_pushes()
t IVP_Friction_System::calc_friction_forces(IVP_Event_Sim const*)
t IVP_Friction_System::debug_clean_tmp_info()
t IVP_Friction_System::ease_friction_forces()
t IVP_Friction_System::get_controlled_cores(IVP_U_Vector<IVP_Core>*)
t IVP_Friction_System::ivp_debug_fs_pointers()
t IVP_Friction_System::split_friction_system(IVP_Core*)
t IVP_Friction_System::confirm_complex_pushes()
t IVP_Friction_System::core_is_found_in_pairs(IVP_Core*)
t IVP_Friction_System::core_is_terminal_in_fs(IVP_Core*)
t IVP_Friction_System::get_pair_info_for_objs(IVP_Core*, IVP_Core*)
t IVP_Friction_System::exchange_friction_dists(IVP_Contact_Point*, IVP_Contact_Point*)
t IVP_Friction_System::fusion_friction_systems(IVP_Friction_System*)
t IVP_Friction_System::get_controller_priority()
t IVP_Friction_System::remove_core_from_system(IVP_Core*)
t IVP_Friction_System::remove_dist_from_system(IVP_Contact_Point*)
t IVP_Friction_System::delete_friction_distance(IVP_Contact_Point*)
t IVP_Friction_System::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Friction_System::test_hole_fr_system_data()
t IVP_Friction_System::do_pushes_distance_keepers(IVP_Event_Sim const*)
t IVP_Friction_System::kinetic_energy_of_hole_frs()
t IVP_Friction_System::dist_added_update_pair_info(IVP_Contact_Point*)
t IVP_Friction_System::bubble_sort_dists_importance()
t IVP_Friction_System::clear_integrated_anti_energy()
t IVP_Friction_System::fs_recalc_all_contact_points()
t IVP_Friction_System::reorder_mindists_for_complex()
t IVP_Friction_System::dist_removed_update_pair_info(IVP_Contact_Point*)
t IVP_Friction_System::debug_check_system_consistency()
t IVP_Friction_System::get_associated_controlled_cores()
t IVP_Friction_System::get_num_supposed_active_frdists()
t IVP_Friction_System::get_minimum_simulation_frequency()
t IVP_Friction_System::static_fr_oversized_matrix_panic()
t IVP_Friction_System::core_is_going_to_be_deleted_event(IVP_Core*)
t IVP_Friction_System::remove_energy_gained_by_real_friction()
t IVP_Friction_System::IVP_Friction_System(IVP_Environment*)
t IVP_Friction_System::IVP_Friction_System(IVP_Environment*)
t IVP_Friction_System::~IVP_Friction_System()
t IVP_Friction_System::~IVP_Friction_System()
t IVP_Friction_System::~IVP_Friction_System()
t IVP_Incr_L_U_Matrix::normize_row(int)
t IVP_Incr_L_U_Matrix::add_neg_col_L(int, int, float)
t IVP_Incr_L_U_Matrix::add_neg_row_L(int, int, float)
t IVP_Incr_L_U_Matrix::debug_print_a()
t IVP_Incr_L_U_Matrix::decrement_l_u(int)
t IVP_Incr_L_U_Matrix::increment_l_u()
t IVP_Incr_L_U_Matrix::normize_row_L(int)
t IVP_Incr_L_U_Matrix::solve_lin_equ()
t IVP_Incr_L_U_Matrix::subtract_row_L(int, int, float)
t IVP_Incr_L_U_Matrix::debug_print_l_u()
t IVP_Incr_L_U_Matrix::mult_vec_with_L()
t IVP_Incr_L_U_Matrix::pivot_search_l_u(int)
t IVP_Incr_L_U_Matrix::solve_vec_with_U()
t IVP_Incr_L_U_Matrix::exchange_rows_l_u(int, int)
t IVP_Incr_L_U_Matrix::exchange_columns_L(int, int)
t IVP_Incr_L_U_Matrix::exchange_columns_U(int, int)
t IVP_Incr_L_U_Matrix::add_neg_row_to_row_l_u(int, int, float)
t IVP_Incr_L_U_Matrix::add_neg_row_upwards_l_u(int, int, float)
t IVP_Incr_L_U_Matrix::l_u_decomposition_with_pivoting()
t IVP_Listener_Object::~IVP_Listener_Object()
t IVP_Listener_Object::~IVP_Listener_Object()
t IVP_Listener_Object::~IVP_Listener_Object()
t IVP_Material_Simple::get_damping()
t IVP_Material_Simple::get_adhesion()
t IVP_Material_Simple::get_elasticity()
t IVP_Material_Simple::get_friction_factor()
t IVP_Material_Simple::get_second_friction_factor()
t IVP_Material_Simple::get_name()
t IVP_Material_Simple::IVP_Material_Simple(float, float)
t IVP_Material_Simple::IVP_Material_Simple()
t IVP_Material_Simple::IVP_Material_Simple(float, float)
t IVP_Material_Simple::IVP_Material_Simple()
t IVP_Material_Simple::~IVP_Material_Simple()
t IVP_Material_Simple::~IVP_Material_Simple()
t IVP_Material_Simple::~IVP_Material_Simple()
t IVP_Mindist_Manager::print_mindists()
t IVP_Mindist_Manager::recheck_ov_element(IVP_Real_Object*)
t IVP_Mindist_Manager::insert_hull_mindist(IVP_Mindist*, float)
t IVP_Mindist_Manager::insert_hull_mindist(IVP_Mindist*, float, float)
t IVP_Mindist_Manager::remove_hull_mindist(IVP_Mindist*)
t IVP_Mindist_Manager::insert_exact_mindist(IVP_Mindist*)
t IVP_Mindist_Manager::mindist_left_phantom(IVP_Mindist*)
t IVP_Mindist_Manager::recalc_exact_mindist(IVP_Mindist*)
t IVP_Mindist_Manager::remove_exact_mindist(IVP_Mindist*)
t IVP_Mindist_Manager::create_exact_mindists(IVP_Real_Object*, IVP_Real_Object*, float, IVP_U_FVector<IVP_Collision>*, IVP_Compact_Ledge const*, IVP_Compact_Ledge const*, IVP_Compact_Ledge const*, IVP_Compact_Ledge const*, IVP_Collision_Delegator*)
t IVP_Mindist_Manager::insert_invalid_mindist(IVP_Mindist*)
t IVP_Mindist_Manager::remove_invalid_mindist(IVP_Mindist*)
t IVP_Mindist_Manager::mindist_entered_phantom(IVP_Mindist*)
t IVP_Mindist_Manager::insert_lazy_hull_mindist(IVP_Mindist*, float)
t IVP_Mindist_Manager::insert_lazy_hull_mindist(IVP_Mindist*, float, float)
t IVP_Mindist_Manager::recalc_all_exact_mindists()
t IVP_Mindist_Manager::recalc_all_exact_wheel_mindist()
t IVP_Mindist_Manager::insert_and_recalc_exact_mindist(IVP_Mindist*)
t IVP_Mindist_Manager::recalc_all_exact_mindists_events()
t IVP_Mindist_Manager::insert_and_recalc_phantom_mindist(IVP_Mindist*)
t IVP_Mindist_Manager::enable_collision_detection_for_object(IVP_Real_Object*)
t IVP_Mindist_Manager::IVP_Mindist_Manager(IVP_Environment*)
t IVP_Mindist_Manager::IVP_Mindist_Manager(IVP_Environment*)
t IVP_Mindist_Manager::~IVP_Mindist_Manager()
t IVP_Mindist_Manager::~IVP_Mindist_Manager()
t IVP_OV_Tree_Manager::expand_tree(IVP_OV_Node const*)
t IVP_OV_Tree_Manager::cleanup_node(IVP_OV_Node*)
t IVP_OV_Tree_Manager::connect_boxes(IVP_OV_Node*, IVP_OV_Node*)
t IVP_OV_Tree_Manager::calc_optimal_box(IVP_OV_Element const*, float, float)
t IVP_OV_Tree_Manager::insert_ov_element(IVP_OV_Element*, float, float, IVP_U_Vector<IVP_OV_Element>*)
t IVP_OV_Tree_Manager::remove_ov_element(IVP_OV_Element*)
t IVP_OV_Tree_Manager::get_luf_coordinates_ws(IVP_OV_Node const*, IVP_U_Float_Point*, float*)
t IVP_OV_Tree_Manager::get_center_coordinates_ws(IVP_OV_Node const*, IVP_U_Float_Point*, float*)
t IVP_OV_Tree_Manager::collect_collision_partners(IVP_OV_Element const*, IVP_OV_Node const*, IVP_OV_Node const*)
t IVP_OV_Tree_Manager::collect_subbox_collision_partners(IVP_OV_Element const*, IVP_OV_Node const*)
b IVP_OV_Tree_Manager::powerlist
t IVP_OV_Tree_Manager::IVP_OV_Tree_Manager()
t IVP_OV_Tree_Manager::IVP_OV_Tree_Manager()
t IVP_OV_Tree_Manager::~IVP_OV_Tree_Manager()
t IVP_OV_Tree_Manager::~IVP_OV_Tree_Manager()
t IVP_Simulation_Unit::reset_time(IVP_Time)
t IVP_Simulation_Unit::clean_sim_unit()
t IVP_Simulation_Unit::split_sim_unit(IVP_Core*)
t IVP_Simulation_Unit::add_sim_unit_core(IVP_Core*)
t IVP_Simulation_Unit::rem_sim_unit_core(IVP_Core*)
t IVP_Simulation_Unit::sim_unit_core_exists(IVP_Core*)
t IVP_Simulation_Unit::sim_unit_remove_core(IVP_Core*)
t IVP_Simulation_Unit::get_pos_of_controller(IVP_Controller*)
t IVP_Simulation_Unit::add_controller_of_core(IVP_Core*, IVP_Controller*)
t IVP_Simulation_Unit::do_sim_unit_union_find()
t IVP_Simulation_Unit::get_unit_movement_type()
t IVP_Simulation_Unit::perform_test_and_split()
t IVP_Simulation_Unit::set_unit_movement_type(IVP_Movement_Type)
t IVP_Simulation_Unit::add_controller_unit_sim(IVP_Controller*)
t IVP_Simulation_Unit::rem_sim_unit_controller(IVP_Controller*)
t IVP_Simulation_Unit::sim_unit_calc_redundants()
t IVP_Simulation_Unit::sim_unit_union_find_test()
t IVP_Simulation_Unit::fusion_simulation_unities(IVP_Simulation_Unit*)
t IVP_Simulation_Unit::remove_controller_of_core(IVP_Core*, IVP_Controller*)
t IVP_Simulation_Unit::sim_unit_sort_controllers()
t IVP_Simulation_Unit::simulate_single_sim_unit_psi(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Simulation_Unit::sim_unit_calc_movement_state(IVP_Environment*)
t IVP_Simulation_Unit::throw_cores_into_my_sim_unit(IVP_Simulation_Unit*)
t IVP_Simulation_Unit::sim_unit_ensure_in_simulation()
t IVP_Simulation_Unit::sim_unit_exchange_controllers(int, int)
t IVP_Simulation_Unit::sim_unit_ensure_cores_movement()
t IVP_Simulation_Unit::sim_unit_revive_for_simulation(IVP_Environment*)
t IVP_Simulation_Unit::controller_is_known_to_sim_unit(IVP_Controller*)
t IVP_Simulation_Unit::add_controlled_core_for_controller(IVP_Controller*, IVP_Core*)
t IVP_Simulation_Unit::prefetch0_init_moving_core_for_psi(IVP_Core*)
t IVP_Simulation_Unit::sim_unit_clear_movement_check_values()
t IVP_Simulation_Unit::IVP_Simulation_Unit()
t IVP_Simulation_Unit::IVP_Simulation_Unit()
t IVP_Simulation_Unit::~IVP_Simulation_Unit()
t IVP_Simulation_Unit::~IVP_Simulation_Unit()
t IVP_SurMan_PS_Plane::get_area_size()
t IVP_SurMan_PS_Plane::get_len_of_all_edges()
t IVP_Template_Anchor::get_object()
t IVP_Template_Anchor::get_anchor_point_ws()
t IVP_Template_Anchor::set_anchor_position_cs(IVP_Real_Object*, float, float, float)
t IVP_Template_Anchor::set_anchor_position_cs(IVP_Real_Object*, IVP_U_Float_Point const*)
t IVP_Template_Anchor::set_anchor_position_os(IVP_Real_Object*, float, float, float)
t IVP_Template_Anchor::set_anchor_position_os(IVP_Real_Object*, IVP_U_Float_Point const*)
t IVP_Template_Anchor::set_anchor_position_ws(IVP_Real_Object*, float, float, float)
t IVP_Template_Anchor::set_anchor_position_ws(IVP_Real_Object*, IVP_U_Point const*)
t IVP_Template_Object::set_name(char const*)
t IVP_Template_Object::IVP_Template_Object()
t IVP_Template_Object::IVP_Template_Object()
t IVP_Template_Object::~IVP_Template_Object()
t IVP_Template_Object::~IVP_Template_Object()
t IVP_Template_Spring::IVP_Template_Spring()
t IVP_Template_Spring::IVP_Template_Spring()
t IVP_Template_Torque::IVP_Template_Torque()
t IVP_Template_Torque::IVP_Template_Torque()
t IVP_U_Active_Square::active_float_changed(IVP_U_Active_Float*)
t IVP_U_Active_Square::print()
t IVP_U_Active_Square::IVP_U_Active_Square(char const*, IVP_U_Active_Float*, float, float, float)
t IVP_U_Active_Square::IVP_U_Active_Square(char const*, IVP_U_Active_Float*, float, float, float)
t IVP_U_Active_Square::~IVP_U_Active_Square()
t IVP_U_Active_Square::~IVP_U_Active_Square()
t IVP_U_Active_Square::~IVP_U_Active_Square()
t IVP_U_Active_Switch::active_int_changed(IVP_U_Active_Int*)
t IVP_U_Active_Switch::active_float_changed(IVP_U_Active_Float*)
t IVP_U_Active_Switch::print()
t IVP_U_Active_Switch::IVP_U_Active_Switch(char const*, IVP_U_Active_Int*, IVP_U_Active_Float*, IVP_U_Active_Float*)
t IVP_U_Active_Switch::IVP_U_Active_Switch(char const*, IVP_U_Active_Int*, IVP_U_Active_Float*, IVP_U_Active_Float*)
t IVP_U_Active_Switch::~IVP_U_Active_Switch()
t IVP_U_Active_Switch::~IVP_U_Active_Switch()
t IVP_U_Active_Switch::~IVP_U_Active_Switch()
t physcollideheader_t::GetBaseMap()
d physcollideheader_t::m_DataMap
t CAirboatFrictionData::GetContactPoint(Vector&)
t CAirboatFrictionData::GetContactSpeed(Vector&)
t CAirboatFrictionData::GetSurfaceNormal(Vector&)
t CPhysCollideAABBTree::Init(CPhysCollide const*)
t CPhysicsCollisionSet::ShouldCollide(int, int)
t CPhysicsCollisionSet::EnableCollisions(int, int)
t CPhysicsCollisionSet::DisableCollisions(int, int)
t CPhysicsFrictionData::GetContactPoint(Vector&)
t CPhysicsFrictionData::GetContactSpeed(Vector&)
t CPhysicsFrictionData::GetSurfaceNormal(Vector&)
t CPhysicsSurfaceProps::GetIVPManager()
t CPhysicsSurfaceProps::GetIVPMaterial(int)
t CPhysicsSurfaceProps::GetSurfaceData(int)
t CPhysicsSurfaceProps::ParseSurfaceData(char const*, char const*)
t CPhysicsSurfaceProps::AddFileToDatabase(char const*)
t CPhysicsSurfaceProps::GetInternalSurface(int)
t CPhysicsSurfaceProps::CopyPhysicsProperties(CSurface*, int)
t CPhysicsSurfaceProps::SetWorldMaterialIndexTable(int*, int)
t CPhysicsSurfaceProps::CPhysicsSurfaceProps()
t CPhysicsSurfaceProps::CPhysicsSurfaceProps()
t CPhysicsSurfaceProps::~CPhysicsSurfaceProps()
t CPhysicsSurfaceProps::~CPhysicsSurfaceProps()
t CPhysicsSurfaceProps::~CPhysicsSurfaceProps()
t CTraceSolverAABBTree::DoSweep()
t CTraceSolverAABBTree::CTraceSolverAABBTree(CGameTrace*, Ray_t const&, CTraceIVP*, CTraceRay&, CTraceAABB&, CPhysCollideAABBTree const*, Vector const&)
t CTraceSolverAABBTree::CTraceSolverAABBTree(CGameTrace*, Ray_t const&, CTraceIVP*, CTraceRay&, CTraceAABB&, CPhysCollideAABBTree const*, Vector const&)
t hk_Dense_Matrix_Util::invert_2x2(hk_Dense_Matrix const&, hk_Dense_Matrix&, float)
t hk_Dense_Matrix_Util::invert_4x4(hk_Fixed_Dense_Matrix<4>&, float)
t hk_Dense_Matrix_Util::invert_5x5(hk_Fixed_Dense_Matrix<5>&, float)
t hk_Dense_Matrix_Util::invert_6x6(hk_Fixed_Dense_Matrix<6>&, float)
t hk_Dense_Matrix_Util::invert_3x3_symmetric(hk_Dense_Matrix&, float)
t hk_Dense_Matrix_Util::mult(hk_Dense_Matrix const&, float const*, float*)
t hk_Dense_Matrix_Util::mult(hk_Dense_Matrix const&, hk_Dense_Vector const&, hk_Dense_Vector&)
t hk_Dense_Matrix_Util::print(hk_Dense_Matrix const&)
t hk_Dense_Matrix_Util::solve(hk_Dense_Matrix&, hk_Dense_Vector&, float)
t hk_Pulley_Constraint::set_length(float)
t hk_Pulley_Constraint::set_gearing(float)
t hk_Pulley_Constraint::init_constraint(void const*)
t hk_Pulley_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Pulley_Constraint::apply_effector_PSI(hk_PSI_Info&)
t hk_Pulley_Constraint::get_constraint_dof()
t hk_Pulley_Constraint::write_to_blueprint(hk_Pulley_BP*)
t hk_Pulley_Constraint::get_constraint_type()
t hk_Pulley_Constraint::get_vmq_storage_size()
t hk_Pulley_Constraint::set_worldspace_point(int, hk_Vector3 const&)
t hk_Pulley_Constraint::init_pulley_constraint(hk_Pulley_BP const*)
t hk_Pulley_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Pulley_Constraint::hk_Pulley_Constraint(hk_Environment*, hk_Pulley_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Pulley_Constraint::hk_Pulley_Constraint(hk_Local_Constraint_System*, hk_Pulley_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Pulley_Constraint::hk_Pulley_Constraint(hk_Environment*, hk_Pulley_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Pulley_Constraint::hk_Pulley_Constraint(hk_Local_Constraint_System*, hk_Pulley_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Pulley_Constraint::~hk_Pulley_Constraint()
t hk_Pulley_Constraint::~hk_Pulley_Constraint()
t hk_Pulley_Constraint::~hk_Pulley_Constraint()
t IPhysicsSurfaceProps::~IPhysicsSurfaceProps()
t IPhysicsSurfaceProps::~IPhysicsSurfaceProps()
t IPhysicsSurfaceProps::~IPhysicsSurfaceProps()
t IVP_3D_Solver_PF_NPF::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
t IVP_3D_Solver_S_VALS::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
t IVP_Actuator_Rot_Mot::set_max_torque(float)
t IVP_Actuator_Rot_Mot::get_controller_name()
t IVP_Actuator_Rot_Mot::set_max_rotation_speed(float)
t IVP_Actuator_Rot_Mot::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Actuator_Rot_Mot::get_power()
t IVP_Actuator_Rot_Mot::set_power(float)
t IVP_Actuator_Rot_Mot::IVP_Actuator_Rot_Mot(IVP_Environment*, IVP_Template_Rot_Mot*)
t IVP_Actuator_Rot_Mot::IVP_Actuator_Rot_Mot(IVP_Environment*, IVP_Template_Rot_Mot*)
t IVP_Actuator_Rot_Mot::~IVP_Actuator_Rot_Mot()
t IVP_Actuator_Rot_Mot::~IVP_Actuator_Rot_Mot()
t IVP_Actuator_Rot_Mot::~IVP_Actuator_Rot_Mot()
t IVP_Collision_Filter::~IVP_Collision_Filter()
t IVP_Collision_Filter::~IVP_Collision_Filter()
t IVP_Collision_Filter::~IVP_Collision_Filter()
t IVP_Compact_Triangle::get_next_tri()
t IVP_Compact_Triangle::set_tri_index(int)
t IVP_Compact_Triangle::get_first_edge()
t IVP_Compact_Triangle::set_is_virtual(unsigned int)
t IVP_Compact_Triangle::set_pierce_index(int)
t IVP_Compact_Triangle::set_material_index(int)
t IVP_Compact_Triangle::byte_swap()
t IVP_Compact_Triangle::IVP_Compact_Triangle()
t IVP_Compact_Triangle::IVP_Compact_Triangle()
t IVP_Constraint_Local::get_objectA()
t IVP_Constraint_Local::get_objectR()
t IVP_Constraint_Local::fix_rotation_axis(IVP_COORDINATE_INDEX)
t IVP_Constraint_Local::constraint_changed()
t IVP_Constraint_Local::free_rotation_axis(IVP_COORDINATE_INDEX)
t IVP_Constraint_Local::limit_rotation_axis(IVP_COORDINATE_INDEX, float, float)
t IVP_Constraint_Local::fix_translation_axis(IVP_COORDINATE_INDEX)
t IVP_Constraint_Local::free_translation_axis(IVP_COORDINATE_INDEX)
t IVP_Constraint_Local::sort_rotation_mapping()
t IVP_Constraint_Local::limit_translation_axis(IVP_COORDINATE_INDEX, float, float)
t IVP_Constraint_Local::change_fixing_point_Ros(IVP_U_Point const*)
t IVP_Constraint_Local::change_rotation_axes_Ros(IVP_U_Matrix3 const*)
t IVP_Constraint_Local::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Constraint_Local::sort_translation_mapping()
t IVP_Constraint_Local::change_max_rotation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
t IVP_Constraint_Local::change_translation_axes_Ros(IVP_U_Matrix3 const*)
t IVP_Constraint_Local::change_max_translation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
t IVP_Constraint_Local::change_target_fixing_point_Ros(IVP_U_Point const*)
t IVP_Constraint_Local::change_Aos_to_relaxe_constraint()
t IVP_Constraint_Local::change_Ros_to_relaxe_constraint()
t IVP_Constraint_Local::change_target_rotation_axes_Ros(IVP_U_Matrix3 const*)
t IVP_Constraint_Local::core_is_going_to_be_deleted_event(IVP_Core*)
t IVP_Constraint_Local::change_target_translation_axes_Ros(IVP_U_Matrix3 const*)
t IVP_Constraint_Local::init(IVP_Template_Constraint const&)
t IVP_Constraint_Local::IVP_Constraint_Local(IVP_Template_Constraint const&)
t IVP_Constraint_Local::IVP_Constraint_Local()
t IVP_Constraint_Local::IVP_Constraint_Local(IVP_Template_Constraint const&)
t IVP_Constraint_Local::IVP_Constraint_Local()
t IVP_Constraint_Local::~IVP_Constraint_Local()
t IVP_Constraint_Local::~IVP_Constraint_Local()
t IVP_Constraint_Local::~IVP_Constraint_Local()
t IVP_Controller_Golem::reset_time(IVP_Time)
t IVP_Controller_Golem::set_prime_position(IVP_U_Point const*, IVP_U_Float_Point const*, IVP_Time const&)
t IVP_Controller_Golem::set_prime_orientation(IVP_U_Quat const*, IVP_Time const&, IVP_U_Quat const*, float)
t IVP_Controller_Golem::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Controller_Golem::beam_object_to_target_position(IVP_Event_Sim*)
t IVP_Controller_Golem::IVP_Controller_Golem(IVP_Real_Object*, IVP_Template_Controller_Golem const*)
t IVP_Controller_Golem::IVP_Controller_Golem(IVP_Real_Object*, IVP_Template_Controller_Golem const*)
t IVP_Controller_Golem::~IVP_Controller_Golem()
t IVP_Controller_Golem::~IVP_Controller_Golem()
t IVP_Controller_Golem::~IVP_Controller_Golem()
t IVP_Controller_VHash::controller_to_index(IVP_Controller*)
t IVP_Controller_VHash::~IVP_Controller_VHash()
t IVP_Controller_VHash::~IVP_Controller_VHash()
t IVP_Controller_VHash::~IVP_Controller_VHash()
t IVP_Core_Fast_Static::get_inv_masses()
t IVP_Friction_Manager::generate_contact_point(IVP_Mindist*, IVP_BOOL*)
t IVP_Friction_Manager::get_associated_contact_point(IVP_Mindist*)
t IVP_Friction_Manager::delete_all_contact_points_of_object(IVP_Real_Object*)
t IVP_Intrusion_Status::p()
t IVP_Intrusion_Status::print(char const*)
t IVP_Intrusion_Status::IVP_Intrusion_Status()
t IVP_Intrusion_Status::IVP_Intrusion_Status()
t IVP_Intrusion_Status::~IVP_Intrusion_Status()
t IVP_Intrusion_Status::~IVP_Intrusion_Status()
t IVP_Listener_Phantom::IVP_Listener_Phantom()
t IVP_Listener_Phantom::IVP_Listener_Phantom()
t IVP_Material_Manager::get_damping(IVP_Contact_Situation*)
t IVP_Material_Manager::get_adhesion(IVP_Contact_Situation*)
t IVP_Material_Manager::get_elasticity(IVP_Contact_Situation*)
t IVP_Material_Manager::get_friction_factor(IVP_Contact_Situation*)
t IVP_Material_Manager::get_material_by_index(IVP_Real_Object*, IVP_U_Point const*, int)
t IVP_Material_Manager::environment_will_be_deleted(IVP_Environment*)
t IVP_Material_Manager::IVP_Material_Manager(IVP_BOOL)
t IVP_Material_Manager::IVP_Material_Manager(IVP_BOOL)
t IVP_Material_Manager::~IVP_Material_Manager()
t IVP_Material_Manager::~IVP_Material_Manager()
t IVP_Material_Manager::~IVP_Material_Manager()
t IVP_Mindist_Settings::set_collision_tolerance(float, float)
t IVP_Mindist_Settings::set_event_queue_min_delta_time_base(float)
t IVP_Mindist_Settings::IVP_Mindist_Settings()
t IVP_Mindist_Settings::IVP_Mindist_Settings()
t IVP_Mutual_Energizer::calc_energy_potential(float, float, float, float, float)
t IVP_Mutual_Energizer::calc_energy_potential()
t IVP_Mutual_Energizer::init_mutual_energizer(IVP_Core*, IVP_Core*)
t IVP_Mutual_Energizer::destroy_percent_energy(float)
t IVP_Mutual_Energizer::calc_impulse_to_reduce_energy_level(float, float, float, float)
t IVP_Ray_Hit_Listener::~IVP_Ray_Hit_Listener()
t IVP_Ray_Hit_Listener::~IVP_Ray_Hit_Listener()
t IVP_Ray_Hit_Listener::~IVP_Ray_Hit_Listener()
t IVP_Ray_Solver_Group::check_ray_group_against_cube(IVP_U_Float_Point const*, float)
t IVP_Ray_Solver_Group::check_ray_group_against_node(IVP_OV_Node*, IVP_OV_Tree_Manager*)
t IVP_Ray_Solver_Group::check_ray_group_against_object(IVP_Real_Object*)
t IVP_Ray_Solver_Group::check_ray_group_against_all_objects_in_sim(IVP_Environment const*)
t IVP_Ray_Solver_Group::IVP_Ray_Solver_Group(int, IVP_Ray_Solver**)
t IVP_Ray_Solver_Group::IVP_Ray_Solver_Group(int, IVP_Ray_Solver**)
t IVP_Real_Object_Fast::IVP_Real_Object_Fast(IVP_Cluster*, IVP_Template_Object const*)
t IVP_Real_Object_Fast::IVP_Real_Object_Fast(IVP_Cluster*, IVP_Template_Object const*)
t IVP_Real_Object_Fast::~IVP_Real_Object_Fast()
t IVP_Real_Object_Fast::~IVP_Real_Object_Fast()
t IVP_Real_Object_Fast::~IVP_Real_Object_Fast()
t IVP_Template_Phantom::IVP_Template_Phantom()
t IVP_Template_Phantom::IVP_Template_Phantom()
t IVP_Template_Polygon::IVP_Template_Polygon(int, int, int)
t IVP_Template_Polygon::IVP_Template_Polygon()
t IVP_Template_Polygon::IVP_Template_Polygon(int, int, int)
t IVP_Template_Polygon::IVP_Template_Polygon()
t IVP_Template_Polygon::~IVP_Template_Polygon()
t IVP_Template_Polygon::~IVP_Template_Polygon()
t IVP_Template_Rot_Mot::IVP_Template_Rot_Mot()
t IVP_Template_Rot_Mot::IVP_Template_Rot_Mot()
t IVP_Template_Surface::init_surface(int)
t IVP_Template_Surface::close_surface()
t IVP_Template_Surface::get_surface_index()
t IVP_Template_Surface::calc_surface_normal_template(int, int, int)
t IVP_Template_Surface::IVP_Template_Surface()
t IVP_Template_Surface::IVP_Template_Surface()
t IVP_Template_Surface::~IVP_Template_Surface()
t IVP_Template_Surface::~IVP_Template_Surface()
t IVP_U_BigVector_Base::increment_mem()
t IVP_Universe_Manager::event_object_deleted(IVP_Real_Object*)
t IVP_Universe_Manager::object_no_longer_needed(IVP_Real_Object*)
t IVP_Universe_Manager::provide_universe_settings()
t IVP_Universe_Manager::ensure_objects_in_environment(IVP_Real_Object*, IVP_U_Float_Point*, float)
t IVV_Cluster_Min_Hash::remove_min()
t IVV_Cluster_Min_Hash::change_value(void*, float)
t IVV_Cluster_Min_Hash::min_added_at_index(IVV_Cluster_Min_Hash_Elem*, int)
t IVV_Cluster_Min_Hash::min_removed_at_index(IVV_Cluster_Min_Hash_Elem*, int)
t IVV_Cluster_Min_Hash::add(void*, float)
t IVV_Cluster_Min_Hash::remove(void*)
t IVV_Cluster_Min_Hash::is_elem(void*)
t IVV_Cluster_Min_Hash::IVV_Cluster_Min_Hash(int)
t IVV_Cluster_Min_Hash::IVV_Cluster_Min_Hash(int)
t IVV_Cluster_Min_Hash::~IVV_Cluster_Min_Hash()
t IVV_Cluster_Min_Hash::~IVV_Cluster_Min_Hash()
t SplitScreenConVarRef::Init(char const*, bool)
t SplitScreenConVarRef::SplitScreenConVarRef(IConVar*)
t SplitScreenConVarRef::SplitScreenConVarRef(char const*)
t SplitScreenConVarRef::SplitScreenConVarRef(char const*, bool)
t SplitScreenConVarRef::SplitScreenConVarRef(IConVar*)
t SplitScreenConVarRef::SplitScreenConVarRef(char const*)
t SplitScreenConVarRef::SplitScreenConVarRef(char const*, bool)
t vehicle_axleparams_t::GetBaseMap()
d vehicle_axleparams_t::m_DataMap
t vehicle_bodyparams_t::GetBaseMap()
d vehicle_bodyparams_t::m_DataMap
t CPhysicsCollisionData::GetContactPoint(Vector&)
t CPhysicsCollisionData::GetContactSpeed(Vector&)
t CPhysicsCollisionData::GetSurfaceNormal(Vector&)
t CStackMemoryDispenser::RecurseDelete(void*)
t CUtlCStringConversion::FindConversion(char const*, int*)
t CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
t CUtlCStringConversion::CUtlCStringConversion(char, char const*, int, CUtlCharConversion::ConversionArray_t*)
t CVPhysicsDebugOverlay::AddBoxOverlay(Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
t CVPhysicsDebugOverlay::AddLineOverlay(Vector const&, Vector const&, int, int, int, bool, float)
t CVPhysicsDebugOverlay::AddTextOverlay(Vector const&, float, char const*, ...)
t CVPhysicsDebugOverlay::AddTextOverlay(Vector const&, int, float, char const*, ...)
t CVPhysicsDebugOverlay::AddTextOverlayRGB(Vector const&, int, float, float, float, float, float, char const*, ...)
t CVPhysicsDebugOverlay::AddSweptBoxOverlay(Vector const&, Vector const&, Vector const&, Vector const&, QAngle const&, int, int, int, int, float)
t CVPhysicsDebugOverlay::AddTriangleOverlay(Vector const&, Vector const&, Vector const&, int, int, int, int, bool, float)
t CVPhysicsDebugOverlay::AddEntityTextOverlay(int, int, float, int, int, int, int, char const*, ...)
t CVPhysicsDebugOverlay::AddScreenTextOverlay(float, float, float, int, int, int, int, char const*)
t CVPhysicsPackedParser::ParseFluid(fluid_t*, IVPhysicsKeyHandler*)
t CVPhysicsPackedParser::ParseSolid(solid_t*, IVPhysicsKeyHandler*)
t CVPhysicsPackedParser::ParseCustom(void*, IVPhysicsKeyHandler*)
t CVPhysicsPackedParser::ParseFields(unsigned char*, parsefield_t*, int, IVPhysicsKeyHandler*)
t CVPhysicsPackedParser::ParseVehicle(vehicleparams_t*, IVPhysicsKeyHandler*)
t CVPhysicsPackedParser::ParseSurfaceTable(int*, IVPhysicsKeyHandler*)
t CVPhysicsPackedParser::GetCurrentBlockName()
t CVPhysicsPackedParser::ParseCollisionRules(ragdollcollisionrules_t*, IVPhysicsKeyHandler*)
t CVPhysicsPackedParser::ParseRagdollConstraint(constraint_ragdollparams_t*, IVPhysicsKeyHandler*)
t CVPhysicsPackedParser::ParseRagdollAnimatedFriction(ragdollanimatedfriction_t*, IVPhysicsKeyHandler*)
t CVPhysicsPackedParser::Finished()
t CVPhysicsPackedParser::NextBlock()
t CVPhysicsPackedParser::SkipBlock()
t CVPhysicsPackedParser::CVPhysicsPackedParser(char const*)
t CVPhysicsPackedParser::CVPhysicsPackedParser(char const*)
t CVPhysicsPackedParser::~CVPhysicsPackedParser()
t CVPhysicsPackedParser::~CVPhysicsPackedParser()
t CVPhysicsPackedParser::~CVPhysicsPackedParser()
t hk_Ragdoll_Constraint::init_constraint(void const*)
t hk_Ragdoll_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Ragdoll_Constraint::update_friction(float)
t hk_Ragdoll_Constraint::update_transforms(hk_Transform const&, hk_Transform const&)
t hk_Ragdoll_Constraint::apply_angular_part(hk_PSI_Info&, hk_Ragdoll_Constraint_Work&)
t hk_Ragdoll_Constraint::apply_effector_PSI(hk_PSI_Info&)
t hk_Ragdoll_Constraint::get_constraint_dof()
t hk_Ragdoll_Constraint::write_to_blueprint(hk_Ragdoll_Constraint_BP*)
t hk_Ragdoll_Constraint::get_constraint_type()
t hk_Ragdoll_Constraint::get_vmq_storage_size()
t hk_Ragdoll_Constraint::init_ragdoll_constraint(hk_Ragdoll_Constraint_BP const*, hk_Local_Constraint_System*)
t hk_Ragdoll_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Ragdoll_Constraint::hk_Ragdoll_Constraint(hk_Environment*, hk_Ragdoll_Constraint_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Ragdoll_Constraint::hk_Ragdoll_Constraint(hk_Local_Constraint_System*, hk_Ragdoll_Constraint_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Ragdoll_Constraint::hk_Ragdoll_Constraint(hk_Environment*, hk_Ragdoll_Constraint_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Ragdoll_Constraint::hk_Ragdoll_Constraint(hk_Local_Constraint_System*, hk_Ragdoll_Constraint_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Ragdoll_Constraint::~hk_Ragdoll_Constraint()
t hk_Ragdoll_Constraint::~hk_Ragdoll_Constraint()
t hk_Ragdoll_Constraint::~hk_Ragdoll_Constraint()
t IVP_3D_Solver_KK_COLL::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
t IVP_3D_Solver_PF_COLL::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
t IVP_3D_Solver_PK_COLL::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
t IVP_Active_Value_Hash::object_to_index(IVP_U_Active_Value*)
t IVP_Active_Value_Hash::add_active_value(IVP_U_Active_Value*)
t IVP_Active_Value_Hash::find_active_value(IVP_U_Active_Value*)
t IVP_Active_Value_Hash::remove_active_value(IVP_U_Active_Value*)
t IVP_Active_Value_Hash::IVP_Active_Value_Hash(int)
t IVP_Active_Value_Hash::IVP_Active_Value_Hash(int)
t IVP_Active_Value_Hash::~IVP_Active_Value_Hash()
t IVP_Active_Value_Hash::~IVP_Active_Value_Hash()
t IVP_Active_Value_Hash::~IVP_Active_Value_Hash()
t IVP_Anchor_Check_Dist::init_anchor_check_dist(IVP_Real_Object*, IVP_U_Point*, IVP_Actuator_Check_Dist*)
t IVP_Anchor_Check_Dist::hull_limit_exceeded_event(IVP_Hull_Manager*, float)
t IVP_Anchor_Check_Dist::hull_manager_is_going_to_be_deleted_event(IVP_Hull_Manager*)
t IVP_Anchor_Check_Dist::get_type()
t IVP_Anchor_Check_Dist::IVP_Anchor_Check_Dist()
t IVP_Anchor_Check_Dist::IVP_Anchor_Check_Dist()
t IVP_Anchor_Check_Dist::~IVP_Anchor_Check_Dist()
t IVP_Anchor_Check_Dist::~IVP_Anchor_Check_Dist()
t IVP_Anchor_Check_Dist::~IVP_Anchor_Check_Dist()
t IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::element_added(IVP_U_Set_Active<IVP_Core>*, IVP_Core*)
t IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::element_removed(IVP_U_Set_Active<IVP_Core>*, IVP_Core*)
t IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::pset_is_going_to_be_deleted(IVP_U_Set_Active<IVP_Core>*)
t IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::~IVP_Attacher_To_Cores()
t IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::~IVP_Attacher_To_Cores()
t IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>::~IVP_Attacher_To_Cores()
t IVP_Cache_Ledge_Point::get_object_cache()
t IVP_Cache_Ledge_Point::remove_reference()
t IVP_Cache_Ledge_Point::get_compact_ledge()
t IVP_Cache_Ledge_Point::init_cache_ledge_point(IVP_Real_Object*, IVP_Compact_Ledge const*)
t IVP_Cache_Ledge_Point::get_core()
t IVP_Cache_Ledge_Point::IVP_Cache_Ledge_Point(IVP_Real_Object*, IVP_Compact_Ledge const*)
t IVP_Cache_Ledge_Point::IVP_Cache_Ledge_Point()
t IVP_Cache_Ledge_Point::IVP_Cache_Ledge_Point(IVP_Real_Object*, IVP_Compact_Ledge const*)
t IVP_Cache_Ledge_Point::IVP_Cache_Ledge_Point()
t IVP_Compact_Recursive::add_compact_ledge(IVP_Compact_Ledge const*)
t IVP_Compact_Recursive::build_convex_hull()
t IVP_Compact_Recursive::add_compact_surface(IVP_Compact_Surface const*)
t IVP_Compact_Recursive::set_rekursive_convex_hull()
t IVP_Compact_Recursive::add_compact_ledge_treenode(IVP_Compact_Ledgetree_Node const*)
t IVP_Compact_Recursive::compile()
t IVP_Compact_Recursive::IVP_Compact_Recursive()
t IVP_Compact_Recursive::IVP_Compact_Recursive()
t IVP_Compact_Recursive::~IVP_Compact_Recursive()
t IVP_Compact_Recursive::~IVP_Compact_Recursive()
t IVP_Contact_Point_API::get_vert_force(IVP_Contact_Point*)
t IVP_Contact_Point_API::get_eliminated_energy(IVP_Contact_Point*)
t IVP_Contact_Point_API::get_surface_normal_ws(IVP_Contact_Point*, IVP_U_Float_Point*)
t IVP_Contact_Point_API::reset_eliminated_energy(IVP_Contact_Point*)
t IVP_Controller_Motion::set_max_torque(IVP_U_Float_Point const*)
t IVP_Controller_Motion::set_damp_factor(float)
t IVP_Controller_Motion::set_force_factor(float)
t IVP_Controller_Motion::set_torque_factor(float)
t IVP_Controller_Motion::set_target_position_ws(IVP_U_Point const*)
t IVP_Controller_Motion::get_controller_priority()
t IVP_Controller_Motion::set_angular_damp_factor(float)
t IVP_Controller_Motion::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Controller_Motion::set_max_translation_force(IVP_U_Float_Point const*)
t IVP_Controller_Motion::set_target_q_world_f_core(IVP_U_Quat const*)
t IVP_Controller_Motion::set_target_object_position_ws(IVP_Real_Object*, IVP_U_Quat const*, IVP_U_Point const*)
t IVP_Controller_Motion::core_is_going_to_be_deleted_event(IVP_Core*)
t IVP_Controller_Motion::IVP_Controller_Motion(IVP_Real_Object*, IVP_Template_Controller_Motion const*)
t IVP_Controller_Motion::IVP_Controller_Motion(IVP_Real_Object*, IVP_Template_Controller_Motion const*)
t IVP_Controller_Motion::~IVP_Controller_Motion()
t IVP_Controller_Motion::~IVP_Controller_Motion()
t IVP_Controller_Motion::~IVP_Controller_Motion()
t IVP_Draw_Vector_Debug::IVP_Draw_Vector_Debug()
t IVP_Draw_Vector_Debug::IVP_Draw_Vector_Debug()
t IVP_Draw_Vector_Debug::~IVP_Draw_Vector_Debug()
t IVP_Draw_Vector_Debug::~IVP_Draw_Vector_Debug()
t IVP_Hull_Manager_Base::IVP_Hull_Manager_Base()
t IVP_Hull_Manager_Base::IVP_Hull_Manager_Base()
t IVP_Hull_Manager_Base::~IVP_Hull_Manager_Base()
t IVP_Hull_Manager_Base::~IVP_Hull_Manager_Base()
t IVP_Mindist_Recursive::is_recursive()
t IVP_Mindist_Recursive::delete_all_children()
t IVP_Mindist_Recursive::mindist_rescue_push()
t IVP_Mindist_Recursive::recheck_recursive_childs(float)
t IVP_Mindist_Recursive::get_spawned_mindist_count()
t IVP_Mindist_Recursive::exact_mindist_went_invalid(IVP_Mindist_Manager*)
t IVP_Mindist_Recursive::invalid_mindist_went_exact()
t IVP_Mindist_Recursive::change_spawned_mindist_count(int)
t IVP_Mindist_Recursive::rec_hull_limit_exceeded_event()
t IVP_Mindist_Recursive::collision_is_going_to_be_deleted_event(IVP_Collision*)
t IVP_Mindist_Recursive::do_impact()
t IVP_Mindist_Recursive::IVP_Mindist_Recursive(IVP_Environment*, IVP_Collision_Delegator*)
t IVP_Mindist_Recursive::IVP_Mindist_Recursive(IVP_Environment*, IVP_Collision_Delegator*)
t IVP_Mindist_Recursive::~IVP_Mindist_Recursive()
t IVP_Mindist_Recursive::~IVP_Mindist_Recursive()
t IVP_Mindist_Recursive::~IVP_Mindist_Recursive()
t IVP_Sim_Units_Manager::reset_time(IVP_Time)
t IVP_Sim_Units_Manager::add_unit_to_slot(IVP_Simulation_Unit*, IVP_Simulation_Unit**)
t IVP_Sim_Units_Manager::rem_unit_from_slot(IVP_Simulation_Unit*, IVP_Simulation_Unit**)
t IVP_Sim_Units_Manager::simulate_sim_units_psi(IVP_Environment*, IVP_U_Vector<IVP_Core>*)
t IVP_Sim_Units_Manager::add_sim_unit_to_manager(IVP_Simulation_Unit*)
t IVP_Sim_Units_Manager::rem_sim_unit_from_manager(IVP_Simulation_Unit*)
t IVP_Sim_Units_Manager::IVP_Sim_Units_Manager(IVP_Environment*)
t IVP_Sim_Units_Manager::IVP_Sim_Units_Manager(IVP_Environment*)
t IVP_Statistic_Manager::clear_statistic()
t IVP_Statistic_Manager::output_statistic()
t IVP_Statistic_Manager::IVP_Statistic_Manager()
t IVP_Statistic_Manager::IVP_Statistic_Manager()
t IVP_Template_Buoyancy::IVP_Template_Buoyancy()
t IVP_Template_Buoyancy::IVP_Template_Buoyancy()
t IVP_Vector_of_Cores_2::~IVP_Vector_of_Cores_2()
t IVP_Vector_of_Objects::reset()
t IVP_Vector_of_Objects::IVP_Vector_of_Objects()
t IVP_Vector_of_Objects::IVP_Vector_of_Objects()
t vehicle_wheelparams_t::GetBaseMap()
d vehicle_wheelparams_t::m_DataMap
t CCleanupUtlSymbolTable::~CCleanupUtlSymbolTable()
t CCleanupUtlSymbolTable::~CCleanupUtlSymbolTable()
t CCountedStringPoolBase<unsigned int>::RestoreFromBuffer(CUtlBuffer&)
t CCountedStringPoolBase<unsigned short>::RestoreFromBuffer(CUtlBuffer&)
t compactsurfaceheader_t::GetBaseMap()
d compactsurfaceheader_t::m_DataMap
t CPolyhedron_AllocByNew::Release()
t CPolyhedron_AllocByNew::Allocate(unsigned short, unsigned short, unsigned short, unsigned short)
t CPolyhedron_AllocByNew::~CPolyhedron_AllocByNew()
t CPolyhedron_AllocByNew::~CPolyhedron_AllocByNew()
t CPolyhedron_AllocByNew::~CPolyhedron_AllocByNew()
t CPolyhedron_TempMemory::Release()
t CPolyhedron_TempMemory::~CPolyhedron_TempMemory()
t CPolyhedron_TempMemory::~CPolyhedron_TempMemory()
t CPolyhedron_TempMemory::~CPolyhedron_TempMemory()
t IPhysicsObjectPairHash::~IPhysicsObjectPairHash()
t IPhysicsObjectPairHash::~IPhysicsObjectPairHash()
t IPhysicsObjectPairHash::~IPhysicsObjectPairHash()
t IVP_Actuator_Two_Point::get_actuator_anchor(int)
t IVP_Actuator_Two_Point::ensure_actuator_in_simulation()
t IVP_Actuator_Two_Point::IVP_Actuator_Two_Point(IVP_Environment*, IVP_Template_Two_Point*, IVP_ACTUATOR_TYPE)
t IVP_Actuator_Two_Point::IVP_Actuator_Two_Point(IVP_Environment*, IVP_Template_Two_Point*, IVP_ACTUATOR_TYPE)
t IVP_Actuator_Two_Point::~IVP_Actuator_Two_Point()
t IVP_Actuator_Two_Point::~IVP_Actuator_Two_Point()
t IVP_Actuator_Two_Point::~IVP_Actuator_Two_Point()
t IVP_BetterDebugmanager::output_function(IVP_DEBUG_CLASS, char const*)
t IVP_BetterDebugmanager::is_debug_enabled(IVP_DEBUG_CLASS)
t IVP_BetterDebugmanager::enable_debug_output(IVP_DEBUG_CLASS)
t IVP_BetterDebugmanager::disable_debug_output(IVP_DEBUG_CLASS)
t IVP_BetterDebugmanager::dprint(IVP_DEBUG_CLASS, char const*, ...)
t IVP_BetterDebugmanager::IVP_BetterDebugmanager()
t IVP_BetterDebugmanager::IVP_BetterDebugmanager()
t IVP_BetterDebugmanager::~IVP_BetterDebugmanager()
t IVP_BetterDebugmanager::~IVP_BetterDebugmanager()
t IVP_BetterDebugmanager::~IVP_BetterDebugmanager()
t IVP_Compact_Poly_Point::set_client_data(void*)
t IVP_Compact_Poly_Point::IVP_Compact_Poly_Point(IVP_U_Point*)
t IVP_Compact_Poly_Point::IVP_Compact_Poly_Point(IVP_U_Point*)
t IVP_Controller_Manager::add_controller_to_core(IVP_Controller_Independent*, IVP_Core*)
t IVP_Controller_Manager::ensure_core_in_simulation(IVP_Core*)
t IVP_Controller_Manager::remove_controller_from_core(IVP_Controller_Independent*, IVP_Core*)
t IVP_Controller_Manager::ensure_controller_in_simulation(IVP_Controller_Dependent*)
t IVP_Controller_Manager::announce_controller_to_environment(IVP_Controller_Dependent*)
t IVP_Controller_Manager::remove_controller_from_environment(IVP_Controller_Dependent*, IVP_BOOL)
t IVP_Controller_Phantom::add_sleeping_object(IVP_Real_Object*)
t IVP_Controller_Phantom::event_object_frozen(IVP_Event_Object*)
t IVP_Controller_Phantom::mindist_left_volume(IVP_Mindist*)
t IVP_Controller_Phantom::add_listener_phantom(IVP_Listener_Phantom*)
t IVP_Controller_Phantom::event_object_created(IVP_Event_Object*)
t IVP_Controller_Phantom::event_object_deleted(IVP_Event_Object*)
t IVP_Controller_Phantom::event_object_revived(IVP_Event_Object*)
t IVP_Controller_Phantom::fire_event_core_left(IVP_Core*)
t IVP_Controller_Phantom::get_intruding_mindists()
t IVP_Controller_Phantom::mindist_entered_volume(IVP_Mindist*)
t IVP_Controller_Phantom::remove_sleeping_object(IVP_Real_Object*)
t IVP_Controller_Phantom::fire_event_core_entered(IVP_Core*)
t IVP_Controller_Phantom::remove_listener_phantom(IVP_Listener_Phantom*)
t IVP_Controller_Phantom::wake_all_sleeping_objects()
t IVP_Controller_Phantom::IVP_Controller_Phantom(IVP_Real_Object*, IVP_Template_Phantom const*)
t IVP_Controller_Phantom::IVP_Controller_Phantom(IVP_Real_Object*, IVP_Template_Phantom const*)
t IVP_Controller_Phantom::~IVP_Controller_Phantom()
t IVP_Controller_Phantom::~IVP_Controller_Phantom()
t IVP_Controller_Phantom::~IVP_Controller_Phantom()
t IVP_Friction_Core_Pair::debug_printf_pair()
t IVP_Friction_Core_Pair::number_of_pair_dists()
t IVP_Friction_Core_Pair::set_friction_vectors(IVP_U_Float_Point*)
t IVP_Friction_Core_Pair::add_fr_dist_obj_pairs(IVP_Contact_Point*)
t IVP_Friction_Core_Pair::del_fr_dist_obj_pairs(IVP_Contact_Point*)
t IVP_Friction_Core_Pair::destroy_mutual_energy(float)
t IVP_Friction_Core_Pair::get_average_friction_vector(IVP_U_Float_Point*)
t IVP_Friction_Core_Pair::debug_read_vector_after_ease()
t IVP_Friction_Core_Pair::debug_store_vector_before_ease()
t IVP_Friction_Core_Pair::check_all_fr_mindists_to_be_valid(IVP_Friction_System*)
t IVP_Friction_Core_Pair::remove_energy_gained_by_real_friction()
t IVP_Friction_Core_Pair::IVP_Friction_Core_Pair()
t IVP_Friction_Core_Pair::IVP_Friction_Core_Pair()
t IVP_Friction_Core_Pair::~IVP_Friction_Core_Pair()
t IVP_Friction_Core_Pair::~IVP_Friction_Core_Pair()
t IVP_Listener_Collision::event_pre_collision(IVP_Event_Collision*)
t IVP_Listener_Collision::event_post_collision(IVP_Event_Collision*)
t IVP_Listener_Collision::get_enabled_callbacks()
t IVP_Listener_Collision::event_friction_created(IVP_Event_Friction*)
t IVP_Listener_Collision::event_friction_deleted(IVP_Event_Friction*)
t IVP_Listener_Collision::event_friction_pair_created(IVP_Friction_Core_Pair*)
t IVP_Listener_Collision::event_friction_pair_deleted(IVP_Friction_Core_Pair*)
t IVP_Listener_Collision::event_collision_object_deleted(IVP_Real_Object*)
t IVP_Listener_Collision::IVP_Listener_Collision(int)
t IVP_Listener_Collision::IVP_Listener_Collision(int)
t IVP_Listener_Collision::~IVP_Listener_Collision()
t IVP_Listener_Collision::~IVP_Listener_Collision()
t IVP_Listener_Collision::~IVP_Listener_Collision()
t IVP_PerformanceCounter::IVP_PerformanceCounter()
t IVP_PerformanceCounter::IVP_PerformanceCounter()
t IVP_PerformanceCounter::~IVP_PerformanceCounter()
t IVP_PerformanceCounter::~IVP_PerformanceCounter()
t IVP_PerformanceCounter::~IVP_PerformanceCounter()
t IVP_Rot_Inertia_Solver::find_center_given_xyz(IVP_U_BigVector<IVP_Compact_Ledge>*, int, int, int, IVP_U_Matrix const*, float*, float*, float*)
t IVP_Rot_Inertia_Solver::calc_mass_center_and_rotation_inertia(IVP_Compact_Surface const*, IVP_U_Point*, IVP_U_Point*)
t IVP_Rot_Inertia_Solver::calc_mass_center_and_rotation_inertia_fast(IVP_Compact_Surface const*, IVP_U_Point*, IVP_U_Point*)
t IVP_Template_Two_Point::IVP_Template_Two_Point()
t IVP_Template_Two_Point::IVP_Template_Two_Point()
t vehicle_engineparams_t::GetBaseMap()
d vehicle_engineparams_t::m_DataMap
t CEmptyCollisionListener::StartTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
t CEmptyCollisionListener::PreCollision(vcollisionevent_t*)
t CEmptyCollisionListener::FluidEndTouch(IPhysicsObject*, IPhysicsFluidController*)
t CEmptyCollisionListener::PostCollision(vcollisionevent_t*)
t CEmptyCollisionListener::FluidStartTouch(IPhysicsObject*, IPhysicsFluidController*)
t CEmptyCollisionListener::ObjectEnterTrigger(IPhysicsObject*, IPhysicsObject*)
t CEmptyCollisionListener::ObjectLeaveTrigger(IPhysicsObject*, IPhysicsObject*)
t CEmptyCollisionListener::PostSimulationFrame()
t CEmptyCollisionListener::EndTouch(IPhysicsObject*, IPhysicsObject*, IPhysicsCollisionData*)
t CEmptyCollisionListener::Friction(IPhysicsObject*, float, int, int, IPhysicsCollisionData*)
t CPhysCollideVirtualMesh::BuildLedges()
t CPhysCollideVirtualMesh::SetMassCenter(Vector const&)
t CPhysCollideVirtualMesh::BuildBoundingLedge()
t CPhysCollideVirtualMesh::CreateMeshBoundingHull(virtualmeshlist_t const&)
t CPhysCollideVirtualMesh::GetAllLedgesWithinRadius(IVP_U_Point const*, float, IVP_U_BigVector<IVP_Compact_Ledge>*, IVP_Compact_Ledge const*)
t CPhysCollideVirtualMesh::CreateBoundingSurfaceFromRange(virtualmeshlist_t const&, int, int)
t CPhysCollideVirtualMesh::AddRef()
t CPhysCollideVirtualMesh::Release()
t CPhysCollideVirtualMesh::~CPhysCollideVirtualMesh()
t CPhysCollideVirtualMesh::~CPhysCollideVirtualMesh()
t CPhysCollideVirtualMesh::~CPhysCollideVirtualMesh()
t CPhysicsConstraintGroup::GetErrorParams(constraint_groupparams_t*)
t CPhysicsConstraintGroup::IsInErrorState()
t CPhysicsConstraintGroup::SetErrorParams(constraint_groupparams_t const&)
t CPhysicsConstraintGroup::ClearErrorState()
t CPhysicsConstraintGroup::SolvePenetration(IPhysicsObject*, IPhysicsObject*)
t CPhysicsConstraintGroup::Activate()
t CPhysicsConstraintGroup::CPhysicsConstraintGroup(IVP_Environment*, constraint_groupparams_t const&)
t CPhysicsConstraintGroup::CPhysicsConstraintGroup(IVP_Environment*, constraint_groupparams_t const&)
t CPhysicsConstraintGroup::~CPhysicsConstraintGroup()
t CPhysicsConstraintGroup::~CPhysicsConstraintGroup()
t CPhysicsConstraintGroup::~CPhysicsConstraintGroup()
t CPhysicsFluidController::SetGameData(void*)
t CPhysicsFluidController::GetIVPObject()
t CPhysicsFluidController::WakeAllSleepingObjects()
t CPhysicsFluidController::CPhysicsFluidController(CBuoyancyAttacher*, IVP_Liquid_Surface_Descriptor*, CPhysicsObject*, int)
t CPhysicsFluidController::CPhysicsFluidController(CBuoyancyAttacher*, IVP_Liquid_Surface_Descriptor*, CPhysicsObject*, int)
t CPhysicsFluidController::~CPhysicsFluidController()
t CPhysicsFluidController::~CPhysicsFluidController()
t CPhysicsFluidController::~CPhysicsFluidController()
t CPredictedPhysicsObject::AddVelocity(Vector const*, Vector const*)
t CPredictedPhysicsObject::SetPosition(Vector const&, QAngle const&, bool)
t CPredictedPhysicsObject::SetVelocity(Vector const*, Vector const*)
t CPredictedPhysicsObject::PreSimulation(bool)
t CPredictedPhysicsObject::PostSimulation(float, bool)
t CPredictedPhysicsObject::PreAnyController(float, bool)
t CPredictedPhysicsObject::ResetErrorDeltas()
t CPredictedPhysicsObject::PostAnyController(float, bool)
t CPredictedPhysicsObject::PullDeltasForward(vphysics_save_cphysicsobject_t*, vphysics_save_cphysicsobject_t const*, float)
t CPredictedPhysicsObject::SetPositionMatrix(matrix3x4_t const&, bool)
t CPredictedPhysicsObject::SetErrorDelta_Position(Vector const&)
t CPredictedPhysicsObject::SetErrorDelta_Velocity(Vector const&)
t CPredictedPhysicsObject::SetVelocityInstantaneous(Vector const*, Vector const*)
t CPredictedPhysicsObject::OnPredictionCommandChanged(int, bool)
t CPredictedPhysicsObject::DoneReferencingPreviousCommands(int)
t CPredictedPhysicsObject::CPredictedPhysicsObject()
t CPredictedPhysicsObject::CPredictedPhysicsObject()
t CPredictedPhysicsObject::~CPredictedPhysicsObject()
t CPredictedPhysicsObject::~CPredictedPhysicsObject()
t CPredictedPhysicsObject::~CPredictedPhysicsObject()
t CSplitScreenAddedConVar::~CSplitScreenAddedConVar()
t CSplitScreenAddedConVar::~CSplitScreenAddedConVar()
t CSplitScreenAddedConVar::~CSplitScreenAddedConVar()
t CTraceSolverSweptObject::SweepLedgeTree(IVP_Compact_Ledgetree_Node const*)
t CTraceSolverSweptObject::DoSweep()
t CTraceSolverSweptObject::InitOSRay()
t CTraceSolverSweptObject::CTraceSolverSweptObject(CGameTrace*, ITraceObject*, float, CTraceRay*, CTraceIVP*, Vector const&, unsigned int, IConvexInfo*)
t CTraceSolverSweptObject::CTraceSolverSweptObject(CGameTrace*, ITraceObject*, float, CTraceRay*, CTraceIVP*, Vector const&, unsigned int, IConvexInfo*)
t CUtlFilenameSymbolTable::SpewStrings()
t CUtlFilenameSymbolTable::FindFileName(char const*)
t CUtlFilenameSymbolTable::SaveToBuffer(CUtlBuffer&)
t CUtlFilenameSymbolTable::FindOrAddFileName(char const*)
t CUtlFilenameSymbolTable::RestoreFromBuffer(CUtlBuffer&)
t CUtlFilenameSymbolTable::String(void* const&, char*, int)
t CUtlFilenameSymbolTable::RemoveAll()
t CUtlVectorFixedGrowable<int, 64u>::~CUtlVectorFixedGrowable()
t CUtlVectorFixedGrowable<int, 64u>::~CUtlVectorFixedGrowable()
t CVPhysPtrSaveRestoreOps::PreRestore()
t CVPhysPtrSaveRestoreOps::PostRestore()
t CVPhysPtrSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
t CVPhysPtrSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
t CVPhysPtrSaveRestoreOps::CVPhysPtrSaveRestoreOps()
t CVPhysPtrSaveRestoreOps::CVPhysPtrSaveRestoreOps()
t hk_Breakable_Constraint::init_constraint(void const*)
t hk_Breakable_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Breakable_Constraint::FireEventIfBroken()
t hk_Breakable_Constraint::apply_effector_PSI(hk_PSI_Info&)
t hk_Breakable_Constraint::get_constraint_dof()
t hk_Breakable_Constraint::write_to_blueprint(hk_Breakable_Constraint_BP*)
t hk_Breakable_Constraint::get_constraint_type()
t hk_Breakable_Constraint::get_vmq_storage_size()
t hk_Breakable_Constraint::init_breakable_constraint(hk_Breakable_Constraint_BP const*)
t hk_Breakable_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Breakable_Constraint::hk_Breakable_Constraint(hk_Environment*, hk_Breakable_Constraint_BP const*)
t hk_Breakable_Constraint::hk_Breakable_Constraint(hk_Local_Constraint_System*, hk_Breakable_Constraint_BP const*)
t hk_Breakable_Constraint::hk_Breakable_Constraint(hk_Environment*, hk_Breakable_Constraint_BP const*)
t hk_Breakable_Constraint::hk_Breakable_Constraint(hk_Local_Constraint_System*, hk_Breakable_Constraint_BP const*)
t hk_Breakable_Constraint::~hk_Breakable_Constraint()
t hk_Breakable_Constraint::~hk_Breakable_Constraint()
t hk_Breakable_Constraint::~hk_Breakable_Constraint()
t hk_Prismatic_Constraint::set_limits(float, float)
t hk_Prismatic_Constraint::set_friction(float)
t hk_Prismatic_Constraint::init_constraint(void const*)
t hk_Prismatic_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Prismatic_Constraint::apply_effector_PSI(hk_PSI_Info&)
t hk_Prismatic_Constraint::get_constraint_dof()
t hk_Prismatic_Constraint::reset_linear_limit()
t hk_Prismatic_Constraint::write_to_blueprint(hk_Prismatic_BP*)
t hk_Prismatic_Constraint::get_constraint_type()
t hk_Prismatic_Constraint::get_vmq_storage_size()
t hk_Prismatic_Constraint::init_prismatic_constraint(hk_Prismatic_BP const*, hk_Local_Constraint_System*)
t hk_Prismatic_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Prismatic_Constraint::set_motor(float, float)
t hk_Prismatic_Constraint::hk_Prismatic_Constraint(hk_Environment*, hk_Prismatic_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Prismatic_Constraint::hk_Prismatic_Constraint(hk_Local_Constraint_System*, hk_Prismatic_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Prismatic_Constraint::hk_Prismatic_Constraint(hk_Environment*, hk_Prismatic_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Prismatic_Constraint::hk_Prismatic_Constraint(hk_Local_Constraint_System*, hk_Prismatic_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Prismatic_Constraint::~hk_Prismatic_Constraint()
t hk_Prismatic_Constraint::~hk_Prismatic_Constraint()
t hk_Prismatic_Constraint::~hk_Prismatic_Constraint()
t hk_Rigid_Body_Binary_EF::get_effected_entities(hk_Array<hk_Rigid_Body*>&)
t hk_Rigid_Body_Binary_EF::hk_Rigid_Body_Binary_EF(hk_Environment*, hk_Rigid_Body*, hk_Rigid_Body*, IVP_CONTROLLER_PRIORITY)
t hk_Rigid_Body_Binary_EF::hk_Rigid_Body_Binary_EF(hk_Environment*, hk_Rigid_Body*, hk_Rigid_Body*, IVP_CONTROLLER_PRIORITY)
t IPhysicsConstraintGroup::~IPhysicsConstraintGroup()
t IPhysicsConstraintGroup::~IPhysicsConstraintGroup()
t IPhysicsConstraintGroup::~IPhysicsConstraintGroup()
t IPhysicsFluidController::~IPhysicsFluidController()
t IPhysicsFluidController::~IPhysicsFluidController()
t IPhysicsFluidController::~IPhysicsFluidController()
t IPredictedPhysicsObject::~IPredictedPhysicsObject()
t IPredictedPhysicsObject::~IPredictedPhysicsObject()
t IPredictedPhysicsObject::~IPredictedPhysicsObject()
t IVP_Actuator_Check_Dist::fire_check_dist_event(IVP_BOOL)
t IVP_Actuator_Check_Dist::hull_limit_exceeded_event()
t IVP_Actuator_Check_Dist::fire_check_dist_is_going_to_be_deleted_event()
t IVP_Actuator_Check_Dist::set_range(float)
t IVP_Actuator_Check_Dist::IVP_Actuator_Check_Dist(IVP_Environment*, IVP_Template_Check_Dist*)
t IVP_Actuator_Check_Dist::IVP_Actuator_Check_Dist(IVP_Environment*, IVP_Template_Check_Dist*)
t IVP_Actuator_Check_Dist::~IVP_Actuator_Check_Dist()
t IVP_Actuator_Check_Dist::~IVP_Actuator_Check_Dist()
t IVP_Actuator_Four_Point::get_actuator_anchor(int)
t IVP_Actuator_Four_Point::IVP_Actuator_Four_Point(IVP_Environment*, IVP_Template_Four_Point*, IVP_ACTUATOR_TYPE)
t IVP_Actuator_Four_Point::IVP_Actuator_Four_Point(IVP_Environment*, IVP_Template_Four_Point*, IVP_ACTUATOR_TYPE)
t IVP_Actuator_Four_Point::~IVP_Actuator_Four_Point()
t IVP_Actuator_Four_Point::~IVP_Actuator_Four_Point()
t IVP_Actuator_Four_Point::~IVP_Actuator_Four_Point()
t IVP_Actuator_Stabilizer::set_stabi_constant(float)
t IVP_Actuator_Stabilizer::get_controller_name()
t IVP_Actuator_Stabilizer::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Actuator_Stabilizer::IVP_Actuator_Stabilizer(IVP_Environment*, IVP_Template_Stabilizer*)
t IVP_Actuator_Stabilizer::IVP_Actuator_Stabilizer(IVP_Environment*, IVP_Template_Stabilizer*)
t IVP_Actuator_Stabilizer::~IVP_Actuator_Stabilizer()
t IVP_Actuator_Stabilizer::~IVP_Actuator_Stabilizer()
t IVP_Actuator_Stabilizer::~IVP_Actuator_Stabilizer()
t IVP_Actuator_Suspension::set_max_body_force(float)
t IVP_Actuator_Suspension::get_controller_name()
t IVP_Actuator_Suspension::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Actuator_Suspension::set_spring_damp_compression(float)
t IVP_Actuator_Suspension::IVP_Actuator_Suspension(IVP_Environment*, IVP_Template_Suspension*)
t IVP_Actuator_Suspension::IVP_Actuator_Suspension(IVP_Environment*, IVP_Template_Suspension*)
t IVP_Actuator_Suspension::~IVP_Actuator_Suspension()
t IVP_Actuator_Suspension::~IVP_Actuator_Suspension()
t IVP_Actuator_Suspension::~IVP_Actuator_Suspension()
t IVP_Collision_Delegator::get_spawned_mindist_count()
t IVP_Collision_Delegator::change_spawned_mindist_count(int)
t IVP_Collision_Delegator::~IVP_Collision_Delegator()
t IVP_Collision_Delegator::~IVP_Collision_Delegator()
t IVP_Collision_Delegator::~IVP_Collision_Delegator()
t IVP_Controller_Buoyancy::apply_dampening(IVP_Real_Object*, float, float, IVP_U_Float_Point*, IVP_U_Float_Point*, IVP_U_Float_Point*)
t IVP_Controller_Buoyancy::get_controller_name()
t IVP_Controller_Buoyancy::use_buoyancy_solver(IVP_Buoyancy_Input const*, IVP_Template_Buoyancy const*, IVP_Buoyancy_Output*, IVP_U_Float_Point const*, int)
t IVP_Controller_Buoyancy::apply_buoyancy_impulse(IVP_Real_Object*, IVP_Template_Buoyancy*, float, float, IVP_U_Float_Point*)
t IVP_Controller_Buoyancy::get_controller_priority()
t IVP_Controller_Buoyancy::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Controller_Buoyancy::calculate_future_extrapolation(IVP_Controller_Buoyancy::Attacher_Interpolator::Last_IO const*, IVP_MI_Vector const*, IVP_MI_Vector const*, float, IVP_Time, IVP_MI_Vector*, IVP_MI_Vector*)
t IVP_Controller_Buoyancy::get_minimum_simulation_frequency()
t IVP_Controller_Buoyancy::core_is_going_to_be_deleted_event(IVP_Core*)
t IVP_Controller_Buoyancy::provide_new_input_solution_combination(IVP_Controller_Buoyancy::Attacher_Interpolator*, IVP_Template_Buoyancy*, IVP_MI_Vector const*, IVP_MI_Vector const*, float, IVP_Time)
t IVP_Controller_Buoyancy::IVP_Controller_Buoyancy(IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>*, IVP_Core*)
t IVP_Controller_Buoyancy::IVP_Controller_Buoyancy(IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>*, IVP_Core*)
t IVP_Controller_Buoyancy::~IVP_Controller_Buoyancy()
t IVP_Controller_Buoyancy::~IVP_Controller_Buoyancy()
t IVP_Controller_Buoyancy::~IVP_Controller_Buoyancy()
t IVP_Environment_Manager::create_environment(IVP_Application_Environment*, char const*, unsigned int)
t IVP_Environment_Manager::get_environment_manager()
b IVP_Environment_Manager::static_environment_manager
t IVP_Environment_Manager::IVP_Environment_Manager()
t IVP_Environment_Manager::IVP_Environment_Manager()
t IVP_Environment_Manager::~IVP_Environment_Manager()
t IVP_Environment_Manager::~IVP_Environment_Manager()
t IVP_Friction_Sys_Energy::get_controller_name()
t IVP_Friction_Sys_Energy::get_controller_priority()
t IVP_Friction_Sys_Energy::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Friction_Sys_Energy::core_is_going_to_be_deleted_event(IVP_Core*)
t IVP_Friction_Sys_Energy::~IVP_Friction_Sys_Energy()
t IVP_Friction_Sys_Energy::~IVP_Friction_Sys_Energy()
t IVP_Friction_Sys_Static::get_controller_name()
t IVP_Friction_Sys_Static::get_controller_priority()
t IVP_Friction_Sys_Static::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Friction_Sys_Static::do_simulation_single_friction(IVP_Event_Sim*)
t IVP_Friction_Sys_Static::get_minimum_simulation_frequency()
t IVP_Friction_Sys_Static::core_is_going_to_be_deleted_event(IVP_Core*)
t IVP_Friction_Sys_Static::~IVP_Friction_Sys_Static()
t IVP_Friction_Sys_Static::~IVP_Friction_Sys_Static()
t IVP_Listener_Set_Active<IVP_Core>::~IVP_Listener_Set_Active()
t IVP_Listener_Set_Active<IVP_Core>::~IVP_Listener_Set_Active()
t IVP_Listener_Set_Active<IVP_Core>::~IVP_Listener_Set_Active()
t IVP_Ray_Solver_Min_Hash::add_hit_object(IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_Compact_Triangle const*, float, IVP_U_Point*)
t IVP_Ray_Solver_Min_Hash::get_result_min_hash()
t IVP_Ray_Solver_Min_Hash::IVP_Ray_Solver_Min_Hash(IVP_Ray_Solver_Template const*)
t IVP_Ray_Solver_Min_Hash::IVP_Ray_Solver_Min_Hash(IVP_Ray_Solver_Template const*)
t IVP_Ray_Solver_Min_Hash::~IVP_Ray_Solver_Min_Hash()
t IVP_Ray_Solver_Min_Hash::~IVP_Ray_Solver_Min_Hash()
t IVP_Ray_Solver_Min_Hash::~IVP_Ray_Solver_Min_Hash()
t IVP_SurfaceManager_Ball::get_all_terminal_ledges(IVP_U_BigVector<IVP_Compact_Ledge>*)
t IVP_SurfaceManager_Ball::get_all_ledges_within_radius(IVP_U_Point const*, float, IVP_Compact_Ledge const*, IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
t IVP_SurfaceManager_Ball::insert_all_ledges_hitting_ray(IVP_Ray_Solver*, IVP_Real_Object*)
t IVP_SurfaceManager_Ball::get_type()
t IVP_SurfaceManager_Ball::~IVP_SurfaceManager_Ball()
t IVP_SurfaceManager_Ball::~IVP_SurfaceManager_Ball()
t IVP_SurfaceManager_Ball::~IVP_SurfaceManager_Ball()
t IVP_Template_Car_System::IVP_Template_Car_System(int, int)
t IVP_Template_Car_System::IVP_Template_Car_System(int, int)
t IVP_Template_Check_Dist::IVP_Template_Check_Dist()
t IVP_Template_Check_Dist::IVP_Template_Check_Dist()
t IVP_Template_Constraint::sort_coordinates(IVP_Template_Constraint const&)
t IVP_Template_Constraint::fix_rotation_axis(IVP_COORDINATE_INDEX)
t IVP_Template_Constraint::set_constraint_ws(IVP_Real_Object*, IVP_U_Point const*, IVP_U_Point const*, unsigned int, unsigned int, IVP_Real_Object*, IVP_U_Matrix const*)
t IVP_Template_Constraint::free_rotation_axis(IVP_COORDINATE_INDEX)
t IVP_Template_Constraint::set_constraint_Ros(IVP_Real_Object*, IVP_U_Point const*, IVP_U_Point const*, unsigned int, unsigned int, IVP_Real_Object*, IVP_U_Matrix const*)
t IVP_Template_Constraint::limit_rotation_axis(IVP_COORDINATE_INDEX, float, float)
t IVP_Template_Constraint::set_attached_object(IVP_Real_Object*)
t IVP_Template_Constraint::fix_translation_axis(IVP_COORDINATE_INDEX)
t IVP_Template_Constraint::set_fixing_point_Ros(IVP_U_Point const*)
t IVP_Template_Constraint::set_reference_object(IVP_Real_Object*)
t IVP_Template_Constraint::free_translation_axis(IVP_COORDINATE_INDEX)
t IVP_Template_Constraint::set_rotation_axes_Ros(IVP_U_Matrix3 const*)
t IVP_Template_Constraint::limit_translation_axis(IVP_COORDINATE_INDEX, float, float)
t IVP_Template_Constraint::set_max_rotation_impulse(IVP_COORDINATE_INDEX, IVP_CONSTRAINT_FORCE_EXCEED, float)
t IVP_Template_Constraint::set_max_rotation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
t IVP_Template_Constraint::set_translation_axes_Ros(IVP_U_Matrix3 const*)
t IVP_Template_Constraint::set_constraint_is_relaxed()
t IVP_Template_Constraint::set_max_translation_impulse(IVP_COORDINATE_INDEX, IVP_CONSTRAINT_FORCE_EXCEED, float)
t IVP_Template_Constraint::set_max_translation_impulse(IVP_CONSTRAINT_FORCE_EXCEED, float)
t IVP_Template_Constraint::set_attached_fixing_point_Aos(IVP_U_Point const*)
t IVP_Template_Constraint::set_stiffness_for_limited_axis(float)
t IVP_Template_Constraint::set_attached_translation_axes_Aos(IVP_U_Matrix3 const*)
t IVP_Template_Constraint::set_translation_axes_as_object_space()
t IVP_Template_Constraint::set_rotation_axes_as_translation_axes()
t IVP_Template_Constraint::IVP_Template_Constraint()
t IVP_Template_Constraint::IVP_Template_Constraint()
t IVP_Template_Four_Point::IVP_Template_Four_Point()
t IVP_Template_Four_Point::IVP_Template_Four_Point()
t IVP_Template_Stabilizer::IVP_Template_Stabilizer()
t IVP_Template_Stabilizer::IVP_Template_Stabilizer()
t IVP_Template_Suspension::IVP_Template_Suspension()
t IVP_Template_Suspension::IVP_Template_Suspension()
t IVP_U_Active_Test_Range::active_float_changed(IVP_U_Active_Float*)
t IVP_U_Active_Test_Range::print()
t IVP_U_Active_Test_Range::IVP_U_Active_Test_Range(char const*, IVP_U_Active_Float*, IVP_U_Active_Float*, IVP_U_Active_Float*)
t IVP_U_Active_Test_Range::IVP_U_Active_Test_Range(char const*, IVP_U_Active_Float*, IVP_U_Active_Float*, IVP_U_Active_Float*)
t IVP_U_Active_Test_Range::~IVP_U_Active_Test_Range()
t IVP_U_Active_Test_Range::~IVP_U_Active_Test_Range()
t IVP_U_Active_Test_Range::~IVP_U_Active_Test_Range()
t IVP_Vector_of_Cores_128::IVP_Vector_of_Cores_128()
t IVP_Vector_of_Cores_128::IVP_Vector_of_Cores_128()
t IVP_Vector_of_Hulls_128::IVP_Vector_of_Hulls_128()
t IVP_Vector_of_Hulls_128::IVP_Vector_of_Hulls_128()
t IVP_Vector_of_Ledges_16::IVP_Vector_of_Ledges_16()
t IVP_Vector_of_Ledges_16::IVP_Vector_of_Ledges_16()
t CLiquidSurfaceDescriptor::calc_liquid_surface(IVP_Environment*, IVP_Core*, IVP_U_Float_Hesse*, IVP_U_Float_Point*)
t CPhysicsMotionController::GetObjects(IPhysicsObject**)
t CPhysicsMotionController::RemoveCore(IVP_Core*)
t CPhysicsMotionController::IsPredicted()
t CPhysicsMotionController::SetPriority(IPhysicsMotionController::priority_t)
t CPhysicsMotionController::WakeObjects()
t CPhysicsMotionController::AttachObject(IPhysicsObject*, bool)
t CPhysicsMotionController::ClearObjects()
t CPhysicsMotionController::CountObjects()
t CPhysicsMotionController::DetachObject(IPhysicsObject*)
t CPhysicsMotionController::SetEventHandler(IMotionEvent*)
t CPhysicsMotionController::WriteToTemplate(vphysics_save_motioncontroller_t&)
t CPhysicsMotionController::InitFromTemplate(vphysics_save_motioncontroller_t const&)
t CPhysicsMotionController::get_controller_name()
t CPhysicsMotionController::Prediction_Resimulate(float)
t CPhysicsMotionController::SetCallOrderRegistrar(CPredictableControllerSimulationOrderTracker*)
t CPhysicsMotionController::get_controller_priority()
t CPhysicsMotionController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t CPhysicsMotionController::core_is_going_to_be_deleted_event(IVP_Core*)
t CPhysicsMotionController::CPhysicsMotionController(IMotionEvent*, CPhysicsEnvironment*)
t CPhysicsMotionController::CPhysicsMotionController(IMotionEvent*, CPhysicsEnvironment*)
t CPhysicsMotionController::~CPhysicsMotionController()
t CPhysicsMotionController::~CPhysicsMotionController()
t CPhysicsMotionController::~CPhysicsMotionController()
t IPhysicsFrictionSnapshot::~IPhysicsFrictionSnapshot()
t IPhysicsFrictionSnapshot::~IPhysicsFrictionSnapshot()
t IPhysicsFrictionSnapshot::~IPhysicsFrictionSnapshot()
t IPhysicsMotionController::~IPhysicsMotionController()
t IPhysicsMotionController::~IPhysicsMotionController()
t IPhysicsMotionController::~IPhysicsMotionController()
t IPhysicsPlayerController::~IPhysicsPlayerController()
t IPhysicsPlayerController::~IPhysicsPlayerController()
t IPhysicsPlayerController::~IPhysicsPlayerController()
t IPhysicsShadowController::~IPhysicsShadowController()
t IPhysicsShadowController::~IPhysicsShadowController()
t IPhysicsShadowController::~IPhysicsShadowController()
t IVP_Cache_Object_Manager::cache_object_at(int)
t IVP_Cache_Object_Manager::get_cache_object(IVP_Real_Object*)
t IVP_Cache_Object_Manager::invalid_cache_object(IVP_Real_Object*)
t IVP_Cache_Object_Manager::IVP_Cache_Object_Manager(int)
t IVP_Cache_Object_Manager::IVP_Cache_Object_Manager(int)
t IVP_Cache_Object_Manager::~IVP_Cache_Object_Manager()
t IVP_Cache_Object_Manager::~IVP_Cache_Object_Manager()
t IVP_Calc_Next_PSI_Solver::set_transformation(IVP_Core*, IVP_U_Quat const*, IVP_U_Point const*, IVP_BOOL)
t IVP_Calc_Next_PSI_Solver::calc_next_PSI_matrix(IVP_Core*, IVP_Event_Sim*, IVP_U_Vector<IVP_Hull_Manager_Base>*)
t IVP_Calc_Next_PSI_Solver::calc_psi_rotation_axis(IVP_Core*, IVP_U_Quat const*)
t IVP_Calc_Next_PSI_Solver::commit_one_hull_manager(IVP_Environment*, IVP_U_Vector<IVP_Hull_Manager_Base>*)
t IVP_Calc_Next_PSI_Solver::commit_all_hull_managers(IVP_Environment*, IVP_U_Vector<IVP_Hull_Manager_Base>*)
t IVP_Calc_Next_PSI_Solver::commit_all_calc_next_PSI_matrix(IVP_Environment*, IVP_U_Vector<IVP_Core>*, IVP_U_Vector<IVP_Hull_Manager_Base>*)
t IVP_Calc_Next_PSI_Solver::get_longest_time_step_dependent_on_rot(IVP_Core*)
t IVP_Compact_Ledge_Solver::calc_qlen_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Compact_Ledge_Solver::get_all_ledges(IVP_Compact_Surface const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
t IVP_Compact_Ledge_Solver::get_all_ledges(IVP_Compact_Ledgetree_Node const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
t IVP_Compact_Ledge_Solver::calc_bounding_box(IVP_Compact_Ledge const*, IVP_U_Point*, IVP_U_Point*)
t IVP_Compact_Ledge_Solver::calc_hesse_object(IVP_Compact_Edge const*, IVP_Compact_Ledge const*, IVP_U_Hesse*)
t IVP_Compact_Ledge_Solver::calc_pos_other_space(IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*, IVP_U_Point*)
t IVP_Compact_Ledge_Solver::calc_qlen_PF_F_space(IVP_Compact_Ledge const*, IVP_Compact_Triangle const*, IVP_U_Point const*)
t IVP_Compact_Ledge_Solver::calc_qlen_PK_K_space(IVP_U_Point const*, IVP_Compact_Ledge const*, IVP_Compact_Edge const*)
t IVP_Compact_Ledge_Solver::calc_qlen_PP_P_space(IVP_Compact_Ledge const*, IVP_Compact_Edge const*, IVP_U_Point const*)
t IVP_Compact_Ledge_Solver::give_world_coords_AT(IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_U_Point*)
t IVP_Compact_Ledge_Solver::calc_unscaled_KK_vals(IVP_KK_Input const&, IVP_Unscaled_KK_Result*)
t IVP_Compact_Ledge_Solver::minimize_on_other_side(IVP_Compact_Edge const*, IVP_U_Point const*)
t IVP_Compact_Ledge_Solver::transform_pos_other_space(IVP_U_Float_Point const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*, IVP_U_Point*)
t IVP_Compact_Ledge_Solver::transform_vec_other_space(IVP_U_Point const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*, IVP_U_Point*)
t IVP_Compact_Ledge_Solver::calc_geom_center_and_radius(IVP_Compact_Ledge const*, IVP_U_Point*, float*)
t IVP_Compact_Ledge_Solver::calc_radius_to_given_center(IVP_Compact_Ledge const*, IVP_U_Point const*, float*, float*)
t IVP_Compact_Ledge_Solver::calc_radius_to_given_center(IVP_Compact_Surface const*, IVP_U_Point const*, float*, float*)
t IVP_Compact_Ledge_Solver::calc_unscaled_s_val_K_space(IVP_Compact_Ledge const*, IVP_Compact_Edge const*, IVP_U_Point const*, IVP_Unscaled_S_Result*)
t IVP_Compact_Ledge_Solver::calc_unscaled_qr_vals_F_space(IVP_Compact_Ledge const*, IVP_Compact_Edge const*, IVP_U_Point const*, IVP_Unscaled_QR_Result*)
t IVP_Compact_Ledge_Solver::quad_dist_edge_to_point_K_space(IVP_Compact_Ledge const*, IVP_Compact_Edge const*, IVP_U_Point const*)
t IVP_Compact_Ledge_Solver::calc_hesse_vec_object_not_normized(IVP_Compact_Edge const*, IVP_Compact_Ledge const*, IVP_U_Point*)
t IVP_Compact_Ledge_Solver::calc_hesse_vec_object_not_normized(IVP_Compact_Edge const*, IVP_Compact_Ledge const*, IVP_U_Float_Point*)
t IVP_Controller_Dependent::~IVP_Controller_Dependent()
t IVP_Controller_Dependent::~IVP_Controller_Dependent()
t IVP_Controller_Dependent::~IVP_Controller_Dependent()
t IVP_Mindist_Event_Solver::next_event_BB(IVP_Mindist_Event_Solver*)
t IVP_Mindist_Event_Solver::next_event_B_POLY(IVP_Mindist_Event_Solver*)
t IVP_Mindist_Event_Solver::calc_next_event_BB(IVP_Cache_Object*, IVP_Cache_Object*)
t IVP_Mindist_Event_Solver::calc_next_event_BF(IVP_Compact_Edge const*, IVP_Cache_Object*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Event_Solver::calc_next_event_BK(IVP_Ball*, IVP_Compact_Edge const*, IVP_Cache_Object*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Event_Solver::calc_next_event_BP(IVP_Ball*, IVP_Compact_Edge const*, IVP_Cache_Object*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Event_Solver::calc_next_event_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Event_Solver::calc_next_event_PF(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Event_Solver::calc_next_event_PK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Event_Solver::calc_next_event_PP(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
b IVP_Mindist_Event_Solver::mim_function_table
t IVP_Mindist_Event_Solver::next_event_illegal(IVP_Mindist_Event_Solver*)
t IVP_Mindist_Event_Solver::init_mim_function_table()
t IVP_Mindist_Event_Solver::next_event_default_poly_poly(IVP_Mindist_Event_Solver*)
t IVP_Object_Polygon_Tetra::p_link_edge(IVP_Tri_Edge*, IVP_Tri_Edge*)
t IVP_Object_Polygon_Tetra::hide_triangle(IVP_Triangle*)
t IVP_Object_Polygon_Tetra::rate_tri_edge(IVP_Tri_Edge*)
t IVP_Object_Polygon_Tetra::free_triangles()
t IVP_Object_Polygon_Tetra::make_triangles()
t IVP_Object_Polygon_Tetra::pop_concav_edge(IVP_Tri_Edge*)
t IVP_Object_Polygon_Tetra::calc_concavities()
t IVP_Object_Polygon_Tetra::insert_pierce_info()
t IVP_Object_Polygon_Tetra::add_edge_to_min_list(IVP_Tri_Edge*, P_HASH_CLASS, float)
t IVP_Object_Polygon_Tetra::calc_extrusion_point(IVP_Tri_Edge const*, IVP_U_Point*)
t IVP_Object_Polygon_Tetra::link_triangle_couple(IVP_Triangle*, IVP_Tri_Edge*, IVP_Tri_Edge*, IVP_Tri_Edge*)
t IVP_Object_Polygon_Tetra::pop_problematic_edge(IVP_Tri_Edge*)
t IVP_Object_Polygon_Tetra::final_convexify_check()
t IVP_Object_Polygon_Tetra::link_existing_pop_edge(IVP_Tri_Edge*)
t IVP_Object_Polygon_Tetra::get_an_edge_with_points(IVP_Poly_Point*, IVP_Poly_Point*)
t IVP_Object_Polygon_Tetra::generate_double_triangle(IVP_Poly_Point*, IVP_Poly_Point*, IVP_Poly_Point*)
t IVP_Object_Polygon_Tetra::move_edge_to_normal_hash(IVP_Tri_Edge*)
t IVP_Object_Polygon_Tetra::move_edge_to_epsilon_hash(IVP_Tri_Edge*)
t IVP_Object_Polygon_Tetra::move_edge_to_problem_hash(IVP_Tri_Edge*)
t IVP_Object_Polygon_Tetra::remove_edge_from_min_list(IVP_Tri_Edge*)
t IVP_Object_Polygon_Tetra::check_concavity_and_manage(IVP_Tri_Edge*, P_CONVEXIFY_STATE)
t IVP_Object_Polygon_Tetra::record_intruding_convex_edges(IVP_Intrusion_Status*)
t IVP_Object_Polygon_Tetra::check_konsistency_of_triangles()
t IVP_Object_Polygon_Tetra::make_double_triangle_permanent(IVP_Triangle*)
t IVP_Object_Polygon_Tetra::add_edge_into_point_to_edge_hash(IVP_Tri_Edge*)
t IVP_Object_Polygon_Tetra::move_edge_to_convex_intrude_hash(IVP_Tri_Edge*)
t IVP_Object_Polygon_Tetra::convexify()
t IVP_Object_Polygon_Tetra::IVP_Object_Polygon_Tetra(IVP_Template_Polygon*)
t IVP_Object_Polygon_Tetra::IVP_Object_Polygon_Tetra(IVP_Template_Polygon*)
t IVP_Object_Polygon_Tetra::~IVP_Object_Polygon_Tetra()
t IVP_Object_Polygon_Tetra::~IVP_Object_Polygon_Tetra()
t IVP_Solver_Core_Reaction::init_rot_ws(IVP_Core*, IVP_U_Point_4*, IVP_U_Point_4*, float)
t IVP_Solver_Core_Reaction::init_trans_ws(IVP_U_Point const*, IVP_Core*, IVP_U_Point_4*, IVP_U_Point_4*, float)
t IVP_Solver_Core_Reaction::invert_3x3_matrix()
t IVP_Solver_Core_Reaction::exert_impulse_dim1(IVP_Core*, IVP_Core*, IVP_U_Float_Point&)
t IVP_Solver_Core_Reaction::exert_impulse_dim2(IVP_Core*, IVP_Core*, IVP_U_Float_Point&)
t IVP_Solver_Core_Reaction::exert_impulse_dim3(IVP_Core*, IVP_Core*, IVP_U_Float_Point&)
t IVP_Solver_Core_Reaction::exert_angular_impulse_dim1(IVP_Core*, IVP_Core*, IVP_U_Float_Point&)
t IVP_Solver_Core_Reaction::exert_angular_impulse_dim2(IVP_Core*, IVP_Core*, IVP_U_Float_Point&)
t IVP_Solver_Core_Reaction::exert_angular_impulse_dim3(IVP_Core*, IVP_Core*, IVP_U_Float_Point&)
t IVP_Solver_Core_Reaction::init_reaction_solver_rotation_ws(IVP_Core*, IVP_Core*, IVP_U_Float_Point*, IVP_U_Float_Point*, IVP_U_Float_Point*)
t IVP_Solver_Core_Reaction::init_reaction_solver_translation_ws(IVP_Core*, IVP_Core*, IVP_U_Point&, IVP_U_Float_Point*, IVP_U_Float_Point*, IVP_U_Float_Point*)
t IVP_Template_Real_Object::IVP_Template_Real_Object()
t IVP_Template_Real_Object::IVP_Template_Real_Object()
t IVP_Template_Real_Object::~IVP_Template_Real_Object()
t IVP_Template_Real_Object::~IVP_Template_Real_Object()
t IVP_U_Active_Int_Delayed::~IVP_U_Active_Int_Delayed()
t IVP_U_Active_Int_Delayed::~IVP_U_Active_Int_Delayed()
t IVP_U_Active_Int_Delayed::~IVP_U_Active_Int_Delayed()
t IVP_Vector_of_Ledges_256::IVP_Vector_of_Ledges_256()
t IVP_Vector_of_Ledges_256::IVP_Vector_of_Ledges_256()
t IVP_Vector_of_Ledges_256::~IVP_Vector_of_Ledges_256()
t IVP_Vector_of_Ledges_256::~IVP_Vector_of_Ledges_256()
t vehicle_steeringparams_t::GetBaseMap()
d vehicle_steeringparams_t::m_DataMap
t BreakableConstraintHelper::~BreakableConstraintHelper()
t BreakableConstraintHelper::~BreakableConstraintHelper()
t CPhysicsListenerCollision::core_left_volume(IVP_Controller_Phantom*, IVP_Core*)
t CPhysicsListenerCollision::CorePairLessFunc(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&)
t CPhysicsListenerCollision::core_entered_volume(IVP_Controller_Phantom*, IVP_Core*)
t CPhysicsListenerCollision::event_pre_collision(IVP_Event_Collision*)
t CPhysicsListenerCollision::mindist_left_volume(IVP_Controller_Phantom*, IVP_Mindist_Base*)
t CPhysicsListenerCollision::event_post_collision(IVP_Event_Collision*)
t CPhysicsListenerCollision::event_friction_created(IVP_Event_Friction*)
t CPhysicsListenerCollision::event_friction_deleted(IVP_Event_Friction*)
t CPhysicsListenerCollision::mindist_entered_volume(IVP_Controller_Phantom*, IVP_Mindist_Base*)
t CPhysicsListenerCollision::event_friction_pair_created(IVP_Friction_Core_Pair*)
t CPhysicsListenerCollision::event_friction_pair_deleted(IVP_Friction_Core_Pair*)
t CPhysicsListenerCollision::event_collision_object_deleted(IVP_Real_Object*)
t CPhysicsListenerCollision::phantom_is_going_to_be_deleted_event(IVP_Controller_Phantom*)
t CPhysicsListenerCollision::CPhysicsListenerCollision()
t CPhysicsListenerCollision::CPhysicsListenerCollision()
t CPhysicsListenerCollision::~CPhysicsListenerCollision()
t CPhysicsListenerCollision::~CPhysicsListenerCollision()
t CPhysicsListenerCollision::~CPhysicsListenerCollision()
t hk_Ball_Socket_Constraint::init_constraint(void const*)
t hk_Ball_Socket_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Ball_Socket_Constraint::apply_effector_PSI(hk_PSI_Info&)
t hk_Ball_Socket_Constraint::get_constraint_dof()
t hk_Ball_Socket_Constraint::write_to_blueprint(hk_Ball_Socket_BP*)
t hk_Ball_Socket_Constraint::get_constraint_type()
t hk_Ball_Socket_Constraint::get_vmq_storage_size()
t hk_Ball_Socket_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Ball_Socket_Constraint::init_ball_socket_constraint(hk_Ball_Socket_BP const*)
t hk_Ball_Socket_Constraint::hk_Ball_Socket_Constraint(hk_Environment*, hk_Ball_Socket_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Ball_Socket_Constraint::hk_Ball_Socket_Constraint(hk_Local_Constraint_System*, hk_Ball_Socket_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Ball_Socket_Constraint::hk_Ball_Socket_Constraint(hk_Environment*, hk_Ball_Socket_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Ball_Socket_Constraint::hk_Ball_Socket_Constraint(hk_Local_Constraint_System*, hk_Ball_Socket_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Ball_Socket_Constraint::~hk_Ball_Socket_Constraint()
t hk_Ball_Socket_Constraint::~hk_Ball_Socket_Constraint()
t hk_Ball_Socket_Constraint::~hk_Ball_Socket_Constraint()
t IPhysicsVehicleController::~IPhysicsVehicleController()
t IPhysicsVehicleController::~IPhysicsVehicleController()
t IPhysicsVehicleController::~IPhysicsVehicleController()
t IVP_3D_Solver_KK_PARALLEL::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
t IVP_Actuator_Force_Active::active_float_changed(IVP_U_Active_Float*)
t IVP_Actuator_Force_Active::IVP_Actuator_Force_Active(IVP_Environment*, IVP_Template_Force*)
t IVP_Actuator_Force_Active::IVP_Actuator_Force_Active(IVP_Environment*, IVP_Template_Force*)
t IVP_Actuator_Force_Active::~IVP_Actuator_Force_Active()
t IVP_Actuator_Force_Active::~IVP_Actuator_Force_Active()
t IVP_Actuator_Force_Active::~IVP_Actuator_Force_Active()
t IVP_Constraint_Car_Object::IVP_Constraint_Car_Object(IVP_Constraint_Solver_Car*, IVP_Real_Object*, IVP_Real_Object*, IVP_U_Float_Point*)
t IVP_Constraint_Car_Object::IVP_Constraint_Car_Object(IVP_Constraint_Solver_Car*, IVP_Real_Object*, IVP_Real_Object*, IVP_U_Float_Point*)
t IVP_Constraint_Car_Object::~IVP_Constraint_Car_Object()
t IVP_Constraint_Car_Object::~IVP_Constraint_Car_Object()
t IVP_Constraint_Solver_Car::get_controller_name()
t IVP_Constraint_Solver_Car::init_constraint_system(IVP_Environment*, IVP_Real_Object*, IVP_U_Vector<IVP_Real_Object>&, IVP_U_Vector<IVP_U_Float_Point>&)
t IVP_Constraint_Solver_Car::get_controller_priority()
t IVP_Constraint_Solver_Car::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Constraint_Solver_Car::get_associated_controlled_cores()
t IVP_Constraint_Solver_Car::get_minimum_simulation_frequency()
t IVP_Constraint_Solver_Car::core_is_going_to_be_deleted_event(IVP_Core*)
t IVP_Constraint_Solver_Car::do_simulation_controller_rotation(IVP_Event_Sim*, IVP_Core*, IVP_U_Matrix const*)
t IVP_Constraint_Solver_Car::IVP_Constraint_Solver_Car(IVP_COORDINATE_INDEX, IVP_COORDINATE_INDEX, IVP_COORDINATE_INDEX, IVP_BOOL)
t IVP_Constraint_Solver_Car::IVP_Constraint_Solver_Car(IVP_COORDINATE_INDEX, IVP_COORDINATE_INDEX, IVP_COORDINATE_INDEX, IVP_BOOL)
t IVP_Constraint_Solver_Car::~IVP_Constraint_Solver_Car()
t IVP_Constraint_Solver_Car::~IVP_Constraint_Solver_Car()
t IVP_Constraint_Solver_Car::~IVP_Constraint_Solver_Car()
t IVP_Meta_Collision_Filter::add_collision_filter(IVP_Collision_Filter*)
t IVP_Meta_Collision_Filter::remove_collision_filter(IVP_Collision_Filter*)
t IVP_Meta_Collision_Filter::environment_will_be_deleted(IVP_Environment*)
t IVP_Meta_Collision_Filter::check_objects_for_collision_detection(IVP_Real_Object*, IVP_Real_Object*)
t IVP_Meta_Collision_Filter::IVP_Meta_Collision_Filter(IVP_BOOL)
t IVP_Meta_Collision_Filter::IVP_Meta_Collision_Filter(IVP_BOOL)
t IVP_Meta_Collision_Filter::~IVP_Meta_Collision_Filter()
t IVP_Meta_Collision_Filter::~IVP_Meta_Collision_Filter()
t IVP_Meta_Collision_Filter::~IVP_Meta_Collision_Filter()
t IVP_Object_Callback_Table::~IVP_Object_Callback_Table()
t IVP_Object_Callback_Table::~IVP_Object_Callback_Table()
t IVP_U_Active_Add_Multiple::active_float_changed(IVP_U_Active_Float*)
t IVP_U_Active_Add_Multiple::print()
t IVP_U_Active_Add_Multiple::IVP_U_Active_Add_Multiple(char const*, IVP_U_Active_Float*, IVP_U_Active_Float*, float)
t IVP_U_Active_Add_Multiple::IVP_U_Active_Add_Multiple(char const*, IVP_U_Active_Float*, IVP_U_Active_Float*, float)
t IVP_U_Active_Add_Multiple::~IVP_U_Active_Add_Multiple()
t IVP_U_Active_Add_Multiple::~IVP_U_Active_Add_Multiple()
t IVP_U_Active_Add_Multiple::~IVP_U_Active_Add_Multiple()
t IVP_U_Active_Int_Listener::~IVP_U_Active_Int_Listener()
t IVP_U_Active_Int_Listener::~IVP_U_Active_Int_Listener()
t IVP_U_Active_Int_Listener::~IVP_U_Active_Int_Listener()
t IVP_U_Active_Terminal_Int::update_int()
t IVP_U_Active_Terminal_Int::print()
t IVP_U_Active_Terminal_Int::set_int(int, IVP_BOOL)
t IVP_U_Active_Terminal_Int::IVP_U_Active_Terminal_Int(char const*, int)
t IVP_U_Active_Terminal_Int::IVP_U_Active_Terminal_Int(char const*, int)
t IVP_U_Active_Terminal_Int::~IVP_U_Active_Terminal_Int()
t IVP_U_Active_Terminal_Int::~IVP_U_Active_Terminal_Int()
t IVP_U_Min_Hash_Enumerator::get_next_element()
t IVP_U_Min_Hash_Enumerator::get_next_element_lt(float)
t IVP_U_Min_Hash_Enumerator::IVP_U_Min_Hash_Enumerator(IVP_U_Min_Hash*)
t IVP_U_Min_Hash_Enumerator::IVP_U_Min_Hash_Enumerator(IVP_U_Min_Hash*)
t IVP_U_Min_List_Enumerator::get_next_element()
t IVP_U_Min_List_Enumerator::get_next_element_lt(float)
t IVP_U_Min_List_Enumerator::get_next_element_header()
t IVP_U_Min_List_Enumerator::IVP_U_Min_List_Enumerator(IVP_U_Min_List*)
t IVP_U_Min_List_Enumerator::IVP_U_Min_List_Enumerator(IVP_U_Min_List*)
t IVV_Cluster_Min_Hash_Elem::~IVV_Cluster_Min_Hash_Elem()
t IVV_Cluster_Min_Hash_Elem::~IVV_Cluster_Min_Hash_Elem()
t vehicle_operatingparams_t::GetBaseMap()
d vehicle_operatingparams_t::m_DataMap
t CPhysCollideCompactSurface::SetLedgeIndex(IVP_Compact_Ledgetree_Node const*, IVP_Compact_Ledge*, int)
t CPhysCollideCompactSurface::SetMassCenter(Vector const&)
t CPhysCollideCompactSurface::InitCollideMap()
t CPhysCollideCompactSurface::SetOrthographicAreas(Vector const&)
t CPhysCollideCompactSurface::ComputeOrthographicAreas(float)
t CPhysCollideCompactSurface::Init(char const*, unsigned int, int, bool)
t CPhysCollideCompactSurface::CPhysCollideCompactSurface(IVP_Compact_Surface*)
t CPhysCollideCompactSurface::CPhysCollideCompactSurface(compactsurfaceheader_t const*, int, bool)
t CPhysCollideCompactSurface::CPhysCollideCompactSurface(char const*, unsigned int, int, bool)
t CPhysCollideCompactSurface::CPhysCollideCompactSurface(IVP_Compact_Surface*)
t CPhysCollideCompactSurface::CPhysCollideCompactSurface(compactsurfaceheader_t const*, int, bool)
t CPhysCollideCompactSurface::CPhysCollideCompactSurface(char const*, unsigned int, int, bool)
t CPhysCollideCompactSurface::~CPhysCollideCompactSurface()
t CPhysCollideCompactSurface::~CPhysCollideCompactSurface()
t CPhysCollideCompactSurface::~CPhysCollideCompactSurface()
t CPhysicsListenerConstraint::event_constraint_broken(IVP_Constraint*)
t CPhysicsListenerConstraint::event_constraint_broken(hk_Breakable_Constraint*)
t CPredictedPlayerController::IsPredicted()
t CPredictedPlayerController::GetLastImpulse(Vector*)
t CPredictedPlayerController::GetShadowPosition(Vector*, QAngle*)
t CPredictedPlayerController::GetShadowVelocity(Vector*)
t CPredictedPlayerController::TryTeleportObject()
t CPredictedPlayerController::Prediction_Resimulate(float)
t CPredictedPlayerController::SetCallOrderRegistrar(CPredictableControllerSimulationOrderTracker*)
t CPredictedPlayerController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t CPredictedPlayerController::OnPredictionCommandChanged(int, bool)
t CPredictedPlayerController::DoneReferencingPreviousCommands(int)
t CPredictedPlayerController::Jump()
t CPredictedPlayerController::StepUp(float)
t CPredictedPlayerController::Update(Vector const&, Vector const&, float, bool, IPhysicsObject*)
t CPredictedPlayerController::MaxSpeed(Vector const&)
t CPredictedPlayerController::SetGround(CPhysicsObject*)
t CPredictedPlayerController::SetObject(IPhysicsObject*)
t CPredictedPlayerController::CPredictedPlayerController(CPhysicsObject*)
t CPredictedPlayerController::CPredictedPlayerController(CPhysicsObject*)
t CPredictedPlayerController::~CPredictedPlayerController()
t CPredictedPlayerController::~CPredictedPlayerController()
t CPredictedPlayerController::~CPredictedPlayerController()
t CVPhysicsVirtualMeshWriter::LedgeCanBePacked(IVP_Compact_Ledge const*, virtualmeshlist_t const&)
t CVPhysicsVirtualMeshWriter::DestroyPackedHull(virtualmeshhull_t*)
t CVPhysicsVirtualMeshWriter::UnpackLedgeListFromHull(unsigned char*, virtualmeshhull_t*, IVP_Compact_Poly_Point*)
t CVPhysicsVirtualMeshWriter::ConvertPolyhedronToLedge(CPolyhedron const*)
t CVPhysicsVirtualMeshWriter::InitTwoSidedTriangleLege(triangleledge_t*, IVP_Compact_Poly_Point const*, int, int, int, int)
t CVPhysicsVirtualMeshWriter::CreatePackedHullFromLedges(virtualmeshlist_t const&, IVP_Compact_Ledge const**, int)
t CVPhysicsVirtualMeshWriter::UnpackCompactLedgeFromHull(IVP_Compact_Ledge*, int, IVP_Compact_Poly_Point const*, virtualmeshhull_t const*, int, bool)
t hk_Local_Constraint_System::deactivate()
t hk_Local_Constraint_System::get_epsilon()
t hk_Local_Constraint_System::add_constraint(hk_Constraint*, int)
t hk_Local_Constraint_System::sort_constraints()
t hk_Local_Constraint_System::solve_penetration(IVP_Real_Object*, IVP_Real_Object*)
t hk_Local_Constraint_System::apply_effector_PSI(hk_PSI_Info&)
t hk_Local_Constraint_System::write_to_blueprint(hk_Local_Constraint_System_BP*)
t hk_Local_Constraint_System::deactivate_silently()
t hk_Local_Constraint_System::recalc_storage_size()
t hk_Local_Constraint_System::report_square_error(float __vector(4))
t hk_Local_Constraint_System::report_square_error(float)
t hk_Local_Constraint_System::report_square_error(float __vector)
t hk_Local_Constraint_System::entity_deletion_event(hk_Rigid_Body*)
t hk_Local_Constraint_System::get_effected_entities(hk_Array<hk_Rigid_Body*>&)
t hk_Local_Constraint_System::get_effector_priority()
t hk_Local_Constraint_System::constraint_deletion_event(hk_Constraint*)
t hk_Local_Constraint_System::get_constraints_in_system(hk_Array<hk_Constraint*>&)
t hk_Local_Constraint_System::core_is_going_to_be_deleted_event(IVP_Core*)
t hk_Local_Constraint_System::activate()
t hk_Local_Constraint_System::hk_Local_Constraint_System(hk_Environment*, hk_Local_Constraint_System_BP*)
t hk_Local_Constraint_System::hk_Local_Constraint_System(hk_Environment*, hk_Local_Constraint_System_BP*)
t hk_Local_Constraint_System::~hk_Local_Constraint_System()
t hk_Local_Constraint_System::~hk_Local_Constraint_System()
t hk_Local_Constraint_System::~hk_Local_Constraint_System()
t hk_Stiff_Spring_Constraint::set_length(float)
t hk_Stiff_Spring_Constraint::init_constraint(void const*)
t hk_Stiff_Spring_Constraint::step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Stiff_Spring_Constraint::apply_effector_PSI(hk_PSI_Info&)
t hk_Stiff_Spring_Constraint::get_constraint_dof()
t hk_Stiff_Spring_Constraint::write_to_blueprint(hk_Stiff_Spring_BP*)
t hk_Stiff_Spring_Constraint::get_constraint_type()
t hk_Stiff_Spring_Constraint::get_vmq_storage_size()
t hk_Stiff_Spring_Constraint::setup_and_step_constraint(hk_PSI_Info&, void*, float, float)
t hk_Stiff_Spring_Constraint::init_stiff_spring_constraint(hk_Stiff_Spring_BP const*)
t hk_Stiff_Spring_Constraint::hk_Stiff_Spring_Constraint(hk_Environment*, hk_Stiff_Spring_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Stiff_Spring_Constraint::hk_Stiff_Spring_Constraint(hk_Local_Constraint_System*, hk_Stiff_Spring_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Stiff_Spring_Constraint::hk_Stiff_Spring_Constraint(hk_Environment*, hk_Stiff_Spring_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Stiff_Spring_Constraint::hk_Stiff_Spring_Constraint(hk_Local_Constraint_System*, hk_Stiff_Spring_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t hk_Stiff_Spring_Constraint::~hk_Stiff_Spring_Constraint()
t hk_Stiff_Spring_Constraint::~hk_Stiff_Spring_Constraint()
t hk_Stiff_Spring_Constraint::~hk_Stiff_Spring_Constraint()
t IVP_Actuator_Spring_Active::active_float_changed(IVP_U_Active_Float*)
t IVP_Actuator_Spring_Active::IVP_Actuator_Spring_Active(IVP_Environment*, IVP_Template_Spring*)
t IVP_Actuator_Spring_Active::IVP_Actuator_Spring_Active(IVP_Environment*, IVP_Template_Spring*)
t IVP_Actuator_Spring_Active::~IVP_Actuator_Spring_Active()
t IVP_Actuator_Spring_Active::~IVP_Actuator_Spring_Active()
t IVP_Actuator_Spring_Active::~IVP_Actuator_Spring_Active()
t IVP_Actuator_Torque_Active::active_float_changed(IVP_U_Active_Float*)
t IVP_Actuator_Torque_Active::IVP_Actuator_Torque_Active(IVP_Environment*, IVP_Template_Torque*)
t IVP_Actuator_Torque_Active::IVP_Actuator_Torque_Active(IVP_Environment*, IVP_Template_Torque*)
t IVP_Actuator_Torque_Active::~IVP_Actuator_Torque_Active()
t IVP_Actuator_Torque_Active::~IVP_Actuator_Torque_Active()
t IVP_Actuator_Torque_Active::~IVP_Actuator_Torque_Active()
t IVP_Car_System_Real_Wheels::do_steering(float, bool)
t IVP_Car_System_Real_Wheels::get_skid_info(IVP_Wheel_Skid_Info*)
t IVP_Car_System_Real_Wheels::get_body_speed(IVP_COORDINATE_INDEX)
t IVP_Car_System_Real_Wheels::set_powerslide(float, float)
t IVP_Car_System_Real_Wheels::update_booster(float)
t IVP_Car_System_Real_Wheels::update_throttle(float)
t IVP_Car_System_Real_Wheels::activate_booster(float, float, float)
t IVP_Car_System_Real_Wheels::get_wheel_torque(IVP_POS_WHEEL)
t IVP_Car_System_Real_Wheels::do_steering_wheel(IVP_POS_WHEEL, float)
t IVP_Car_System_Real_Wheels::get_booster_delay()
t IVP_Car_System_Real_Wheels::change_wheel_torque(IVP_POS_WHEEL, float)
t IVP_Car_System_Real_Wheels::change_spring_length(IVP_POS_WHEEL, float)
t IVP_Car_System_Real_Wheels::event_object_deleted(IVP_Event_Object*)
t IVP_Car_System_Real_Wheels::change_body_downforce(float)
t IVP_Car_System_Real_Wheels::change_max_body_force(IVP_POS_WHEEL, float)
t IVP_Car_System_Real_Wheels::GetCarSystemDebugData(IVP_CarSystemDebugData_t&)
t IVP_Car_System_Real_Wheels::SetCarSystemDebugData(IVP_CarSystemDebugData_t const&)
t IVP_Car_System_Real_Wheels::change_spring_constant(IVP_POS_WHEEL, float)
t IVP_Car_System_Real_Wheels::get_booster_time_to_go()
t IVP_Car_System_Real_Wheels::update_wheel_positions()
t IVP_Car_System_Real_Wheels::change_fast_turn_factor(float)
t IVP_Car_System_Real_Wheels::change_spring_dampening(IVP_POS_WHEEL, float)
t IVP_Car_System_Real_Wheels::get_orig_axles_distance()
t IVP_Car_System_Real_Wheels::set_booster_acceleration(float)
t IVP_Car_System_Real_Wheels::change_spring_pre_tension(IVP_POS_WHEEL, float)
t IVP_Car_System_Real_Wheels::update_body_countertorque()
t IVP_Car_System_Real_Wheels::change_stabilizer_constant(IVP_POS_AXIS, float)
t IVP_Car_System_Real_Wheels::get_wheel_angular_velocity(IVP_POS_WHEEL)
t IVP_Car_System_Real_Wheels::environment_will_be_deleted(IVP_Environment*)
t IVP_Car_System_Real_Wheels::change_wheel_speed_dampening(IVP_POS_WHEEL, float)
t IVP_Car_System_Real_Wheels::get_orig_front_wheel_distance()
t IVP_Car_System_Real_Wheels::change_spring_dampening_compression(IVP_POS_WHEEL, float)
t IVP_Car_System_Real_Wheels::fix_wheel(IVP_POS_WHEEL, IVP_BOOL)
t IVP_Car_System_Real_Wheels::IVP_Car_System_Real_Wheels(IVP_Environment*, IVP_Template_Car_System*)
t IVP_Car_System_Real_Wheels::IVP_Car_System_Real_Wheels(IVP_Environment*, IVP_Template_Car_System*)
t IVP_Car_System_Real_Wheels::~IVP_Car_System_Real_Wheels()
t IVP_Car_System_Real_Wheels::~IVP_Car_System_Real_Wheels()
t IVP_Car_System_Real_Wheels::~IVP_Car_System_Real_Wheels()
t IVP_Compact_Ledgetree_Node::byte_swap_all(IVP_U_BigVector<IVP_Compact_Poly_Point>*)
t IVP_Compact_Ledgetree_Node::byte_swap()
b IVP_Controller_Independent::empty_list
t IVP_Controller_Independent::get_associated_controlled_cores()
t IVP_Controller_Independent::~IVP_Controller_Independent()
t IVP_Controller_Independent::~IVP_Controller_Independent()
t IVP_Controller_Independent::~IVP_Controller_Independent()
t IVP_Controller_Raycast_Car::do_steering(float, bool)
t IVP_Controller_Raycast_Car::get_skid_info(IVP_Wheel_Skid_Info*)
t IVP_Controller_Raycast_Car::get_body_speed(IVP_COORDINATE_INDEX)
t IVP_Controller_Raycast_Car::set_powerslide(float, float)
t IVP_Controller_Raycast_Car::update_booster(float)
t IVP_Controller_Raycast_Car::update_throttle(float)
t IVP_Controller_Raycast_Car::activate_booster(float, float, float)
t IVP_Controller_Raycast_Car::get_wheel_torque(IVP_POS_WHEEL)
t IVP_Controller_Raycast_Car::do_steering_wheel(IVP_POS_WHEEL, float)
t IVP_Controller_Raycast_Car::get_booster_delay()
t IVP_Controller_Raycast_Car::CalcSteeringForces(IVP_Raycast_Car_Wheel_Temp*, IVP_Core*, IVP_Event_Sim*, float*)
t IVP_Controller_Raycast_Car::DoSimulationShocks(IVP_Raycast_Car_Wheel_Temp*, IVP_Ray_Hit*, IVP_Event_Sim*, IVP_Core*)
t IVP_Controller_Raycast_Car::DoSimulationWheels(IVP_Ray_Solver_Template*, IVP_U_Matrix const*, IVP_Raycast_Car_Wheel_Temp*, IVP_Ray_Hit*, float*, IVP_Core*)
t IVP_Controller_Raycast_Car::InitRaycastCarAxes(IVP_Template_Car_System const*)
t IVP_Controller_Raycast_Car::InitRaycastCarBody(IVP_Template_Car_System const*)
t IVP_Controller_Raycast_Car::SetupWheelRaycasts(IVP_Ray_Solver_Template*, IVP_U_Matrix const*, IVP_Raycast_Car_Wheel_Temp*)
t IVP_Controller_Raycast_Car::ApplySteeringForces(IVP_Raycast_Car_Wheel_Temp*, IVP_Core*, IVP_Event_Sim*, float*)
t IVP_Controller_Raycast_Car::change_wheel_torque(IVP_POS_WHEEL, float)
t IVP_Controller_Raycast_Car::DoSimulationBooster(IVP_Event_Sim*, IVP_Core*)
t IVP_Controller_Raycast_Car::change_spring_length(IVP_POS_WHEEL, float)
t IVP_Controller_Raycast_Car::DoSimulationSteering(IVP_Raycast_Car_Wheel_Temp*, IVP_Core*, IVP_Event_Sim*)
t IVP_Controller_Raycast_Car::InitRaycastCarWheels(IVP_Template_Car_System const*)
t IVP_Controller_Raycast_Car::change_body_downforce(float)
t IVP_Controller_Raycast_Car::change_max_body_force(IVP_POS_WHEEL, float)
t IVP_Controller_Raycast_Car::GetCarSystemDebugData(IVP_CarSystemDebugData_t&)
t IVP_Controller_Raycast_Car::SetCarSystemDebugData(IVP_CarSystemDebugData_t const&)
t IVP_Controller_Raycast_Car::change_spring_constant(IVP_POS_WHEEL, float)
t IVP_Controller_Raycast_Car::get_booster_time_to_go()
t IVP_Controller_Raycast_Car::change_fast_turn_factor(float)
t IVP_Controller_Raycast_Car::change_spring_dampening(IVP_POS_WHEEL, float)
t IVP_Controller_Raycast_Car::DoSimulationStabilizers(IVP_Raycast_Car_Wheel_Temp*)
t IVP_Controller_Raycast_Car::get_controller_priority()
t IVP_Controller_Raycast_Car::get_orig_axles_distance()
t IVP_Controller_Raycast_Car::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Controller_Raycast_Car::set_booster_acceleration(float)
t IVP_Controller_Raycast_Car::change_spring_pre_tension(IVP_POS_WHEEL, float)
t IVP_Controller_Raycast_Car::InitRaycastCarEnvironment(IVP_Environment*, IVP_Template_Car_System const*)
t IVP_Controller_Raycast_Car::update_body_countertorque()
t IVP_Controller_Raycast_Car::change_stabilizer_constant(IVP_POS_AXIS, float)
t IVP_Controller_Raycast_Car::get_wheel_angular_velocity(IVP_POS_WHEEL)
t IVP_Controller_Raycast_Car::get_orig_front_wheel_distance()
t IVP_Controller_Raycast_Car::get_associated_controlled_cores()
t IVP_Controller_Raycast_Car::core_is_going_to_be_deleted_event(IVP_Core*)
t IVP_Controller_Raycast_Car::change_spring_dampening_compression(IVP_POS_WHEEL, float)
t IVP_Controller_Raycast_Car::get_axis(IVP_POS_AXIS)
t IVP_Controller_Raycast_Car::fix_wheel(IVP_POS_WHEEL, IVP_BOOL)
t IVP_Controller_Raycast_Car::get_wheel(IVP_POS_WHEEL)
t IVP_Controller_Raycast_Car::IVP_Controller_Raycast_Car(IVP_Environment*, IVP_Template_Car_System const*)
t IVP_Controller_Raycast_Car::IVP_Controller_Raycast_Car(IVP_Environment*, IVP_Template_Car_System const*)
t IVP_Controller_Raycast_Car::~IVP_Controller_Raycast_Car()
t IVP_Controller_Raycast_Car::~IVP_Controller_Raycast_Car()
t IVP_Controller_Raycast_Car::~IVP_Controller_Raycast_Car()
t IVP_Event_Manager_Standard::simulate_time_events(IVP_Time_Manager*, IVP_Environment*, IVP_Time)
t IVP_Friction_Info_For_Core::dist_number()
t IVP_Friction_Info_For_Core::set_all_dists_of_obj_neutral()
t IVP_Friction_Info_For_Core::friction_info_delete_friction_dist(IVP_Contact_Point*)
t IVP_Friction_Info_For_Core::friction_info_insert_friction_dist(IVP_Contact_Point*)
t IVP_Great_Matrix_Many_Zero::lu_inverse(IVP_Great_Matrix_Many_Zero*, int*)
t IVP_Great_Matrix_Many_Zero::copy_matrix(float*, float*)
t IVP_Great_Matrix_Many_Zero::copy_matrix(IVP_Great_Matrix_Many_Zero*)
t IVP_Great_Matrix_Many_Zero::test_result(float*, float*)
t IVP_Great_Matrix_Many_Zero::mult_aligned()
t IVP_Great_Matrix_Many_Zero::exchange_rows(int, int)
t IVP_Great_Matrix_Many_Zero::debug_fill_zero()
t IVP_Great_Matrix_Many_Zero::add_multiple_line(int, int, float)
t IVP_Great_Matrix_Many_Zero::copy_to_sub_matrix(float*, IVP_Great_Matrix_Many_Zero*, int*)
t IVP_Great_Matrix_Many_Zero::align_matrix_values()
t IVP_Great_Matrix_Many_Zero::find_pivot_in_column(int)
t IVP_Great_Matrix_Many_Zero::matrix_multiplication(float*, float*)
t IVP_Great_Matrix_Many_Zero::matrix_test_unequation()
t IVP_Great_Matrix_Many_Zero::fill_from_bigger_matrix(IVP_Great_Matrix_Many_Zero*, int*, int)
t IVP_Great_Matrix_Many_Zero::matrix_out_before_gauss()
t IVP_Great_Matrix_Many_Zero::solve_lower_null_matrix()
t IVP_Great_Matrix_Many_Zero::matrix_check_unequation_line(int)
t IVP_Great_Matrix_Many_Zero::solve_great_matrix_many_zero()
t IVP_Great_Matrix_Many_Zero::transform_to_lower_null_triangle()
t IVP_Great_Matrix_Many_Zero::mult()
t IVP_Great_Matrix_Many_Zero::invert(IVP_Great_Matrix_Many_Zero*)
t IVP_Great_Matrix_Many_Zero::lu_crout(int*, float*)
t IVP_Great_Matrix_Many_Zero::lu_solve(int*)
t IVP_Great_Matrix_Many_Zero::set_value(float, int, int)
t IVP_Great_Matrix_Many_Zero::IVP_Great_Matrix_Many_Zero(int)
t IVP_Great_Matrix_Many_Zero::IVP_Great_Matrix_Many_Zero()
t IVP_Great_Matrix_Many_Zero::IVP_Great_Matrix_Many_Zero(int)
t IVP_Great_Matrix_Many_Zero::IVP_Great_Matrix_Many_Zero()
t IVP_Intrusion_Intersection::p()
t IVP_Intrusion_Intersection::print(char const*)
t IVP_SurfaceManager_Polygon::add_reference_to_ledge(IVP_Compact_Ledge const*)
t IVP_SurfaceManager_Polygon::get_all_terminal_ledges(IVP_U_BigVector<IVP_Compact_Ledge>*)
t IVP_SurfaceManager_Polygon::remove_reference_to_ledge(IVP_Compact_Ledge const*)
t IVP_SurfaceManager_Polygon::get_all_ledges_within_radius(IVP_U_Point const*, float, IVP_Compact_Ledge const*, IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
t IVP_SurfaceManager_Polygon::insert_all_ledges_hitting_ray(IVP_Ray_Solver*, IVP_Real_Object*)
t IVP_SurfaceManager_Polygon::get_type()
t IVP_SurfaceManager_Polygon::IVP_SurfaceManager_Polygon(IVP_Compact_Surface const*)
t IVP_SurfaceManager_Polygon::IVP_SurfaceManager_Polygon()
t IVP_SurfaceManager_Polygon::IVP_SurfaceManager_Polygon(IVP_Compact_Surface const*)
t IVP_SurfaceManager_Polygon::IVP_SurfaceManager_Polygon()
t IVP_SurfaceManager_Polygon::~IVP_SurfaceManager_Polygon()
t IVP_SurfaceManager_Polygon::~IVP_SurfaceManager_Polygon()
t IVP_SurfaceManager_Polygon::~IVP_SurfaceManager_Polygon()
t IVP_U_Active_Float_Delayed::~IVP_U_Active_Float_Delayed()
t IVP_U_Active_Float_Delayed::~IVP_U_Active_Float_Delayed()
t IVP_U_Active_Float_Delayed::~IVP_U_Active_Float_Delayed()
t IVP_U_Active_Value_Manager::delay_active_int(IVP_U_Active_Int_Delayed*)
t IVP_U_Active_Value_Manager::create_active_int(char const*, int)
t IVP_U_Active_Value_Manager::insert_active_int(IVP_U_Active_Int*)
t IVP_U_Active_Value_Manager::remove_active_int(IVP_U_Active_Int*)
t IVP_U_Active_Value_Manager::delay_active_float(IVP_U_Active_Float_Delayed*)
t IVP_U_Active_Value_Manager::install_active_int(char const*, int)
t IVP_U_Active_Value_Manager::create_active_float(char const*, float)
t IVP_U_Active_Value_Manager::insert_active_float(IVP_U_Active_Float*)
t IVP_U_Active_Value_Manager::remove_active_float(IVP_U_Active_Float*)
t IVP_U_Active_Value_Manager::install_active_float(char const*, float)
t IVP_U_Active_Value_Manager::get_active_int_by_name(char const*)
t IVP_U_Active_Value_Manager::get_active_float_by_name(char const*)
t IVP_U_Active_Value_Manager::refresh_psi_active_values(IVP_Environment*)
t IVP_U_Active_Value_Manager::init_active_values_generic()
t IVP_U_Active_Value_Manager::environment_will_be_deleted(IVP_Environment*)
t IVP_U_Active_Value_Manager::update_delayed_active_values()
t IVP_U_Active_Value_Manager::IVP_U_Active_Value_Manager(IVP_BOOL)
t IVP_U_Active_Value_Manager::IVP_U_Active_Value_Manager(IVP_BOOL)
t IVP_U_Active_Value_Manager::~IVP_U_Active_Value_Manager()
t IVP_U_Active_Value_Manager::~IVP_U_Active_Value_Manager()
t IVP_U_Active_Value_Manager::~IVP_U_Active_Value_Manager()
t vehicle_suspensionparams_t::GetBaseMap()
d vehicle_suspensionparams_t::m_DataMap
t IVP_Actuator_Rot_Mot_Active::active_float_changed(IVP_U_Active_Float*)
t IVP_Actuator_Rot_Mot_Active::IVP_Actuator_Rot_Mot_Active(IVP_Environment*, IVP_Template_Rot_Mot*)
t IVP_Actuator_Rot_Mot_Active::IVP_Actuator_Rot_Mot_Active(IVP_Environment*, IVP_Template_Rot_Mot*)
t IVP_Actuator_Rot_Mot_Active::~IVP_Actuator_Rot_Mot_Active()
t IVP_Actuator_Rot_Mot_Active::~IVP_Actuator_Rot_Mot_Active()
t IVP_Actuator_Rot_Mot_Active::~IVP_Actuator_Rot_Mot_Active()
t IVP_Application_Environment::IVP_Application_Environment()
t IVP_Application_Environment::IVP_Application_Environment()
t IVP_BetterStatisticsmanager::remove_data_entity(IVP_BetterStatisticsmanager_Data_Entity*)
t IVP_BetterStatisticsmanager::install_data_entity(IVP_BetterStatisticsmanager_Data_Entity*)
t IVP_BetterStatisticsmanager::set_simulation_time(float)
t IVP_BetterStatisticsmanager::remove_output_callback(IVP_BetterStatisticsmanager_Callback_Interface*)
t IVP_BetterStatisticsmanager::install_output_callback(IVP_BetterStatisticsmanager_Callback_Interface*)
t IVP_BetterStatisticsmanager::print()
t IVP_BetterStatisticsmanager::enable()
t IVP_BetterStatisticsmanager::disable()
t IVP_BetterStatisticsmanager::get_state()
t IVP_BetterStatisticsmanager::IVP_BetterStatisticsmanager()
t IVP_BetterStatisticsmanager::IVP_BetterStatisticsmanager()
t IVP_BetterStatisticsmanager::~IVP_BetterStatisticsmanager()
t IVP_BetterStatisticsmanager::~IVP_BetterStatisticsmanager()
t IVP_Compact_Ledge_Generator::prepare_compact_ledge(IVP_U_Vector<IVP_Triangle>*)
t IVP_Compact_Ledge_Generator::generate_compact_ledge(unsigned char*)
t IVP_Compact_Ledge_Generator::IVP_Compact_Ledge_Generator()
t IVP_Compact_Ledge_Generator::IVP_Compact_Ledge_Generator()
t IVP_Compact_Ledge_Generator::~IVP_Compact_Ledge_Generator()
t IVP_Compact_Ledge_Generator::~IVP_Compact_Ledge_Generator()
t IVP_Constraint_Local_Anchor::IVP_Constraint_Local_Anchor()
t IVP_Constraint_Local_Anchor::IVP_Constraint_Local_Anchor()
t IVP_Constraint_Local_Anchor::~IVP_Constraint_Local_Anchor()
t IVP_Constraint_Local_Anchor::~IVP_Constraint_Local_Anchor()
t IVP_Impact_Solver_Long_Term::do_impact_long_term(IVP_Core**, float, IVP_Contact_Point*)
t IVP_Impact_Solver_Long_Term::get_best_merge_core(IVP_Core*, IVP_Core*, IVP_Core*)
t IVP_Impact_Solver_Long_Term::do_impact_of_two_objects(IVP_Mindist*, IVP_Real_Object*, IVP_Real_Object*)
t IVP_Impact_Solver_Long_Term::find_second_critical_impact_core(IVP_Core*, IVP_Core*)
t IVP_Mindist_Minimize_Solver::minimize_BB(IVP_Mindist_Minimize_Solver*)
t IVP_Mindist_Minimize_Solver::minimize_FB(IVP_Mindist_Minimize_Solver*)
t IVP_Mindist_Minimize_Solver::minimize_KB(IVP_Mindist_Minimize_Solver*)
t IVP_Mindist_Minimize_Solver::minimize_PB(IVP_Mindist_Minimize_Solver*)
t IVP_Mindist_Minimize_Solver::p_minimize_BF(IVP_Cache_Ball*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Minimize_Solver::p_minimize_BK(IVP_Cache_Ball*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Minimize_Solver::p_minimize_BP(IVP_Cache_Ball*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Minimize_Solver::p_minimize_FF(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Minimize_Solver::p_minimize_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Minimize_Solver::p_minimize_PF(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Minimize_Solver::p_minimize_PK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Minimize_Solver::p_minimize_PP(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Minimize_Solver::init_loop_hash()
t IVP_Mindist_Minimize_Solver::pierce_mindist()
t IVP_Mindist_Minimize_Solver::check_loop_hash(IVP_SYNAPSE_POLYGON_STATUS, IVP_Compact_Edge const*, IVP_SYNAPSE_POLYGON_STATUS, IVP_Compact_Edge const*)
t IVP_Mindist_Minimize_Solver::minimize_B_POLY(IVP_Mindist_Minimize_Solver*)
t IVP_Mindist_Minimize_Solver::minimize_illegal(IVP_Mindist_Minimize_Solver*)
b IVP_Mindist_Minimize_Solver::mms_function_table
t IVP_Mindist_Minimize_Solver::p_minimize_Leave_BK(IVP_Cache_Ball*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Minimize_Solver::p_minimize_Leave_KK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_KK_Input const&, IVP_Unscaled_KK_Result const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Minimize_Solver::p_minimize_Leave_PF(IVP_Compact_Edge const*, IVP_U_Point const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Minimize_Solver::p_minimize_Leave_PK(IVP_Compact_Edge const*, IVP_Compact_Edge const*, IVP_Cache_Ledge_Point*, IVP_Cache_Ledge_Point*)
t IVP_Mindist_Minimize_Solver::init_mms_function_table()
t IVP_Mindist_Minimize_Solver::minimize_default_poly_poly(IVP_Mindist_Minimize_Solver*)
t IVP_Mindist_Minimize_Solver::minimize_swapped_poly_poly(IVP_Mindist_Minimize_Solver*)
t IVP_Real_Object_Fast_Static::IVP_Real_Object_Fast_Static(IVP_Cluster*, IVP_Template_Object const*)
t IVP_Real_Object_Fast_Static::IVP_Real_Object_Fast_Static(IVP_Cluster*, IVP_Template_Object const*)
t IVP_Real_Object_Fast_Static::~IVP_Real_Object_Fast_Static()
t IVP_Real_Object_Fast_Static::~IVP_Real_Object_Fast_Static()
t IVP_U_Active_Float_Listener::~IVP_U_Active_Float_Listener()
t IVP_U_Active_Float_Listener::~IVP_U_Active_Float_Listener()
t IVP_U_Active_Float_Listener::~IVP_U_Active_Float_Listener()
t CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder()
t CDatadescGeneratedNameHolder::~CDatadescGeneratedNameHolder()
t IPhysicsSurfacePropsInternal::~IPhysicsSurfacePropsInternal()
t IPhysicsSurfacePropsInternal::~IPhysicsSurfacePropsInternal()
t IPhysicsSurfacePropsInternal::~IPhysicsSurfacePropsInternal()
t IVP_Collision_Callback_Table::~IVP_Collision_Callback_Table()
t IVP_Collision_Callback_Table::~IVP_Collision_Callback_Table()
t IVP_Collision_Delegator_Root::~IVP_Collision_Delegator_Root()
t IVP_Collision_Delegator_Root::~IVP_Collision_Delegator_Root()
t IVP_Collision_Delegator_Root::~IVP_Collision_Delegator_Root()
t IVP_Linear_Constraint_Solver::full_setup()
t IVP_Linear_Constraint_Solver::alloc_memory(IVP_U_Memory*)
t IVP_Linear_Constraint_Solver::debug_dep_var(int)
t IVP_Linear_Constraint_Solver::debug_out_lcs()
t IVP_Linear_Constraint_Solver::startup_setup(int)
t IVP_Linear_Constraint_Solver::get_fdirection()
t IVP_Linear_Constraint_Solver::start_debug_lcs()
t IVP_Linear_Constraint_Solver::setup_l_u_solver()
t IVP_Linear_Constraint_Solver::update_step_vars(float)
t IVP_Linear_Constraint_Solver::init_and_solve_lc(float*, float*, float*, int, int, IVP_U_Memory*)
t IVP_Linear_Constraint_Solver::increase_step_count(int*)
t IVP_Linear_Constraint_Solver::decrement_sub_solver(int)
t IVP_Linear_Constraint_Solver::increment_sub_solver()
t IVP_Linear_Constraint_Solver::move_variable_to_end(int)
t IVP_Linear_Constraint_Solver::debug_test_all_values()
t IVP_Linear_Constraint_Solver::get_values_when_setup()
t IVP_Linear_Constraint_Solver::exchange_activ_inactiv(int)
t IVP_Linear_Constraint_Solver::exchange_lcs_variables(int, int)
t IVP_Linear_Constraint_Solver::full_setup_test_ranges()
t IVP_Linear_Constraint_Solver::lcs_bubble_sort_x_vals()
t IVP_Linear_Constraint_Solver::numerical_stability_ok()
t IVP_Linear_Constraint_Solver::mult_active_x_for_accel()
t IVP_Linear_Constraint_Solver::mult_x_with_full_A_minus_b()
t IVP_Linear_Constraint_Solver::do_a_little_random_permutation()
t IVP_Linear_Constraint_Solver::move_not_necessary_actives_to_inactives()
t IVP_Linear_Constraint_Solver::solve_lc()
t IVP_SurfaceBuilder_Pointsoup::error_output(IVP_Template_Polygon*)
b IVP_SurfaceBuilder_Pointsoup::single_tri_ledge
t IVP_SurfaceBuilder_Pointsoup::planes_to_template(IVP_U_Vector<IVP_U_Point>*, IVP_U_Vector<IVP_SurMan_PS_Plane>*)
t IVP_SurfaceBuilder_Pointsoup::get_offset_from_lineslist(IVP_Template_Line*, int, int, int, char*)
t IVP_SurfaceBuilder_Pointsoup::get_offset_from_pointlist(IVP_Template_Point*, int, IVP_U_Point*)
t IVP_SurfaceBuilder_Pointsoup::convert_triangle_to_compace_ledge(IVP_U_Point*, IVP_U_Point*, IVP_U_Point*)
t IVP_SurfaceBuilder_Pointsoup::convert_pointsoup_to_compact_ledge(IVP_U_Vector<IVP_U_Point>*)
t IVP_SurfaceBuilder_Pointsoup::convert_pointsoup_to_compact_surface(IVP_U_Vector<IVP_U_Point>*)
t IVP_SurfaceBuilder_Pointsoup::convert_pointsoup_to_compact_ledge_internal(IVP_U_Vector<IVP_U_Point>*)
t IVP_SurfaceBuilder_Pointsoup::try_to_build_convex_ledge_from_qhull_result(IVP_U_Vector<IVP_U_Point>*, IVP_BOOL*, char*, char*)
t IVP_SurfaceBuilder_Pointsoup::cleanup()
t IVP_U_Active_Terminal_Double::set_double(float, IVP_BOOL)
t IVP_U_Active_Terminal_Double::update_float()
t IVP_U_Active_Terminal_Double::print()
t IVP_U_Active_Terminal_Double::IVP_U_Active_Terminal_Double(char const*, float)
t IVP_U_Active_Terminal_Double::IVP_U_Active_Terminal_Double(char const*, float)
t IVP_U_Active_Terminal_Double::~IVP_U_Active_Terminal_Double()
t IVP_U_Active_Terminal_Double::~IVP_U_Active_Terminal_Double()
b vehicleparams_t_DataDescInit::g_DataMapHolder
t IVP_Intrusion_Included_Points::p()
t IVP_Intrusion_Included_Points::print(char const*)
t IVP_PerformanceCounter_Simple::stop_pcount()
t IVP_PerformanceCounter_Simple::start_pcount()
t IVP_PerformanceCounter_Simple::environment_is_going_to_be_deleted(IVP_Environment*)
t IVP_PerformanceCounter_Simple::reset_and_print_performance_counters(IVP_Time)
t IVP_PerformanceCounter_Simple::pcount(IVP_PERFORMANCE_ELEMENT)
t IVP_PerformanceCounter_Simple::IVP_PerformanceCounter_Simple()
t IVP_PerformanceCounter_Simple::IVP_PerformanceCounter_Simple()
t IVP_PerformanceCounter_Simple::~IVP_PerformanceCounter_Simple()
t IVP_PerformanceCounter_Simple::~IVP_PerformanceCounter_Simple()
t IVP_PerformanceCounter_Simple::~IVP_PerformanceCounter_Simple()
t IVP_SurfaceBuilder_Ledge_Soup::insert_ledge(IVP_Compact_Ledge*)
t IVP_SurfaceBuilder_Ledge_Soup::build_ledgetree(IVV_Sphere*)
t IVP_SurfaceBuilder_Ledge_Soup::ledges_to_spheres()
t IVP_SurfaceBuilder_Ledge_Soup::build_minimal_sphere(IVV_Sphere*, IVV_Sphere*)
t IVP_SurfaceBuilder_Ledge_Soup::calculate_boundingbox(IVP_U_Vector<IVV_Sphere>*, IVP_U_Float_Point*, IVP_U_Float_Point*)
t IVP_SurfaceBuilder_Ledge_Soup::insert_compact_ledges()
t IVP_SurfaceBuilder_Ledge_Soup::build_root_convex_hull()
t IVP_SurfaceBuilder_Ledge_Soup::allocate_compact_surface()
t IVP_SurfaceBuilder_Ledge_Soup::cluster_spheres_bottomup(float)
t IVP_SurfaceBuilder_Ledge_Soup::create_compact_ledgetree()
t IVP_SurfaceBuilder_Ledge_Soup::combine_spheres_in_vector(IVV_Cluster_Min_Hash*)
t IVP_SurfaceBuilder_Ledge_Soup::generate_interval_minhash(float)
t IVP_SurfaceBuilder_Ledge_Soup::convert_ledges_to_templates(IVP_U_BigVector<IVP_Compact_Ledge>&, IVP_U_Vector<IVP_Template_Polygon>*)
t IVP_SurfaceBuilder_Ledge_Soup::ledges_to_boxes_and_spheres()
t IVP_SurfaceBuilder_Ledge_Soup::ledgetree_array_debug_output()
t IVP_SurfaceBuilder_Ledge_Soup::add_ledge_tree_to_convex_hull(IVP_Compact_Recursive&, IVV_Sphere*)
t IVP_SurfaceBuilder_Ledge_Soup::insert_radius_in_compact_surface(IVP_BOOL)
t IVP_SurfaceBuilder_Ledge_Soup::cluster_spheres_topdown_mediancut(float)
t IVP_SurfaceBuilder_Ledge_Soup::recompile_point_indizes_of_compact_ledge(IVP_Compact_Ledge*, char*)
t IVP_SurfaceBuilder_Ledge_Soup::cluster_spheres_topdown_mediancut_recursively(IVP_U_Vector<IVV_Sphere>*)
t IVP_SurfaceBuilder_Ledge_Soup::remove_all_further_spherecombinations_from_hash(IVV_Cluster_Min_Hash*, int)
t IVP_SurfaceBuilder_Ledge_Soup::replace_childspheres_in_spherelist_with_motherspheres()
t IVP_SurfaceBuilder_Ledge_Soup::cleanup()
t IVP_SurfaceBuilder_Ledge_Soup::compile(IVP_Template_Surbuild_LedgeSoup*)
t IVP_SurfaceBuilder_Ledge_Soup::IVP_SurfaceBuilder_Ledge_Soup()
t IVP_SurfaceBuilder_Ledge_Soup::IVP_SurfaceBuilder_Ledge_Soup()
t IVP_SurfaceBuilder_Ledge_Soup::~IVP_SurfaceBuilder_Ledge_Soup()
t IVP_SurfaceBuilder_Ledge_Soup::~IVP_SurfaceBuilder_Ledge_Soup()
t IVP_Template_Controller_Golem::IVP_Template_Controller_Golem()
t IVP_Template_Controller_Golem::IVP_Template_Controller_Golem()
t IVP_Universe_Manager_Settings::IVP_Universe_Manager_Settings()
t IVP_Universe_Manager_Settings::IVP_Universe_Manager_Settings()
t IVP_Attacher_To_Cores_Buoyancy::get_buoyancy_surface(IVP_Real_Object*)
t IVP_Attacher_To_Cores_Buoyancy::get_parameters_per_core(IVP_Core*)
t IVP_Attacher_To_Cores_Buoyancy::IVP_Attacher_To_Cores_Buoyancy(IVP_Template_Buoyancy&, IVP_U_Set_Active<IVP_Core>*, IVP_Liquid_Surface_Descriptor*)
t IVP_Attacher_To_Cores_Buoyancy::IVP_Attacher_To_Cores_Buoyancy(IVP_Template_Buoyancy&, IVP_U_Set_Active<IVP_Core>*, IVP_Liquid_Surface_Descriptor*)
t IVP_Attacher_To_Cores_Buoyancy::~IVP_Attacher_To_Cores_Buoyancy()
t IVP_Attacher_To_Cores_Buoyancy::~IVP_Attacher_To_Cores_Buoyancy()
t IVP_Hull_Manager_Base_Gradient::IVP_Hull_Manager_Base_Gradient()
t IVP_Hull_Manager_Base_Gradient::IVP_Hull_Manager_Base_Gradient()
t IVP_Hull_Manager_Base_Gradient::~IVP_Hull_Manager_Base_Gradient()
t IVP_Hull_Manager_Base_Gradient::~IVP_Hull_Manager_Base_Gradient()
t IVP_Object_Callback_Table_Hash::find_table(IVP_Real_Object*)
t IVP_Object_Callback_Table_Hash::remove_table(IVP_Real_Object*)
t IVP_Object_Callback_Table_Hash::object_to_index(IVP_Real_Object*)
t IVP_Object_Callback_Table_Hash::add_table(IVP_Object_Callback_Table*)
t IVP_Object_Callback_Table_Hash::IVP_Object_Callback_Table_Hash(int)
t IVP_Object_Callback_Table_Hash::IVP_Object_Callback_Table_Hash(int)
t IVP_Object_Callback_Table_Hash::~IVP_Object_Callback_Table_Hash()
t IVP_Object_Callback_Table_Hash::~IVP_Object_Callback_Table_Hash()
t IVP_Object_Callback_Table_Hash::~IVP_Object_Callback_Table_Hash()
t IVP_SurfaceManager_VirtualMesh::add_reference_to_ledge(IVP_Compact_Ledge const*)
t IVP_SurfaceManager_VirtualMesh::get_all_terminal_ledges(IVP_U_BigVector<IVP_Compact_Ledge>*)
t IVP_SurfaceManager_VirtualMesh::remove_reference_to_ledge(IVP_Compact_Ledge const*)
t IVP_SurfaceManager_VirtualMesh::get_all_ledges_within_radius(IVP_U_Point const*, float, IVP_Compact_Ledge const*, IVP_Real_Object*, IVP_Compact_Ledge const*, IVP_U_BigVector<IVP_Compact_Ledge>*)
t IVP_SurfaceManager_VirtualMesh::insert_all_ledges_hitting_ray(IVP_Ray_Solver*, IVP_Real_Object*)
t IVP_SurfaceManager_VirtualMesh::get_type()
t IVP_SurfaceManager_VirtualMesh::IVP_SurfaceManager_VirtualMesh(CPhysCollideVirtualMesh*)
t IVP_SurfaceManager_VirtualMesh::IVP_SurfaceManager_VirtualMesh(CPhysCollideVirtualMesh*)
t IVP_SurfaceManager_VirtualMesh::~IVP_SurfaceManager_VirtualMesh()
t IVP_SurfaceManager_VirtualMesh::~IVP_SurfaceManager_VirtualMesh()
t IVP_SurfaceManager_VirtualMesh::~IVP_SurfaceManager_VirtualMesh()
t IVP_Template_Controller_Motion::IVP_Template_Controller_Motion()
t IVP_Template_Controller_Motion::IVP_Template_Controller_Motion()
t vphysics_save_cphysicsobject_t::GetBaseMap()
d vphysics_save_cphysicsobject_t::m_DataMap
t vphysics_save_cphysicsspring_t::GetBaseMap()
d vphysics_save_cphysicsspring_t::m_DataMap
t IVP_3D_Solver_VEC_PARALLEL_AREA::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
t IVP_Standard_Gravity_Controller::get_controller_name()
t IVP_Standard_Gravity_Controller::set_standard_gravity(IVP_U_Point*)
t IVP_Standard_Gravity_Controller::set_alternate_gravity(IVP_U_Point*)
t IVP_Standard_Gravity_Controller::get_controller_priority()
t IVP_Standard_Gravity_Controller::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t IVP_Standard_Gravity_Controller::core_is_going_to_be_deleted_event(IVP_Core*)
t IVP_Standard_Gravity_Controller::~IVP_Standard_Gravity_Controller()
t IVP_Standard_Gravity_Controller::~IVP_Standard_Gravity_Controller()
t vphysics_save_constraintfixed_t::GetBaseMap()
d vphysics_save_constraintfixed_t::m_DataMap
t vphysics_save_constrainthinge_t::GetBaseMap()
d vphysics_save_constrainthinge_t::m_DataMap
t CVPhysPtrUtlVectorSaveRestoreOps::Save(SaveRestoreFieldInfo_t const&, ISave*)
t CVPhysPtrUtlVectorSaveRestoreOps::Restore(SaveRestoreFieldInfo_t const&, IRestore*)
t hk_Ragdoll_Constraint_BP_Builder::set_ragdoll_constraint(hk_Rigid_Body*, hk_Rigid_Body*, hk_Vector3 const&, hk_Vector3 const&, hk_Vector3 const&, hk_Interval<float> const&, hk_Interval<float> const&, hk_Interval<float> const&, bool)
t hk_Ragdoll_Constraint_BP_Builder::initialize_from_limited_ball_socket_bp(hk_Limited_Ball_Socket_BP const*, hk_Rigid_Body*, hk_Rigid_Body*)
t IVP_SurfaceBuilder_Halfspacesoup::insert_point_into_list(IVP_U_Point*, IVP_U_Vector<IVP_U_Point>*, float)
t IVP_SurfaceBuilder_Halfspacesoup::convert_halfspacesoup_to_points(IVP_Halfspacesoup*, float, IVP_U_Vector<IVP_U_Point>*)
t IVP_SurfaceBuilder_Halfspacesoup::convert_halfspacesoup_to_compact_ledge(IVP_Halfspacesoup*, float)
t IVP_SurfaceBuilder_Halfspacesoup::convert_halfspacesoup_to_compact_surface(IVP_Halfspacesoup*, float)
b physcollideheader_t_DataDescInit::g_DataMapHolder
t vphysics_save_constraintlength_t::GetBaseMap()
d vphysics_save_constraintlength_t::m_DataMap
t vphysics_save_constraintpulley_t::GetBaseMap()
d vphysics_save_constraintpulley_t::m_DataMap
t vphysics_save_motioncontroller_t::GetBaseMap()
d vphysics_save_motioncontroller_t::m_DataMap
t vphysics_save_motioncontroller_t::~vphysics_save_motioncontroller_t()
t vphysics_save_motioncontroller_t::~vphysics_save_motioncontroller_t()
t CPredictedPhysicsMotionController::IsPredicted()
t CPredictedPhysicsMotionController::Prediction_Resimulate(float)
t CPredictedPhysicsMotionController::SetCallOrderRegistrar(CPredictableControllerSimulationOrderTracker*)
t CPredictedPhysicsMotionController::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t CPredictedPhysicsMotionController::OnPredictionCommandChanged(int, bool)
t CPredictedPhysicsMotionController::DoneReferencingPreviousCommands(int)
t CPredictedPhysicsMotionController::CPredictedPhysicsMotionController(IMotionEvent*, CPhysicsEnvironment*)
t CPredictedPhysicsMotionController::CPredictedPhysicsMotionController(IMotionEvent*, CPhysicsEnvironment*)
t CPredictedPhysicsMotionController::~CPredictedPhysicsMotionController()
t CPredictedPhysicsMotionController::~CPredictedPhysicsMotionController()
t CPredictedPhysicsMotionController::~CPredictedPhysicsMotionController()
t IVP_Collision_Callback_Table_Hash::object_to_index(IVP_Real_Object*)
t IVP_Collision_Callback_Table_Hash::~IVP_Collision_Callback_Table_Hash()
t IVP_Collision_Callback_Table_Hash::~IVP_Collision_Callback_Table_Hash()
t IVP_Collision_Callback_Table_Hash::~IVP_Collision_Callback_Table_Hash()
t IVP_Constraint_Solver_Car_Builder::disable_constraint(int)
t IVP_Constraint_Solver_Car_Builder::calc_pushing_behavior(int, int)
t IVP_Constraint_Solver_Car_Builder::calc_constraint_matrix()
t IVP_Constraint_Solver_Car_Builder::IVP_Constraint_Solver_Car_Builder(IVP_Constraint_Solver_Car*)
t IVP_Constraint_Solver_Car_Builder::IVP_Constraint_Solver_Car_Builder(IVP_Constraint_Solver_Car*)
t IVP_Multidimensional_Interpolator::sort_vectors(int)
t IVP_Multidimensional_Interpolator::get_nr_occupied()
t IVP_Multidimensional_Interpolator::get_nr_of_vectors()
t IVP_Multidimensional_Interpolator::add_new_input_solution_combination_stochastic(IVP_MI_Vector const*, IVP_MI_Vector const*)
t IVP_Multidimensional_Interpolator::add_new_input_solution_combination_conventional(IVP_MI_Vector const*, IVP_MI_Vector const*)
t IVP_Multidimensional_Interpolator::linfit(int, int, IVP_MI_Vector**, float*, float*)
t IVP_Multidimensional_Interpolator::IVP_Multidimensional_Interpolator(int, int, int)
t IVP_Multidimensional_Interpolator::IVP_Multidimensional_Interpolator(int, int, int)
t IVP_Multidimensional_Interpolator::~IVP_Multidimensional_Interpolator()
t IVP_Multidimensional_Interpolator::~IVP_Multidimensional_Interpolator()
t IVP_SurfaceBuilder_Polygon_Convex::convert_template_to_ledge(IVP_Template_Polygon*)
t IVP_SurfaceBuilder_Polygon_Convex::fill_list_with_all_triangles(IVP_U_Vector<IVP_Triangle>*)
t IVP_SurfaceBuilder_Polygon_Convex::get_and_remove_compact_ledge()
t IVP_SurfaceBuilder_Polygon_Convex::init_surface_manager_polygon()
t IVP_SurfaceBuilder_Polygon_Convex::convert_templateledgepolygonsoup_to_ledge(IVP_Template_Ledge_Polygon_Soup*)
t IVP_SurfaceBuilder_Polygon_Convex::IVP_SurfaceBuilder_Polygon_Convex(IVP_Template_Polygon*)
t IVP_SurfaceBuilder_Polygon_Convex::IVP_SurfaceBuilder_Polygon_Convex(IVP_Template_Ledge_Polygon_Soup*)
t IVP_SurfaceBuilder_Polygon_Convex::IVP_SurfaceBuilder_Polygon_Convex(IVP_Template_Polygon*)
t IVP_SurfaceBuilder_Polygon_Convex::IVP_SurfaceBuilder_Polygon_Convex(IVP_Template_Ledge_Polygon_Soup*)
t IVP_SurfaceBuilder_Polygon_Convex::~IVP_SurfaceBuilder_Polygon_Convex()
t IVP_SurfaceBuilder_Polygon_Convex::~IVP_SurfaceBuilder_Polygon_Convex()
t IVP_SurfaceManager_Polygon_Solver::traverse_cluster(IVP_Compact_Ledgetree_Node const*, IVP_U_Point const*, float, IVP_U_BigVector<IVP_Compact_Ledge>*)
b vehicle_axleparams_t_DataDescInit::g_DataMapHolder
b vehicle_bodyparams_t_DataDescInit::g_DataMapHolder
t vphysics_save_constraintragdoll_t::GetBaseMap()
d vphysics_save_constraintragdoll_t::m_DataMap
t vphysics_save_constraintsliding_t::GetBaseMap()
d vphysics_save_constraintsliding_t::m_DataMap
t vphysics_save_cshadowcontroller_t::GetBaseMap()
d vphysics_save_cshadowcontroller_t::m_DataMap
t CPhysics_Car_System_Raycast_Wheels::do_raycasts(IVP_Event_Sim*, int, IVP_Ray_Solver_Template*, IVP_Ray_Hit*, float*)
t CPhysics_Car_System_Raycast_Wheels::get_controller_name()
t CPhysics_Car_System_Raycast_Wheels::InitCarSystemWheels(IVP_Template_Car_System const*)
t CPhysics_Car_System_Raycast_Wheels::update_wheel_positions()
t CPhysics_Car_System_Raycast_Wheels::GetWheel(int)
t CPhysics_Car_System_Raycast_Wheels::CPhysics_Car_System_Raycast_Wheels(IVP_Environment*, IVP_Template_Car_System const*)
t CPhysics_Car_System_Raycast_Wheels::CPhysics_Car_System_Raycast_Wheels(IVP_Environment*, IVP_Template_Car_System const*)
t CPhysics_Car_System_Raycast_Wheels::~CPhysics_Car_System_Raycast_Wheels()
t CPhysics_Car_System_Raycast_Wheels::~CPhysics_Car_System_Raycast_Wheels()
t CPhysics_Car_System_Raycast_Wheels::~CPhysics_Car_System_Raycast_Wheels()
t IVP_Compact_Ledge_Find_Mass_Center::integrate_ledge(IVP_Compact_Ledge const*)
t IVP_Compact_Ledge_Find_Mass_Center::integrate_ledges(IVP_U_BigVector<IVP_Compact_Ledge>*)
t IVP_Compact_Ledge_Find_Mass_Center::integrate_triangle(IVP_Compact_Ledge const*, IVP_Compact_Triangle const*)
t IVP_Compact_Ledge_Find_Mass_Center::IVP_Compact_Ledge_Find_Mass_Center()
t IVP_Compact_Ledge_Find_Mass_Center::IVP_Compact_Ledge_Find_Mass_Center()
b vehicle_wheelparams_t_DataDescInit::g_DataMapHolder
t vphysics_save_cphysicsconstraint_t::GetBaseMap()
d vphysics_save_cphysicsconstraint_t::m_DataMap
t vphysics_save_cvehiclecontroller_t::GetBaseMap()
d vphysics_save_cvehiclecontroller_t::m_DataMap
b compactsurfaceheader_t_DataDescInit::g_DataMapHolder
t IPredictable_Controller_Independant::~IPredictable_Controller_Independant()
t IPredictable_Controller_Independant::~IPredictable_Controller_Independant()
t IPredictable_Controller_Independant::~IPredictable_Controller_Independant()
t IVP_Collision_Filter_Exclusive_Pair::generate_hash_entry(IVP_Real_Object*, IVP_Real_Object*, IVP_CFEP_Objectpair*)
t IVP_Collision_Filter_Exclusive_Pair::environment_will_be_deleted(IVP_Environment*)
t IVP_Collision_Filter_Exclusive_Pair::enable_collision_between_objects(IVP_Real_Object*, IVP_Real_Object*)
t IVP_Collision_Filter_Exclusive_Pair::disable_collision_between_objects(IVP_Real_Object*, IVP_Real_Object*)
t IVP_Collision_Filter_Exclusive_Pair::check_objects_for_collision_detection(IVP_Real_Object*, IVP_Real_Object*)
t IVP_Collision_Filter_Exclusive_Pair::IVP_Collision_Filter_Exclusive_Pair()
t IVP_Collision_Filter_Exclusive_Pair::IVP_Collision_Filter_Exclusive_Pair()
t IVP_Collision_Filter_Exclusive_Pair::~IVP_Collision_Filter_Exclusive_Pair()
t IVP_Collision_Filter_Exclusive_Pair::~IVP_Collision_Filter_Exclusive_Pair()
t IVP_Collision_Filter_Exclusive_Pair::~IVP_Collision_Filter_Exclusive_Pair()
b vehicle_engineparams_t_DataDescInit::g_DataMapHolder
t vphysics_save_constraintaxislimit_t::GetBaseMap()
d vphysics_save_constraintaxislimit_t::m_DataMap
t vphysics_save_constraintbreakable_t::GetBaseMap()
d vphysics_save_constraintbreakable_t::m_DataMap
t vphysics_save_shadowcontrolparams_t::GetBaseMap()
d vphysics_save_shadowcontrolparams_t::m_DataMap
t IVP_3D_Solver_DISTANCE_OF_TWO_POINTS::get_value(IVP_U_Matrix*, IVP_U_Matrix*)
t IVP_Collision_Delegator_Root_Mindist::delegate_collisions_for_object(IVP_Real_Object*, IVP_Real_Object*)
t IVP_Collision_Delegator_Root_Mindist::collision_is_going_to_be_deleted_event(IVP_Collision*)
t IVP_Collision_Delegator_Root_Mindist::environment_is_going_to_be_deleted_event(IVP_Environment*)
t IVP_Collision_Delegator_Root_Mindist::object_is_removed_from_collision_detection(IVP_Real_Object*)
t IVP_Collision_Delegator_Root_Mindist::IVP_Collision_Delegator_Root_Mindist()
t IVP_Collision_Delegator_Root_Mindist::IVP_Collision_Delegator_Root_Mindist()
t IVP_Collision_Delegator_Root_Mindist::~IVP_Collision_Delegator_Root_Mindist()
t IVP_Collision_Delegator_Root_Mindist::~IVP_Collision_Delegator_Root_Mindist()
t IVP_Collision_Delegator_Root_Mindist::~IVP_Collision_Delegator_Root_Mindist()
t IVP_Compact_Ledge_Mass_Center_Solver::integrate_triangle(IVP_Compact_Ledge const*, IVP_Compact_Triangle const*, int, int, int)
t IVP_Compact_Ledge_Mass_Center_Solver::IVP_Compact_Ledge_Mass_Center_Solver(IVP_U_Matrix const*)
t IVP_Compact_Ledge_Mass_Center_Solver::IVP_Compact_Ledge_Mass_Center_Solver(IVP_U_Matrix const*)
t IVP_Liquid_Surface_Descriptor_Simple::calc_liquid_surface(IVP_Environment*, IVP_Core*, IVP_U_Float_Hesse*, IVP_U_Float_Point*)
t IVP_Liquid_Surface_Descriptor_Simple::IVP_Liquid_Surface_Descriptor_Simple(IVP_U_Float_Hesse const*, IVP_U_Float_Point const*)
t IVP_Liquid_Surface_Descriptor_Simple::IVP_Liquid_Surface_Descriptor_Simple(IVP_U_Float_Hesse const*, IVP_U_Float_Point const*)
t vphysics_save_constraintballsocket_t::GetBaseMap()
d vphysics_save_constraintballsocket_t::m_DataMap
b vehicle_steeringparams_t_DataDescInit::g_DataMapHolder
b vehicle_operatingparams_t_DataDescInit::g_DataMapHolder
t IVP_BetterStatisticsmanager_Data_Entity::set_position(int, int)
t IVP_BetterStatisticsmanager_Data_Entity::set_int_value(int)
t IVP_BetterStatisticsmanager_Data_Entity::set_array_size(int)
t IVP_BetterStatisticsmanager_Data_Entity::set_double_value(float)
t IVP_BetterStatisticsmanager_Data_Entity::set_int_array_latest_value(int)
t IVP_BetterStatisticsmanager_Data_Entity::set_double_array_latest_value(float)
t IVP_BetterStatisticsmanager_Data_Entity::enable()
t IVP_BetterStatisticsmanager_Data_Entity::disable()
t IVP_BetterStatisticsmanager_Data_Entity::set_text(char const*)
t IVP_BetterStatisticsmanager_Data_Entity::get_state()
t IVP_BetterStatisticsmanager_Data_Entity::IVP_BetterStatisticsmanager_Data_Entity(IVP_BETTERSTATISTICSMANAGER_DATA_ENTITY_TYPE)
t IVP_BetterStatisticsmanager_Data_Entity::IVP_BetterStatisticsmanager_Data_Entity(IVP_BETTERSTATISTICSMANAGER_DATA_ENTITY_TYPE)
t IVP_BetterStatisticsmanager_Data_Entity::~IVP_BetterStatisticsmanager_Data_Entity()
t IVP_BetterStatisticsmanager_Data_Entity::~IVP_BetterStatisticsmanager_Data_Entity()
b vehicle_suspensionparams_t_DataDescInit::g_DataMapHolder
t vphysics_save_cphysicsconstraintgroup_t::GetBaseMap()
d vphysics_save_cphysicsconstraintgroup_t::m_DataMap
t CPredictable_Controller_Independant_Stub::IsPredicted()
t CPredictable_Controller_Independant_Stub::Prediction_Resimulate(float)
t CPredictable_Controller_Independant_Stub::SetCallOrderRegistrar(CPredictableControllerSimulationOrderTracker*)
t CPredictable_Controller_Independant_Stub::get_controller_priority()
t CPredictable_Controller_Independant_Stub::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t CPredictable_Controller_Independant_Stub::get_associated_controlled_cores()
t CPredictable_Controller_Independant_Stub::~CPredictable_Controller_Independant_Stub()
t CPredictable_Controller_Independant_Stub::~CPredictable_Controller_Independant_Stub()
t CPredictable_Controller_Independant_Stub::~CPredictable_Controller_Independant_Stub()
b vphysics_save_cphysicsobject_t_DataDescInit::g_DataMapHolder
b vphysics_save_cphysicsspring_t_DataDescInit::g_DataMapHolder
t CPredictableControllerSimulationOrderTracker::IsDeleting(IPredictable_Controller_Independant*)
t CPredictableControllerSimulationOrderTracker::RegisterSimulation(IPredictable_Controller_Independant*)
t CPredictableControllerSimulationOrderTracker::~CPredictableControllerSimulationOrderTracker()
t CPredictableControllerSimulationOrderTracker::~CPredictableControllerSimulationOrderTracker()
t IVP_Controller_Raycast_Car_Vector_of_Cores_1::IVP_Controller_Raycast_Car_Vector_of_Cores_1()
t IVP_Controller_Raycast_Car_Vector_of_Cores_1::IVP_Controller_Raycast_Car_Vector_of_Cores_1()
t IVP_Controller_Raycast_Car_Vector_of_Cores_1::~IVP_Controller_Raycast_Car_Vector_of_Cores_1()
b vphysics_save_constraintfixed_t_DataDescInit::g_DataMapHolder
b vphysics_save_constrainthinge_t_DataDescInit::g_DataMapHolder
b vphysics_save_constraintlength_t_DataDescInit::g_DataMapHolder
b vphysics_save_constraintpulley_t_DataDescInit::g_DataMapHolder
b vphysics_save_motioncontroller_t_DataDescInit::g_DataMapHolder
b vphysics_save_constraintragdoll_t_DataDescInit::g_DataMapHolder
b vphysics_save_constraintsliding_t_DataDescInit::g_DataMapHolder
b vphysics_save_cshadowcontroller_t_DataDescInit::g_DataMapHolder
b vphysics_save_cphysicsconstraint_t_DataDescInit::g_DataMapHolder
b vphysics_save_cvehiclecontroller_t_DataDescInit::g_DataMapHolder
t IVP_Controller_Raycast_Airboat_Vector_of_Cores_1::IVP_Controller_Raycast_Airboat_Vector_of_Cores_1()
t IVP_Controller_Raycast_Airboat_Vector_of_Cores_1::IVP_Controller_Raycast_Airboat_Vector_of_Cores_1()
t IVP_Controller_Raycast_Airboat_Vector_of_Cores_1::~IVP_Controller_Raycast_Airboat_Vector_of_Cores_1()
t IVP_Controller_Raycast_Airboat_Vector_of_Cores_1::~IVP_Controller_Raycast_Airboat_Vector_of_Cores_1()
b vphysics_save_constraintaxislimit_t_DataDescInit::g_DataMapHolder
b vphysics_save_constraintbreakable_t_DataDescInit::g_DataMapHolder
b vphysics_save_shadowcontrolparams_t_DataDescInit::g_DataMapHolder
b vphysics_save_constraintballsocket_t_DataDescInit::g_DataMapHolder
t CPredictableControllerSimulationOrderTracker_Manager::MarkCommandEnd()
t CPredictableControllerSimulationOrderTracker_Manager::MarkCommandStart(int)
t CPredictableControllerSimulationOrderTracker_Manager::ResimulateCommand(int, float)
t CPredictableControllerSimulationOrderTracker_Manager::DoneReferencingPreviousCommands(int)
t CPredictableControllerSimulationOrderTracker_Manager::~CPredictableControllerSimulationOrderTracker_Manager()
t CPredictableControllerSimulationOrderTracker_Manager::~CPredictableControllerSimulationOrderTracker_Manager()
b vphysics_save_cphysicsconstraintgroup_t_DataDescInit::g_DataMapHolder
t CWrap::~CWrap() [clone .constprop.2]
t ConVar::ClampValue(float&)
t ConVar::SetDefault(char const*)
t ConVar::InternalSetValue(char const*)
t ConVar::ChangeStringValue(char const*, float)
t ConVar::InternalSetIntValue(int)
t ConVar::RemoveChangeCallback(void (*)(IConVar*, char const*, float))
t ConVar::InstallChangeCallback(void (*)(IConVar*, char const*, float), bool)
t ConVar::InternalSetColorValue(Color)
t ConVar::InternalSetFloatValue(float)
t ConVar::InternalSetColorFromString(char const*)
t ConVar::Init()
t ConVar::Create(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float))
t ConVar::Revert()
t ConVar::AddFlags(int)
t ConVar::SetValue(Color)
t ConVar::SetValue(float)
t ConVar::SetValue(int)
t ConVar::SetValue(char const*)
t ConVar::ConVar(char const*, char const*, int)
t ConVar::ConVar(char const*, char const*, int, char const*)
t ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float)
t ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float))
t ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float))
t ConVar::ConVar(char const*, char const*, int)
t ConVar::ConVar(char const*, char const*, int, char const*)
t ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float)
t ConVar::ConVar(char const*, char const*, int, char const*, bool, float, bool, float, void (*)(IConVar*, char const*, float))
t ConVar::ConVar(char const*, char const*, int, char const*, void (*)(IConVar*, char const*, float))
t ConVar::~ConVar()
t ConVar::~ConVar()
t ConVar::~ConVar()
t CDefOps<void*>::LessFunc(void* const&, void* const&)
t CTSPool<CUtlVector<CPhysCollideVirtualMesh*, CUtlMemory<CPhysCollideVirtualMesh*, int> > >::~CTSPool()
t CTSPool<CUtlVector<CPhysCollideVirtualMesh*, CUtlMemory<CPhysCollideVirtualMesh*, int> > >::~CTSPool()
t CTSPool<CVisitHash>::~CTSPool()
t CTSPool<CVisitHash>::~CTSPool()
t CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::~CUtlMap()
t CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::~CUtlMap()
d hk_Math::hk_random_seed
t hk_Math::rand01()
t hk_Math::srand01(unsigned int)
t VMatrix::SetupMatrixOrgAngles(Vector const&, QAngle const&)
t VMatrix::Scale(Vector const&)
t VMatrix::operator=(VMatrix const&)
t CCommand::DefaultBreakSet()
t CCommand::Reset()
t CCommand::Tokenize(char const*, characterset_t*)
t CCommand::CCommand(int, char const**)
t CCommand::CCommand()
t CCommand::CCommand(int, char const**)
t CCommand::CCommand()
t CFmtStrN<256, false>::InitQuietTruncation()
t CFmtStrN<256, false>::sprintf(char const*, ...)
t CFmtStrN<256, false>::CFmtStrN(char const*, ...)
t CFmtStrN<256, false>::CFmtStrN(char const*, ...)
t CSurface::get_damping()
t CSurface::get_adhesion()
t CSurface::get_elasticity()
t CSurface::get_friction_factor()
t CSurface::get_second_friction_factor()
t CSurface::get_name()
t CSurface::~CSurface()
t CSurface::~CSurface()
t CSurface::~CSurface()
t hk_Array<hk_Constraint*>::~hk_Array()
t hk_Array<hk_Constraint*>::~hk_Array()
t IVP_Ball::set_radius(float)
t IVP_Ball::IVP_Ball(IVP_Cluster*, IVP_Template_Ball const*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
t IVP_Ball::IVP_Ball(IVP_Cluster*, IVP_Template_Ball const*, IVP_Template_Real_Object const*, IVP_U_Quat const*, IVP_U_Point const*)
t IVP_Ball::~IVP_Ball()
t IVP_Ball::~IVP_Ball()
t IVP_Ball::~IVP_Ball()
t IVP_Core::reset_time(IVP_Time)
t IVP_Core::set_radius(float, float)
t IVP_Core::damp_object(float, IVP_U_Float_Point const*, float)
t IVP_Core::push_core_ws(IVP_U_Point const*, IVP_U_Float_Point const*)
t IVP_Core::clip_velocity(IVP_U_Float_Point*, IVP_U_Float_Point*)
t IVP_Core::async_push_core(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_Core::get_environment()
t IVP_Core::get_position_PSI()
t IVP_Core::get_rot_speed_cs(IVP_U_Float_Point const*)
t IVP_Core::global_damp_core(float)
t IVP_Core::rot_push_core_cs(IVP_U_Float_Point const*)
t IVP_Core::add_friction_info(IVP_Friction_Info_For_Core*)
t IVP_Core::get_friction_info(IVP_Friction_System*)
t IVP_Core::async_push_core_ws(IVP_U_Point const*, IVP_U_Float_Point const*)
t IVP_Core::get_energy_on_test(IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_Core::get_rot_inertia_cs(IVP_U_Float_Point const*)
t IVP_Core::add_core_controller(IVP_Controller*)
t IVP_Core::calc_movement_state(IVP_Time)
t IVP_Core::fast_piling_allowed()
t IVP_Core::rem_core_controller(IVP_Controller*)
t IVP_Core::apply_velocity_limit()
t IVP_Core::calc_next_PSI_matrix(IVP_U_Vector<IVP_Core>*, IVP_Event_Sim*)
t IVP_Core::core_add_link_to_obj(IVP_Real_Object*)
t IVP_Core::core_plausible_check()
t IVP_Core::delete_friction_info(IVP_Friction_Info_For_Core*)
t IVP_Core::get_surface_speed_ws(IVP_U_Point const*, IVP_U_Float_Point*)
t IVP_Core::grow_friction_system()
t IVP_Core::set_rotation_inertia(IVP_U_Float_Point const*)
t IVP_Core::unlink_friction_info(IVP_Friction_Info_For_Core*)
t IVP_Core::union_find_get_father()
t IVP_Core::abort_all_async_pushes()
t IVP_Core::freeze_simulation_core()
t IVP_Core::get_m_world_f_core_PSI()
t IVP_Core::revive_simulation_core()
t IVP_Core::set_matrizes_and_speed(IVP_Core_Merged*, IVP_U_Matrix*)
t IVP_Core::stop_physical_movement()
t IVP_Core::synchronize_with_rot_z()
t IVP_Core::undo_synchronize_rot_z()
t IVP_Core::commit_all_async_pushes()
t IVP_Core::debug_out_movement_vars()
t IVP_Core::set_fast_piling_allowed(IVP_BOOL)
t IVP_Core::debug_vec_movement_state()
t IVP_Core::fire_event_object_frozen()
t IVP_Core::init_core_for_simulation()
t IVP_Core::reset_freeze_check_values()
t IVP_Core::rot_push_core_multiple_cs(IVP_U_Float_Point const*, float)
t IVP_Core::rot_push_core_multiple_ws(IVP_U_Float_Point const*, float)
t IVP_Core::rot_speed_plausible_check(IVP_U_Float_Point const*)
t IVP_Core::transform_PSI_matrizes_core(IVP_U_Matrix const*)
t IVP_Core::center_push_core_multiple_ws(IVP_U_Float_Point const*, float)
t IVP_Core::revive_adjacent_to_unmoveable()
t IVP_Core::test_rot_push_core_multiple_cs(IVP_U_Float_Point const*, float, IVP_U_Float_Point*)
t IVP_Core::async_rot_push_core_multiple_cs(IVP_U_Float_Point const*, float)
t IVP_Core::async_rot_push_core_multiple_ws(IVP_U_Float_Point const*, float)
t IVP_Core::calc_next_PSI_matrix_zero_speed(IVP_Event_Sim*)
t IVP_Core::ensure_core_to_be_in_simulation()
t IVP_Core::moveable_core_has_friction_info()
t IVP_Core::values_changed_recalc_redundants()
t IVP_Core::create_collision_merged_core_with(IVP_Core*)
t IVP_Core::ensure_core_in_simulation_delayed()
t IVP_Core::async_center_push_core_multiple_ws(IVP_U_Float_Point const*, float)
t IVP_Core::ensure_all_core_objs_in_simulation()
t IVP_Core::unmovable_core_debug_friction_hash()
t IVP_Core::get_diff_surface_speed_of_two_cores(IVP_Core const*, IVP_Core const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*)
t IVP_Core::update_exact_mindist_events_of_core()
t IVP_Core::ensure_all_core_objs_in_simulation_now()
t IVP_Core::unlink_obj_from_core_and_maybe_destroy(IVP_Real_Object*)
t IVP_Core::stop_movement_without_collision_recheck()
t IVP_Core::get_diff_surface_speed_of_two_cores_on_test(IVP_Core const*, IVP_Core const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*)
t IVP_Core::init(IVP_Real_Object*, bool)
t IVP_Core::set_mass(float)
t IVP_Core::calc_calc()
t IVP_Core::push_core(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*)
t IVP_Core::IVP_Core(IVP_Real_Object*)
t IVP_Core::IVP_Core(IVP_Real_Object*, IVP_U_Quat const*, IVP_U_Point const*, IVP_BOOL, IVP_BOOL)
t IVP_Core::IVP_Core(IVP_Real_Object*)
t IVP_Core::IVP_Core(IVP_Real_Object*, IVP_U_Quat const*, IVP_U_Point const*, IVP_BOOL, IVP_BOOL)
t IVP_Core::~IVP_Core()
t IVP_Core::~IVP_Core()
t IVP_Hash::add(char const*, void*)
t IVP_Hash::remove(char const*)
t IVP_Hash::IVP_Hash(int, int, void*)
t IVP_Hash::IVP_Hash(int, int, void*)
t IVP_Hash::~IVP_Hash()
t IVP_Hash::~IVP_Hash()
t P_String::string_cmp(char const*, char const*, IVP_BOOL)
t P_String::find_string(char const*, char const*, int)
t P_String::uppercase(char*)
t P_Sur_2D::calc_line_representation()
t P_Sur_2D::calc_triangle_representation()
t P_Sur_2D::P_Sur_2D(IVP_Object_Polygon_Tetra*, IVP_Template_Surface*)
t P_Sur_2D::P_Sur_2D(IVP_Object_Polygon_Tetra*, IVP_Template_Surface*)
t P_Sur_2D::~P_Sur_2D()
t P_Sur_2D::~P_Sur_2D()
t CByteswap::SwapFieldToTargetEndian(void*, void*, typedescription_t*)
t CByteswap::SwapFieldsToTargetEndian(void*, void*, datamap_t*)
t ConVarRef::Init(char const*, bool)
t ConVarRef::ConVarRef(IConVar*)
t ConVarRef::ConVarRef(char const*)
t ConVarRef::ConVarRef(char const*, bool)
t ConVarRef::ConVarRef(IConVar*)
t ConVarRef::ConVarRef(char const*)
t ConVarRef::ConVarRef(char const*, bool)
t CTraceIVP::BuildLeafmapCache(leafmap_t const*)
t CTraceIVP::BuildLeafmapCacheRLE(leafmap_t const*)
t CTraceIVP::BuildSingleTriangleCache(IVP_Compact_Ledge const*)
t CTraceIVP::CTraceIVP(CPhysCollide const*)
t CTraceIVP::CTraceIVP(CPhysCollide const*, Vector const&, QAngle const&)
t CTraceIVP::CTraceIVP(CPhysCollide const*)
t CTraceIVP::CTraceIVP(CPhysCollide const*, Vector const&, QAngle const&)
t CTraceRay::Init(Vector const&, Vector const&)
t CTraceRay::Reset(float)
t CTraceRay::CTraceRay(Ray_t const&)
t CTraceRay::CTraceRay(Ray_t const&, Vector const&)
t CTraceRay::CTraceRay(Vector const&, Vector const&)
t CTraceRay::CTraceRay(Ray_t const&)
t CTraceRay::CTraceRay(Ray_t const&, Vector const&)
t CTraceRay::CTraceRay(Vector const&, Vector const&)
t Frustum_t::CreateOrthoFrustum(Vector const&, Vector const&, Vector const&, Vector const&, float, float, float, float, float, float)
t Frustum_t::CreateOrthoFrustumFLU(Vector const&, Vector const&, Vector const&, Vector const&, float, float, float, float, float, float)
t Frustum_t::CreatePerspectiveFrustum(Vector const&, QAngle const&, float, float, float, float)
t Frustum_t::CreatePerspectiveFrustum(Vector const&, Vector const&, Vector const&, Vector const&, float, float, float, float)
t Frustum_t::CreatePerspectiveFrustumFLU(Vector const&, Vector const&, Vector const&, Vector const&, float, float, float, float)
t Frustum_t::SetPlane(int, Vector const&, float)
t Frustum_t::SetPlanes(VPlane const*)
t Frustum_t::Frustum_t()
t Frustum_t::Frustum_t()
t __gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&)
t __gnu_cxx::__scoped_lock::__scoped_lock(__gnu_cxx::__mutex&)
t __gnu_cxx::__scoped_lock::~__scoped_lock()
t __gnu_cxx::__scoped_lock::~__scoped_lock()
t __gnu_cxx::recursive_init_error::~recursive_init_error()
t __gnu_cxx::recursive_init_error::~recursive_init_error()
t __gnu_cxx::recursive_init_error::~recursive_init_error()
t __gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()
t __gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()
t __gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()
t __gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()
t __gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()
t __gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()
t __gnu_cxx::__verbose_terminate_handler()
t hk_Memory::deallocate(void*, int, hk_MEMORY_CLASS)
t hk_Memory::aligned_free(void*)
t hk_Memory::get_instance()
t hk_Memory::aligned_malloc(unsigned int, unsigned int)
t hk_Memory::allocate(int, hk_MEMORY_CLASS)
t hk_Memory::hk_Memory()
t hk_Memory::hk_Memory()
t hk_Memory::~hk_Memory()
t hk_Memory::~hk_Memory()
t IVP_U_Set<IVP_Real_Object>::~IVP_U_Set()
t IVP_U_Set<IVP_Real_Object>::~IVP_U_Set()
t IVP_U_Set<IVP_Mindist_Base>::~IVP_U_Set()
t IVP_U_Set<IVP_Mindist_Base>::~IVP_U_Set()
t IVP_U_Set<IVP_Core>::~IVP_U_Set()
t IVP_U_Set<IVP_Core>::~IVP_U_Set()
t IVP_VHash::deactivate()
t IVP_VHash::remove_elem(void const*, unsigned int)
t IVP_VHash::untouch_all()
t IVP_VHash::touch_element(void const*, unsigned int)
t IVP_VHash::garbage_collection(int)
t IVP_VHash::check()
t IVP_VHash::rehash(int)
t IVP_VHash::activate(int)
t IVP_VHash::add_elem(void const*, int)
t IVP_VHash::IVP_VHash(int)
t IVP_VHash::IVP_VHash(IVP_VHash_Elem*, int)
t IVP_VHash::IVP_VHash(int)
t IVP_VHash::IVP_VHash(IVP_VHash_Elem*, int)
t IVP_VHash::~IVP_VHash()
t IVP_VHash::~IVP_VHash()
t IVP_VHash::~IVP_VHash()
t simplex_t::SolveGJKSet(simplexvert_t const&, Vector*)
t simplex_t::ClipRayToTriangle(Vector const&, float)
t simplex_t::SolveVoronoiRegion2(simplexvert_t const&, Vector*)
t simplex_t::SolveVoronoiRegion3(simplexvert_t const&, Vector*)
t simplex_t::SolveVoronoiRegion4(simplexvert_t const&, Vector*)
t simplex_t::ClipRayToTetrahedron(Vector const&)
t simplex_t::ClipRayToTetrahedronBase(Vector const&)
t operator new[](unsigned int)
t operator new[](unsigned int, int, char const*, int)
t ConCommand::IsCommand() const
t CTraceAABB::SupportMap(Vector const&, Vector*) const
t CTraceAABB::GetVertByIndex(int) const
t CTraceAABB::Radius() const
t CTraceCone::SupportMap(Vector const&, Vector*) const
t CTraceCone::GetVertByIndex(int) const
t CTraceCone::Radius() const
t CUtlRBTree<CUtlSymbolTable::CStringPoolIndex, unsigned short, CUtlSymbolTable::CLess, CUtlMemory<UtlRBTreeNode_t<CUtlSymbolTable::CStringPoolIndex, unsigned short>, unsigned short> >::Find(CUtlSymbolTable::CStringPoolIndex const&) const
t CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::NextInorder(unsigned short) const
t CUtlRBTree<CPhysicsListenerCollision::corepair_t, unsigned short, bool (*)(CPhysicsListenerCollision::corepair_t const&, CPhysicsListenerCollision::corepair_t const&), CUtlMemory<UtlRBTreeNode_t<CPhysicsListenerCollision::corepair_t, unsigned short>, unsigned short> >::Find(CPhysicsListenerCollision::corepair_t const&) const
t CUtlRBTree<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short, CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::CKeyLess, CUtlMemory<UtlRBTreeNode_t<CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t, unsigned short>, unsigned short> >::Find(CUtlMap<void*, void*, unsigned short, bool (*)(void* const&, void* const&)>::Node_t const&) const
t CUtlString::GetExtension() const
t CUtlString::StripFilename() const
t CUtlString::StripExtension() const
t CUtlString::GetBaseFilename() const
t CUtlString::Get() const
t CUtlString::Length() const
t CUtlString::operator char const*() const
t CUtlString::operator==(char const*) const
t CUtlString::operator==(CUtlString const&) const
t CUtlSymbol::StringNoLock() const
t CUtlSymbol::String() const
t CUtlSymbol::operator==(char const*) const
t hk_Matrix3::is_identity_rotation() const
t IVP_Object::get_environment() const
t IVP_Object::get_name() const
t IVP_Object::get_type() const
t IVP_U_Quat::set_matrix(IVP_U_Matrix3*) const
t IVP_U_Quat::set_matrix(float (*) [4]) const
t IVP_U_Quat::inline_estimate_q_diff_to(IVP_U_Float_Quat const*) const
t IVP_U_Quat::acos_quat(IVP_U_Quat const*) const
t Quaternion::GetForward() const
t Quaternion::GetUp() const
t Quaternion::GetLeft() const
t CPolyhedron::Center() const
t IVP_Mindist::get_synapse(int) const
t IVP_Mindist::get_sorted_synapse(int) const
t IVP_Synapse::get_status() const
t IVP_Synapse::get_synapse_mindist() const
t IVP_Synapse::get_edge() const
t IVP_Synapse::get_ledge() const
t IVP_U_Hesse::proj_on_plane(IVP_U_Point const*, IVP_U_Point*) const
t IVP_U_Hesse::calc_intersect_with(IVP_U_Straight const*, IVP_U_Point*) const
t IVP_U_Hesse::get_dist(IVP_U_Float_Point const*) const
t IVP_U_Plain::calc_intersect_with(IVP_U_Hesse const*, IVP_U_Straight*) const
t IVP_U_Point::is_parallel(IVP_U_Point const*, float) const
t CEmptyConVar::GetName() const
t CEmptyConVar::IsFlagSet(int) const
t CPhysCollide::GetAABBTree() const
t CPhysCollide::GetCollideMap() const
t CPhysCollide::GetSphereRadius() const
t CPhysCollide::GetCompactSurface() const
t CPhysCollide::GetOrthographicAreas() const
t fourplanes_t::Get2Planes(VPlane*) const
t fourplanes_t::Get4Planes(VPlane*) const
t fourplanes_t::GetPlane(int, Vector*, float*) const
t hk_Transform::get_4x4_column_major(float*) const
t IVP_U_Matrix::get_position() const
t IVP_U_Matrix::inline_mmult4(IVP_U_Matrix const*, IVP_U_Matrix*) const
t IVP_U_Matrix::inline_vmult4(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_U_Matrix::inline_mimult4(IVP_U_Matrix const*, IVP_U_Matrix*) const
t IVP_U_Matrix::inline_vimult4(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_U_Matrix::get_4x4_column_major(float*) const
t IVP_U_Matrix::mmult4(IVP_U_Matrix const*, IVP_U_Matrix*) const
t IVP_U_Matrix::vmult4(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_U_Matrix::mimult4(IVP_U_Matrix const*, IVP_U_Matrix*) const
t IVP_U_Matrix::vimult4(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_U_Matrix::mi2mult4(IVP_U_Matrix const*, IVP_U_Matrix*) const
t CUtlMultiList<void*, unsigned short>::IsValidList(unsigned short) const
t IVP_CFEP_Hash::compare(void*, void*) const
t IVP_Collision::get_fvector_index(int) const
t IVP_MI_Vector::print() const
t IVP_MI_Vector::length() const
t IVP_U_Matrix3::inline_mmult3(IVP_U_Matrix3 const*, IVP_U_Matrix3*) const
t IVP_U_Matrix3::inline_vmult3(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_U_Matrix3::inline_mimult3(IVP_U_Matrix3 const*, IVP_U_Matrix3*) const
t IVP_U_Matrix3::inline_vimult3(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_U_Matrix3::get_determinante() const
t IVP_U_Matrix3::mmult3(IVP_U_Matrix3 const*, IVP_U_Matrix3*) const
t IVP_U_Matrix3::vmult3(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_U_Matrix3::get_col(IVP_COORDINATE_INDEX, IVP_U_Point*) const
t IVP_U_Matrix3::get_col(IVP_COORDINATE_INDEX, IVP_U_Float_Point*) const
t IVP_U_Matrix3::get_row(IVP_COORDINATE_INDEX, IVP_U_Point*) const
t IVP_U_Matrix3::get_row(IVP_COORDINATE_INDEX, IVP_U_Float_Point*) const
t IVP_U_Matrix3::mimult3(IVP_U_Matrix3 const*, IVP_U_Matrix3*) const
t IVP_U_Matrix3::vimult3(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_U_Matrix3::get_elem(int, int) const
t IVP_U_Matrix3::mi2mult3(IVP_U_Matrix3 const*, IVP_U_Matrix3*) const
t ConCommandBase::GetHelpText() const
t ConCommandBase::IsRegistered() const
t ConCommandBase::GetDLLIdentifier() const
t ConCommandBase::GetName() const
t ConCommandBase::GetNext() const
t ConCommandBase::GetFlags() const
t ConCommandBase::IsCommand() const
t ConCommandBase::IsFlagSet(int) const
t CPhysicsObject::GetCollide() const
t CPhysicsObject::GetDamping(float*, float*) const
t CPhysicsObject::GetInertia() const
t CPhysicsObject::GetInvMass() const
t CPhysicsObject::IsMoveable() const
t CPhysicsObject::GetContents() const
t CPhysicsObject::GetGameData() const
t CPhysicsObject::GetPosition(Vector*, QAngle*) const
t CPhysicsObject::GetVelocity(Vector*, Vector*) const
t CPhysicsObject::IsPredicted() const
t CPhysicsObject::GetGameFlags() const
t CPhysicsObject::GetGameIndex() const
t CPhysicsObject::LocalToWorld(Vector*, Vector const&) const
t CPhysicsObject::WorldToLocal(Vector*, Vector const&) const
t CPhysicsObject::GetInvInertia() const
t CPhysicsObject::IsControlling(IVP_Controller const*) const
t CPhysicsObject::IsDragEnabled() const
t CPhysicsObject::GetContactPoint(Vector*, IPhysicsObject**) const
t CPhysicsObject::GetSphereRadius() const
t CPhysicsObject::IsMotionEnabled() const
t CPhysicsObject::OutputDebugInfo() const
t CPhysicsObject::GetCallbackFlags() const
t CPhysicsObject::GetMaterialIndex() const
t CPhysicsObject::IsGravityEnabled() const
t CPhysicsObject::GetCollisionHints() const
t CPhysicsObject::GetPositionMatrix(matrix3x4_t*) const
t CPhysicsObject::GetShadowPosition(Vector*, QAngle*) const
t CPhysicsObject::GetSurfaceManager() const
t CPhysicsObject::GetDragInDirection(IVP_U_Float_Point const&) const
t CPhysicsObject::GetVelocityAtPoint(Vector const&, Vector*) const
t CPhysicsObject::IsCollisionEnabled() const
t CPhysicsObject::IsControlledByGame() const
t CPhysicsObject::LocalToWorldVector(Vector*, Vector const&) const
t CPhysicsObject::WorldToLocalVector(Vector*, Vector const&) const
t CPhysicsObject::CalculateLinearDrag(Vector const&) const
t CPhysicsObject::GetImplicitVelocity(Vector*, Vector*) const
t CPhysicsObject::GetShadowController() const
t CPhysicsObject::CalculateAngularDrag(Vector const&) const
t CPhysicsObject::CalculateForceOffset(Vector const&, Vector const&, Vector*, Vector*) const
t CPhysicsObject::GetPredictedInterface() const
t CPhysicsObject::IsMassCenterAtDefault() const
t CPhysicsObject::GetVPhysicsEnvironment() const
t CPhysicsObject::IsAttachedToConstraint(bool) const
t CPhysicsObject::CalculateVelocityOffset(Vector const&, Vector const&, Vector*, Vector*) const
t CPhysicsObject::GetMassCenterLocalSpace() const
t CPhysicsObject::GetAngularDragInDirection(IVP_U_Float_Point const&) const
t CPhysicsObject::GetMass() const
t CPhysicsObject::GetName() const
t CPhysicsObject::IsFluid() const
t CPhysicsObject::IsAsleep() const
t CPhysicsObject::IsHinged() const
t CPhysicsObject::IsStatic() const
t CPhysicsObject::GetEnergy() const
t CPhysicsObject::GetVolume() const
t CPhysicsObject::IsTrigger() const
t IVP_point_hash::element_at(int) const
t IVP_point_hash::len() const
t IVP_point_hash::print() const
t IVP_point_hash::compare(void*, void*) const
t IVP_U_Min_Hash::is_elem(void*) const
t IVP_U_Straight::get_quad_dist_to_point(IVP_U_Point*) const
t IVP_U_Straight::calc_orthogonal_vec_from_point(IVP_U_Point const*, IVP_U_Point*) const
t CUtlBinaryBlock::Get(void*, int) const
t CUtlBinaryBlock::operator==(CUtlBinaryBlock const&) const
t CUtlSymbolTable::FindPoolWithSpace(int) const
t CUtlSymbolTable::Find(char const*) const
t CUtlSymbolTable::CLess::operator()(CUtlSymbolTable::CStringPoolIndex const&, CUtlSymbolTable::CStringPoolIndex const&) const
t CUtlSymbolTable::String(CUtlSymbol) const
t IVP_Environment::get_time_manager() const
t IVP_Environment::get_debug_manager() const
t IVP_Environment::get_range_manager() const
t IVP_Environment::get_static_object() const
t IVP_Environment::get_anomaly_limits() const
t IVP_Environment::get_gravity_length() const
t IVP_Environment::get_memory_manager() const
t IVP_Environment::get_anomaly_manager() const
t IVP_Environment::get_cluster_manager() const
t IVP_Environment::get_mindist_manager() const
t IVP_Environment::get_ov_tree_manager() const
t IVP_Environment::get_collision_filter() const
t IVP_Environment::get_material_manager() const
t IVP_Environment::get_universe_manager() const
t IVP_Environment::get_sim_units_manager() const
t IVP_Environment::get_controller_manager() const
t IVP_Environment::get_active_value_manager() const
t IVP_Environment::get_cache_object_manager() const
t IVP_Real_Object::to_nonconst() const
t IVP_Real_Object::calc_at_matrix(IVP_Time, IVP_U_Matrix*) const
t IVP_Real_Object::get_geom_radius() const
t IVP_Real_Object::get_extra_radius() const
t IVP_Real_Object::get_original_core() const
t IVP_Real_Object::calc_at_quaternion(IVP_Time, IVP_U_Quat*, IVP_U_Point*) const
t IVP_Real_Object::get_surface_manager() const
t IVP_Real_Object::get_geom_center_speed() const
t IVP_Real_Object::get_m_world_f_object_AT(IVP_U_Matrix*) const
t IVP_Real_Object::get_geom_center_speed_vec(IVP_U_Point*) const
t IVP_Real_Object::get_quat_world_f_object_AT(IVP_U_Quat*, IVP_U_Point*) const
t IVP_Real_Object::get_geom_center_world_space(IVP_U_Point*) const
t IVP_Real_Object::get_core() const
t IVP_Cache_Object::transform_vector_to_world_coords(IVP_U_Point const*, IVP_U_Point*) const
t IVP_Cache_Object::transform_vector_to_world_coords(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_Cache_Object::transform_vector_to_object_coords(IVP_U_Point const*, IVP_U_Point*) const
t IVP_Cache_Object::transform_vector_to_object_coords(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_Cache_Object::transform_position_to_world_coords(IVP_U_Float_Point const*, IVP_U_Point*) const
t IVP_Cache_Object::transform_position_to_object_coords(IVP_U_Point const*, IVP_U_Float_Point*) const
t IVP_Cache_Object::transform_position_to_object_coords(IVP_U_Point const*, IVP_U_Point*) const
t IVP_Compact_Edge::get_opposite() const
t IVP_Compact_Edge::get_triangle() const
t IVP_Compact_Edge::get_edge_index() const
t IVP_Compact_Edge::get_is_virtual() const
t IVP_Compact_Edge::get_start_point(IVP_Compact_Ledge const*) const
t IVP_Compact_Edge::get_compact_ledge() const
t IVP_Compact_Edge::get_opposite_index() const
t IVP_Compact_Edge::get_start_point_index() const
t IVP_Compact_Edge::get_next() const
t IVP_Compact_Edge::get_prev() const
t IVP_Mindist_Base::get_length() const
t IVP_Mindist_Base::get_mindist_synapse(int) const
t IVP_ov_tree_hash::compare(void*, void*) const
t IVP_Synapse_Real::check_consistency_of_ledge(IVP_Compact_Edge const*) const
t IVP_Synapse_Real::get_core() const
t IVP_Compact_Ledge::is_terminal() const
t IVP_Compact_Ledge::get_n_points() const
t IVP_Compact_Ledge::get_client_data() const
t IVP_Compact_Ledge::get_n_triangles() const
t IVP_Compact_Ledge::get_point_array() const
t IVP_Compact_Ledge::get_cache_handle() const
t IVP_Compact_Ledge::get_first_triangle() const
t IVP_Compact_Ledge::get_ledgetree_node() const
t IVP_Compact_Ledge::get_size() const
t IVP_Contact_Point::is_same_as(IVP_Mindist const*) const
t IVP_I_Point_VHash::element_at(int) const
t IVP_I_Point_VHash::len() const
t IVP_I_Point_VHash::print() const
t IVP_I_Point_VHash::compare(void*, void*) const
t IVP_U_Float_Hesse::proj_on_plane(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_U_Float_Hesse::get_dist(IVP_U_Float_Point const*) const
t IVP_U_Float_Point::dot_product(IVP_U_Float_Point const*) const
t IVP_U_Float_Point::quad_length() const
t IVP_U_Float_Point::real_length() const
t IVP_U_Float_Point::fast_real_length() const
t IVP_U_Float_Point::quad_distance_to(IVP_U_Float_Point3 const*) const
t IVP_U_Float_Point::quad_distance_to(IVP_U_Float_Point const*) const
t IVP_U_Float_Point::print(char const*) const
t IVP_U_String_Hash::find(char const*) const
t CPhysicsConstraint::WriteFixed(constraint_fixedparams_t&) const
t CPhysicsConstraint::WriteHinge(constraint_hingeparams_t&) const
t CPhysicsConstraint::GetGameData() const
t CPhysicsConstraint::WriteLength(constraint_lengthparams_t&) const
t CPhysicsConstraint::WritePulley(constraint_pulleyparams_t&) const
t CPhysicsConstraint::WriteRagdoll(constraint_ragdollparams_t&) const
t CPhysicsConstraint::WriteSliding(constraint_slidingparams_t&) const
t CPhysicsConstraint::WriteBallsocket(constraint_ballsocketparams_t&) const
t CPhysicsConstraint::WriteToTemplate(vphysics_save_cphysicsconstraint_t&, vphysics_save_constraint_t&) const
t CPhysicsConstraint::GetAttachedObject() const
t CPhysicsConstraint::GetConstraintGroup() const
t CPhysicsConstraint::GetReferenceObject() const
t CPhysicsConstraint::GetConstraintParams(constraint_breakableparams_t*) const
t CPhysicsConstraint::GetConstraintTransform(matrix3x4_t*, matrix3x4_t*) const
t CPhysicsConstraint::ReadBreakableConstraint(constraint_breakableparams_t&) const
t CUtlCharConversion::GetDelimiter() const
t CUtlCharConversion::GetEscapeChar() const
t CUtlCharConversion::GetDelimiterLength() const
t CUtlCharConversion::GetConversionLength(char) const
t CUtlCharConversion::GetConversionString(char) const
t CUtlCharConversion::MaxConversionLength() const
t IVP_Anomaly_Limits::get_max_velocity() const
t IVP_Anomaly_Limits::get_max_angular_velocity_per_psi() const
t IVP_I_FPoint_VHash::element_at(int) const
t IVP_I_FPoint_VHash::len() const
t IVP_I_FPoint_VHash::print() const
t IVP_I_FPoint_VHash::compare(void*, void*) const
t CIVPMaterialManager::RemapIVPMaterialIndex(int) const
t CPhysicsEnvironment::GetGravity(Vector*) const
t CPhysicsEnvironment::GetAirDensity() const
t CPhysicsEnvironment::GetObjectList(int*) const
t CPhysicsEnvironment::IsInSimulation() const
t CPhysicsEnvironment::GetActiveObjects(IPhysicsObject**) const
t CPhysicsEnvironment::GetNextFrameTime() const
t CPhysicsEnvironment::GetDeltaFrameTime(int) const
t CPhysicsEnvironment::GetSimulationTime() const
t CPhysicsEnvironment::ShouldQuickDelete() const
t CPhysicsEnvironment::GetAlternateGravity(Vector*) const
t CPhysicsEnvironment::GetActiveObjectCount() const
t CPhysicsEnvironment::IsCollisionModelUsed(CPhysCollide*) const
t CPhysicsEnvironment::GetSimulationTimestep() const
t CPhysicsEnvironment::GetObjectSerializeSize(IPhysicsObject*) const
t CPhysicsEnvironment::GetPerformanceSettings(physics_performanceparams_t*) const
t IVP_OV_Tree_Manager::box_contains_box(IVP_OV_Node_Data const*, IVP_OV_Node const*, int) const
t IVP_OV_Tree_Manager::find_smallest_box(IVP_OV_Node const*, IVP_OV_Node const*) const
t IVP_OV_Tree_Manager::box_overlaps_with_box(IVP_OV_Node const*, IVP_OV_Node const*, int) const
t IVP_OV_Tree_Manager::log_base2(float) const
t IVP_Template_Anchor::get_anchor_position_ws() const
t CPhysicsSurfaceProps::GetPropName(int) const
t CPhysicsSurfaceProps::GetIVPMaterial(int) const
t CPhysicsSurfaceProps::GetSurfaceIndex(char const*) const
t CPhysicsSurfaceProps::SurfacePropCount() const
t CPhysicsSurfaceProps::GetInternalSurface(int) const
t CPhysicsSurfaceProps::GetIVPMaterialIndex(IVP_Material const*) const
t CPhysicsSurfaceProps::GetReservedFallBack(int) const
t CPhysicsSurfaceProps::GetPhysicsParameters(int, surfacephysicsparams_t*) const
t CPhysicsSurfaceProps::GetPhysicsProperties(int, float*, float*, float*, float*) const
t CPhysicsSurfaceProps::RemapIVPMaterialIndex(int) const
t CPhysicsSurfaceProps::GetMaterialIndexDataOps() const
t CPhysicsSurfaceProps::GetReservedMaterialName(int) const
t CPhysicsSurfaceProps::GetReservedSurfaceIndex(char const*) const
t CPhysicsSurfaceProps::IsReservedMaterialIndex(int) const
t CPhysicsSurfaceProps::GetString(unsigned short) const
t IVP_Compact_Triangle::get_next_tri() const
t IVP_Compact_Triangle::get_tri_index() const
t IVP_Compact_Triangle::get_first_edge() const
t IVP_Compact_Triangle::get_is_virtual() const
t IVP_Compact_Triangle::get_pierce_index() const
t IVP_Compact_Triangle::get_compact_ledge() const
t IVP_Compact_Triangle::get_material_index() const
t IVP_Compact_Triangle::get_edge(int) const
t IVP_Controller_VHash::compare(void*, void*) const
t IVP_Core_Fast_Static::get_inv_mass() const
t IVP_Core_Fast_Static::get_rot_inertia() const
t IVP_Core_Fast_Static::get_inv_rot_inertia() const
t IVP_Core_Fast_Static::get_mass() const
t IVP_Synapse_Friction::is_same_as(IVP_Synapse_Real const*) const
t IVP_Synapse_Friction::get_material_index() const
t SplitScreenConVarRef::IsValid() const
t IVP_Active_Value_Hash::compare(void*, void*) const
t IVP_Controller_Motion::get_max_torque() const
t IVP_Controller_Motion::get_damp_factor() const
t IVP_Controller_Motion::get_force_factor() const
t IVP_Controller_Motion::get_torque_factor() const
t IVP_Controller_Motion::get_target_orientation() const
t IVP_Controller_Motion::get_target_position_ws() const
t IVP_Controller_Motion::get_angular_damp_factor() const
t IVP_Controller_Motion::get_max_translation_force() const
t IVP_Compact_Poly_Point::get_client_data() const
t IVP_Controller_Phantom::get_object() const
t IVP_Controller_Phantom::get_intruding_cores() const
t IVP_Controller_Phantom::get_intruding_objects() const
t CPhysCollideVirtualMesh::GetAllLedges(IVP_U_BigVector<IVP_Compact_Ledge>&) const
t CPhysCollideVirtualMesh::GetMassCenter() const
t CPhysCollideVirtualMesh::GetSphereRadius() const
t CPhysCollideVirtualMesh::OutputDebugInfo() const
t CPhysCollideVirtualMesh::GetVCollideIndex() const
t CPhysCollideVirtualMesh::SerializeToBuffer(char*, bool) const
t CPhysCollideVirtualMesh::GetSphereRadiusIVP() const
t CPhysCollideVirtualMesh::CreateSurfaceManager(short&) const
t CPhysCollideVirtualMesh::GetOrthographicAreas() const
t CPhysCollideVirtualMesh::GetSerializationSize() const
t CPhysicsFluidController::GetDensity() const
t CPhysicsFluidController::GetContents() const
t CPhysicsFluidController::GetGameData() const
t CPhysicsFluidController::GetIVPObject() const
t CPhysicsFluidController::GetSurfacePlane(Vector*, float*) const
t CPredictedPhysicsObject::GetPosition(Vector*, QAngle*) const
t CPredictedPhysicsObject::GetVelocity(Vector*, Vector*) const
t CPredictedPhysicsObject::IsPredicted() const
t CPredictedPhysicsObject::GetPositionMatrix(matrix3x4_t*) const
t CPredictedPhysicsObject::GetVelocityAtPoint(Vector const&, Vector*) const
t CPredictedPhysicsObject::GetImplicitVelocity(Vector*, Vector*) const
t CPredictedPhysicsObject::GetPredictedInterface() const
t CPredictedPhysicsObject::IsAsleep() const
t CSplitScreenAddedConVar::GetBaseName() const
t CSplitScreenAddedConVar::GetSplitScreenPlayerSlot() const
t IVP_SurfaceManager_Ball::get_mass_center(IVP_U_Float_Point*) const
t IVP_SurfaceManager_Ball::get_single_convex() const
t IVP_SurfaceManager_Ball::get_rotation_inertia(IVP_U_Float_Point*) const
t IVP_SurfaceManager_Ball::get_radius_and_radius_dev_to_given_center(IVP_U_Float_Point const*, float*, float*) const
t CPhysCollideCompactSurface::GetAABBTree() const
t CPhysCollideCompactSurface::GetAllLedges(IVP_U_BigVector<IVP_Compact_Ledge>&) const
t CPhysCollideCompactSurface::GetCollideMap() const
t CPhysCollideCompactSurface::GetMassCenter() const
t CPhysCollideCompactSurface::GetSphereRadius() const
t CPhysCollideCompactSurface::OutputDebugInfo() const
t CPhysCollideCompactSurface::GetVCollideIndex() const
t CPhysCollideCompactSurface::ComputeHullInfo_r(CPhysCollideCompactSurface::hullinfo_t*, IVP_Compact_Ledgetree_Node const*) const
t CPhysCollideCompactSurface::GetCompactSurface() const
t CPhysCollideCompactSurface::SerializeToBuffer(char*, bool) const
t CPhysCollideCompactSurface::CreateSurfaceManager(short&) const
t CPhysCollideCompactSurface::GetOrthographicAreas() const
t CPhysCollideCompactSurface::GetSerializationSize() const
t IVP_Compact_Ledgetree_Node::is_terminal() const
t IVP_Compact_Ledgetree_Node::get_compact_hull() const
t IVP_Compact_Ledgetree_Node::get_compact_ledge() const
t IVP_Compact_Ledgetree_Node::left_son() const
t IVP_Compact_Ledgetree_Node::right_son() const
t IVP_Great_Matrix_Many_Zero::print_great_matrix(char const*) const
t IVP_Great_Matrix_Many_Zero::get_value(int, int) const
t IVP_SurfaceManager_Polygon::get_mass_center(IVP_U_Float_Point*) const
t IVP_SurfaceManager_Polygon::get_single_convex() const
t IVP_SurfaceManager_Polygon::get_compact_surface() const
t IVP_SurfaceManager_Polygon::get_rotation_inertia(IVP_U_Float_Point*) const
t IVP_SurfaceManager_Polygon::get_radius_and_radius_dev_to_given_center(IVP_U_Float_Point const*, float*, float*) const
t IVP_Real_Object_Fast_Static::get_shift_core_f_object() const
t IVP_Real_Object_Fast_Static::get_shift_core_f_object_sse() const
t IVP_SurfaceBuilder_Ledge_Soup::ledgetree_debug_output(IVP_Compact_Ledgetree_Node const*) const
t IVP_Object_Callback_Table_Hash::compare(void*, void*) const
t IVP_SurfaceManager_VirtualMesh::get_mass_center(IVP_U_Float_Point*) const
t IVP_SurfaceManager_VirtualMesh::get_single_convex() const
t IVP_SurfaceManager_VirtualMesh::get_rotation_inertia(IVP_U_Float_Point*) const
t IVP_SurfaceManager_VirtualMesh::get_radius_and_radius_dev_to_given_center(IVP_U_Float_Point const*, float*, float*) const
t IVP_Collision_Callback_Table_Hash::compare(void*, void*) const
t ConVar::GetDefault() const
t ConVar::GetBaseName() const
t ConVar::GetHelpText() const
t ConVar::GetMaxValue() const
t ConVar::GetMinValue() const
t ConVar::IsRegistered() const
t ConVar::GetSplitScreenPlayerSlot() const
t ConVar::GetInt() const
t ConVar::GetMax(float&) const
t ConVar::GetMin(float&) const
t ConVar::HasMax() const
t ConVar::HasMin() const
t ConVar::GetName() const
t ConVar::GetFlags() const
t ConVar::GetFloat() const
t ConVar::IsCommand() const
t ConVar::IsFlagSet(int) const
t VMatrix::Transpose3x3() const
t VMatrix::InverseGeneral(VMatrix&) const
t VMatrix::IsRotationMatrix() const
t VMatrix::NormalizeBasisVectors() const
t VMatrix::GetScale() const
t VMatrix::InverseTR(VMatrix&) const
t VMatrix::InverseTR() const
t VMatrix::MatrixMul(VMatrix const&, VMatrix&) const
t VMatrix::Transpose() const
t VMatrix::operator==(VMatrix const&) const
t VMatrix::operator*(VPlane const&) const
t VMatrix::operator*(VMatrix const&) const
t CCommand::FindArgInt(char const*, int) const
t CCommand::FindArg(char const*) const
t IVP_Ball::get_radius() const
t IVP_Core::calc_at_matrix(IVP_Time, IVP_U_Matrix*) const
t IVP_Core::calc_virt_mass(IVP_U_Float_Point const*, IVP_U_Float_Point const*) const
t IVP_Core::test_push_core(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*, IVP_U_Float_Point*) const
t IVP_Core::get_surface_speed(IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_Core::calc_correct_virt_mass(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*) const
t IVP_Core::inline_calc_at_position(IVP_Time, IVP_U_Point*) const
t IVP_Core::calc_virt_mass_worst_case(IVP_U_Float_Point const*) const
t IVP_Core::get_surface_speed_on_test(IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point const*, IVP_U_Float_Point*) const
t IVP_Core::inline_calc_at_quaternion(IVP_Time, IVP_U_Quat*) const
t IVP_Hash::find(char const*) const
t ConVarRef::IsValid() const
t CTraceIVP::SupportMap(Vector const&, Vector*) const
t CTraceIVP::GetVertByIndex(int) const
t CTraceIVP::Radius() const
t CTraceRay::SupportMap(Vector const&, Vector*) const
t Frustum_t::GetCorners(Vector*) const
t Frustum_t::Intersects(Vector const&, Vector const&) const
t Frustum_t::Intersects(float __vector(4) const&, float __vector(4) const&) const
t Frustum_t::Intersects(float __vector const&, float __vector const&) const
t Frustum_t::Intersects(Frustum_t&) const
t Frustum_t::CullBoxCenterExtents(Vector const&, Vector const&) const
t Frustum_t::CullBoxCenterExtents(float __vector(4) const&, float __vector(4) const&) const
t Frustum_t::CullBoxCenterExtents(float __vector const&, float __vector const&) const
t Frustum_t::IntersectsCenterExtents(Vector const&, Vector const&) const
t Frustum_t::IntersectsCenterExtents(float __vector(4) const&, float __vector(4) const&) const
t Frustum_t::IntersectsCenterExtents(float __vector const&, float __vector const&) const
t Frustum_t::CullBox(Vector const&, Vector const&) const
t Frustum_t::CullBox(float __vector(4) const&, float __vector(4) const&) const
t Frustum_t::CullBox(float __vector const&, float __vector const&) const
t Frustum_t::Contains(Vector const&, Vector const&) const
t Frustum_t::GetPlane(int, Vector*, float*) const
t Frustum_t::GetPlanes(VPlane*) const
t __gnu_cxx::__concurrence_lock_error::what() const
t __gnu_cxx::__concurrence_unlock_error::what() const
t IVP_U_Set<IVP_Real_Object>::compare(void*, void*) const
t IVP_U_Set<IVP_Mindist_Base>::compare(void*, void*) const
t IVP_U_Set<IVP_Core>::compare(void*, void*) const
t IVP_VHash::print() const
t IVP_VHash::find_elem(void const*, unsigned int) const
t std::bad_exception::what() const
t std::exception::what() const
t std::bad_exception::~bad_exception()
t std::bad_exception::~bad_exception()
t std::bad_exception::~bad_exception()
t std::exception::~exception()
t std::exception::~exception()
t std::exception::~exception()
U CThreadFastMutex::Lock(unsigned int, unsigned int) volatile
t operator new(unsigned int)
t operator new(unsigned int, int, char const*, int)
t operator|=(PolyhedronLinePlanarity&, PolyhedronLinePlanarity const&)
t std::unexpected()
t std::set_terminate(void (*)())
t std::set_unexpected(void (*)())
t std::uncaught_exception()
t std::terminate()
t non-virtual thunk to IVP_Mindist_Recursive::get_spawned_mindist_count()
t non-virtual thunk to IVP_Mindist_Recursive::change_spawned_mindist_count(int)
t non-virtual thunk to IVP_Mindist_Recursive::collision_is_going_to_be_deleted_event(IVP_Collision*)
t non-virtual thunk to IVP_Mindist_Recursive::~IVP_Mindist_Recursive()
t non-virtual thunk to IVP_Mindist_Recursive::~IVP_Mindist_Recursive()
t non-virtual thunk to IVP_Actuator_Extra::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_Actuator_Extra::~IVP_Actuator_Extra()
t non-virtual thunk to IVP_Actuator_Extra::~IVP_Actuator_Extra()
t non-virtual thunk to IVP_Actuator_Force_Active::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_Actuator_Force_Active::~IVP_Actuator_Force_Active()
t non-virtual thunk to IVP_Actuator_Force_Active::~IVP_Actuator_Force_Active()
t non-virtual thunk to IVP_Actuator_Torque_Active::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_Actuator_Torque_Active::~IVP_Actuator_Torque_Active()
t non-virtual thunk to IVP_Actuator_Torque_Active::~IVP_Actuator_Torque_Active()
t non-virtual thunk to IVP_Actuator_Rot_Mot_Active::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_Actuator_Rot_Mot_Active::~IVP_Actuator_Rot_Mot_Active()
t non-virtual thunk to IVP_Actuator_Rot_Mot_Active::~IVP_Actuator_Rot_Mot_Active()
t non-virtual thunk to IVP_Actuator_Spring_Active::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_Actuator_Spring_Active::~IVP_Actuator_Spring_Active()
t non-virtual thunk to IVP_Actuator_Spring_Active::~IVP_Actuator_Spring_Active()
t non-virtual thunk to IVP_OO_Watcher::collision_is_going_to_be_deleted_event(IVP_Collision*)
t non-virtual thunk to IVP_OO_Watcher::~IVP_OO_Watcher()
t non-virtual thunk to IVP_OO_Watcher::~IVP_OO_Watcher()
t non-virtual thunk to CEmptyConVar::SetValue(float)
t non-virtual thunk to CEmptyConVar::SetValue(int)
t non-virtual thunk to CEmptyConVar::SetValue(char const*)
t non-virtual thunk to ConVar::SetValue(Color)
t non-virtual thunk to ConVar::SetValue(float)
t non-virtual thunk to ConVar::SetValue(int)
t non-virtual thunk to ConVar::SetValue(char const*)
t non-virtual thunk to CEmptyConVar::GetName() const
t non-virtual thunk to CEmptyConVar::IsFlagSet(int) const
t non-virtual thunk to CSplitScreenAddedConVar::GetBaseName() const
t non-virtual thunk to CSplitScreenAddedConVar::GetSplitScreenPlayerSlot() const
t non-virtual thunk to ConVar::GetBaseName() const
t non-virtual thunk to ConVar::GetSplitScreenPlayerSlot() const
t non-virtual thunk to ConVar::GetName() const
t non-virtual thunk to ConVar::IsFlagSet(int) const
t non-virtual thunk to IVP_U_Active_Add::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_U_Active_Add::~IVP_U_Active_Add()
t non-virtual thunk to IVP_U_Active_Add::~IVP_U_Active_Add()
t non-virtual thunk to IVP_U_Active_Sub::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_U_Active_Sub::~IVP_U_Active_Sub()
t non-virtual thunk to IVP_U_Active_Sub::~IVP_U_Active_Sub()
t non-virtual thunk to IVP_U_Active_Mult::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_U_Active_Mult::~IVP_U_Active_Mult()
t non-virtual thunk to IVP_U_Active_Mult::~IVP_U_Active_Mult()
t non-virtual thunk to IVP_U_Active_Sine::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_U_Active_Sine::~IVP_U_Active_Sine()
t non-virtual thunk to IVP_U_Active_Sine::~IVP_U_Active_Sine()
t non-virtual thunk to IVP_U_Active_Limit::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_U_Active_Limit::~IVP_U_Active_Limit()
t non-virtual thunk to IVP_U_Active_Limit::~IVP_U_Active_Limit()
t non-virtual thunk to IVP_U_Active_Pulse::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_U_Active_Pulse::~IVP_U_Active_Pulse()
t non-virtual thunk to IVP_U_Active_Pulse::~IVP_U_Active_Pulse()
t non-virtual thunk to IVP_U_Active_Square::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_U_Active_Square::~IVP_U_Active_Square()
t non-virtual thunk to IVP_U_Active_Square::~IVP_U_Active_Square()
t non-virtual thunk to IVP_U_Active_Switch::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_U_Active_Switch::~IVP_U_Active_Switch()
t non-virtual thunk to IVP_U_Active_Switch::~IVP_U_Active_Switch()
t non-virtual thunk to IVP_U_Active_Test_Range::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_U_Active_Test_Range::~IVP_U_Active_Test_Range()
t non-virtual thunk to IVP_U_Active_Test_Range::~IVP_U_Active_Test_Range()
t non-virtual thunk to IVP_U_Active_Add_Multiple::active_float_changed(IVP_U_Active_Float*)
t non-virtual thunk to IVP_U_Active_Add_Multiple::~IVP_U_Active_Add_Multiple()
t non-virtual thunk to IVP_U_Active_Add_Multiple::~IVP_U_Active_Add_Multiple()
t non-virtual thunk to IVP_U_Active_Terminal_Int::update_int()
t non-virtual thunk to IVP_U_Active_Terminal_Int::~IVP_U_Active_Terminal_Int()
t non-virtual thunk to IVP_U_Active_Terminal_Int::~IVP_U_Active_Terminal_Int()
t non-virtual thunk to IVP_U_Active_Terminal_Double::update_float()
t non-virtual thunk to IVP_U_Active_Terminal_Double::~IVP_U_Active_Terminal_Double()
t non-virtual thunk to IVP_U_Active_Terminal_Double::~IVP_U_Active_Terminal_Double()
t non-virtual thunk to IVP_U_Active_Switch::active_int_changed(IVP_U_Active_Int*)
t non-virtual thunk to IVP_U_Active_Switch::~IVP_U_Active_Switch()
t non-virtual thunk to IVP_U_Active_Switch::~IVP_U_Active_Switch()
t non-virtual thunk to CPhysicsSpring::event_object_frozen(IVP_Event_Object*)
t non-virtual thunk to CPhysicsSpring::event_object_created(IVP_Event_Object*)
t non-virtual thunk to CPhysicsSpring::event_object_deleted(IVP_Event_Object*)
t non-virtual thunk to CPhysicsSpring::event_object_revived(IVP_Event_Object*)
t non-virtual thunk to CPhysicsSpring::~CPhysicsSpring()
t non-virtual thunk to CPhysicsSpring::~CPhysicsSpring()
t non-virtual thunk to CCollisionSolver::inter_penetration(IVP_Mindist*, IVP_Real_Object*, IVP_Real_Object*, float)
t non-virtual thunk to CCollisionSolver::max_velocity_exceeded(IVP_Anomaly_Limits*, IVP_Core*, IVP_U_Float_Point*)
t non-virtual thunk to CCollisionSolver::environment_will_be_deleted(IVP_Environment*)
t non-virtual thunk to CCollisionSolver::max_collision_checks_exceeded(int)
t non-virtual thunk to CCollisionSolver::max_contacts_exceeded_check_freezing(IVP_Core**, int)
t non-virtual thunk to CCollisionSolver::max_collisions_exceeded_check_freezing(IVP_Anomaly_Limits*, IVP_Core*)
t non-virtual thunk to CCollisionSolver::~CCollisionSolver()
t non-virtual thunk to CCollisionSolver::~CCollisionSolver()
t non-virtual thunk to CPhysics_Airboat::get_controller_name()
t non-virtual thunk to CPhysics_Airboat::get_controller_priority()
t non-virtual thunk to CPhysics_Airboat::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t non-virtual thunk to CPhysics_Airboat::get_associated_controlled_cores()
t non-virtual thunk to CPhysics_Airboat::core_is_going_to_be_deleted_event(IVP_Core*)
t non-virtual thunk to CPhysics_Airboat::~CPhysics_Airboat()
t non-virtual thunk to CPhysics_Airboat::~CPhysics_Airboat()
t non-virtual thunk to CPlayerController::IsInContact()
t non-virtual thunk to CPlayerController::GetLastImpulse(Vector*)
t non-virtual thunk to CPlayerController::GetContactState(unsigned short)
t non-virtual thunk to CPlayerController::SetEventHandler(IPhysicsPlayerControllerEvent*)
t non-virtual thunk to CPlayerController::GetPushMassLimit()
t non-virtual thunk to CPlayerController::SetPushMassLimit(float)
t non-virtual thunk to CPlayerController::GetPushSpeedLimit()
t non-virtual thunk to CPlayerController::GetShadowPosition(Vector*, QAngle*)
t non-virtual thunk to CPlayerController::GetShadowVelocity(Vector*)
t non-virtual thunk to CPlayerController::SetPushSpeedLimit(float)
t non-virtual thunk to CPlayerController::Jump()
t non-virtual thunk to CPlayerController::StepUp(float)
t non-virtual thunk to CPlayerController::Update(Vector const&, Vector const&, float, bool, IPhysicsObject*)
t non-virtual thunk to CPlayerController::MaxSpeed(Vector const&)
t non-virtual thunk to CPlayerController::GetObject()
t non-virtual thunk to CPlayerController::SetObject(IPhysicsObject*)
t non-virtual thunk to CPlayerController::WasFrozen()
t non-virtual thunk to CPlayerController::~CPlayerController()
t non-virtual thunk to CPlayerController::~CPlayerController()
t non-virtual thunk to CShadowController::GetMaxSpeed(float*, float*)
t non-virtual thunk to CShadowController::AllowsRotation()
t non-virtual thunk to CShadowController::GetLastImpulse(Vector*)
t non-virtual thunk to CShadowController::AllowsTranslation()
t non-virtual thunk to CShadowController::GetTargetPosition(Vector*, QAngle*)
t non-virtual thunk to CShadowController::UseShadowMaterial(bool)
t non-virtual thunk to CShadowController::GetTeleportDistance()
t non-virtual thunk to CShadowController::SetTeleportDistance(float)
t non-virtual thunk to CShadowController::ObjectMaterialChanged(int)
t non-virtual thunk to CShadowController::IsPhysicallyControlled()
t non-virtual thunk to CShadowController::SetPhysicallyControlled(bool)
t non-virtual thunk to CShadowController::StepUp(float)
t non-virtual thunk to CShadowController::Update(Vector const&, QAngle const&, float)
t non-virtual thunk to CShadowController::MaxSpeed(float, float)
t non-virtual thunk to CShadowController::~CShadowController()
t non-virtual thunk to CShadowController::~CShadowController()
t non-virtual thunk to CPhysicsConstraint::event_object_frozen(IVP_Event_Object*)
t non-virtual thunk to CPhysicsConstraint::event_object_created(IVP_Event_Object*)
t non-virtual thunk to CPhysicsConstraint::event_object_deleted(IVP_Event_Object*)
t non-virtual thunk to CPhysicsConstraint::event_object_revived(IVP_Event_Object*)
t non-virtual thunk to CPhysicsConstraint::~CPhysicsConstraint()
t non-virtual thunk to CPhysicsConstraint::~CPhysicsConstraint()
t non-virtual thunk to CVehicleController::event_object_frozen(IVP_Event_Object*)
t non-virtual thunk to CVehicleController::event_object_created(IVP_Event_Object*)
t non-virtual thunk to CVehicleController::event_object_deleted(IVP_Event_Object*)
t non-virtual thunk to CVehicleController::event_object_revived(IVP_Event_Object*)
t non-virtual thunk to CVehicleController::~CVehicleController()
t non-virtual thunk to CVehicleController::~CVehicleController()
t non-virtual thunk to CPhysicsMotionController::GetObjects(IPhysicsObject**)
t non-virtual thunk to CPhysicsMotionController::SetPriority(IPhysicsMotionController::priority_t)
t non-virtual thunk to CPhysicsMotionController::WakeObjects()
t non-virtual thunk to CPhysicsMotionController::AttachObject(IPhysicsObject*, bool)
t non-virtual thunk to CPhysicsMotionController::ClearObjects()
t non-virtual thunk to CPhysicsMotionController::CountObjects()
t non-virtual thunk to CPhysicsMotionController::DetachObject(IPhysicsObject*)
t non-virtual thunk to CPhysicsMotionController::SetEventHandler(IMotionEvent*)
t non-virtual thunk to CPhysicsMotionController::~CPhysicsMotionController()
t non-virtual thunk to CPhysicsMotionController::~CPhysicsMotionController()
t non-virtual thunk to CPredictedPlayerController::GetLastImpulse(Vector*)
t non-virtual thunk to CPredictedPlayerController::GetShadowPosition(Vector*, QAngle*)
t non-virtual thunk to CPredictedPlayerController::GetShadowVelocity(Vector*)
t non-virtual thunk to CPredictedPlayerController::Jump()
t non-virtual thunk to CPredictedPlayerController::StepUp(float)
t non-virtual thunk to CPredictedPlayerController::Update(Vector const&, Vector const&, float, bool, IPhysicsObject*)
t non-virtual thunk to CPredictedPlayerController::MaxSpeed(Vector const&)
t non-virtual thunk to CPredictedPlayerController::SetObject(IPhysicsObject*)
t non-virtual thunk to CPredictedPlayerController::~CPredictedPlayerController()
t non-virtual thunk to CPredictedPlayerController::~CPredictedPlayerController()
t non-virtual thunk to IVP_Controller_Raycast_Car::get_controller_priority()
t non-virtual thunk to IVP_Controller_Raycast_Car::do_simulation_controller(IVP_Event_Sim*, IVP_U_Vector<IVP_Core>*)
t non-virtual thunk to IVP_Controller_Raycast_Car::get_associated_controlled_cores()
t non-virtual thunk to IVP_Controller_Raycast_Car::core_is_going_to_be_deleted_event(IVP_Core*)
t non-virtual thunk to IVP_Controller_Raycast_Car::~IVP_Controller_Raycast_Car()
t non-virtual thunk to IVP_Controller_Raycast_Car::~IVP_Controller_Raycast_Car()
t non-virtual thunk to CPredictedPhysicsMotionController::~CPredictedPhysicsMotionController()
t non-virtual thunk to CPredictedPhysicsMotionController::~CPredictedPhysicsMotionController()
t non-virtual thunk to CPhysics_Car_System_Raycast_Wheels::get_controller_name()
t non-virtual thunk to CPhysics_Car_System_Raycast_Wheels::~CPhysics_Car_System_Raycast_Wheels()
t non-virtual thunk to CPhysics_Car_System_Raycast_Wheels::~CPhysics_Car_System_Raycast_Wheels()
t non-virtual thunk to CPlayerController::event_object_frozen(IVP_Event_Object*)
t non-virtual thunk to CPlayerController::event_object_created(IVP_Event_Object*)
t non-virtual thunk to CPlayerController::event_object_deleted(IVP_Event_Object*)
t non-virtual thunk to CPlayerController::event_object_revived(IVP_Event_Object*)
t non-virtual thunk to CPlayerController::~CPlayerController()
t non-virtual thunk to CPlayerController::~CPlayerController()
t non-virtual thunk to CPhysicsListenerCollision::core_left_volume(IVP_Controller_Phantom*, IVP_Core*)
t non-virtual thunk to CPhysicsListenerCollision::core_entered_volume(IVP_Controller_Phantom*, IVP_Core*)
t non-virtual thunk to CPhysicsListenerCollision::mindist_left_volume(IVP_Controller_Phantom*, IVP_Mindist_Base*)
t non-virtual thunk to CPhysicsListenerCollision::mindist_entered_volume(IVP_Controller_Phantom*, IVP_Mindist_Base*)
t non-virtual thunk to CPhysicsListenerCollision::phantom_is_going_to_be_deleted_event(IVP_Controller_Phantom*)
t non-virtual thunk to CPredictedPlayerController::~CPredictedPlayerController()
t non-virtual thunk to CPredictedPlayerController::~CPredictedPlayerController()
r typeinfo for ConCommand
r typeinfo for CTraceAABB
r typeinfo for CTraceCone
r typeinfo for hk_Console
r typeinfo for hk_Link_EF
r typeinfo for IAppSystem
d typeinfo for IVP_Object
r typeinfo for CPolyhedron
r typeinfo for IConvexInfo
d typeinfo for IVP_Cluster
r typeinfo for IVP_Mindist
d typeinfo for IVP_Polygon
r typeinfo for IVP_Synapse
r typeinfo for CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>
r typeinfo for CDeleteProxy<IPhysicsConstraint>
r typeinfo for CEmptyConVar
r typeinfo for CPhysCollide
r typeinfo for CTraceSolver
r typeinfo for IPhysCollide
r typeinfo for ITraceObject
d typeinfo for IVP_Actuator
d typeinfo for IVP_Material
r typeinfo for IVP_Triangle
r typeinfo for aligned_tmp_t
r typeinfo for CSleepObjects
r typeinfo for CVoidPairHash
r typeinfo for hk_Constraint
d typeinfo for IVP_3D_Solver
d typeinfo for IVP_CFEP_Hash
r typeinfo for IVP_Collision
r typeinfo for CBaseAppSystem<IPhysics>
r typeinfo for CDefConvexInfo
r typeinfo for ConCommandBase
r typeinfo for CPhysicsObject
r typeinfo for CPhysicsSpring
r typeinfo for CVPhysicsParse
r typeinfo for IPhysicsObject
r typeinfo for IPhysicsSpring
d typeinfo for IVP_Car_System
d typeinfo for IVP_Constraint
r typeinfo for IVP_Controller
r typeinfo for IVP_OO_Watcher
r typeinfo for IVP_OV_Element
r typeinfo for IVP_point_hash
d typeinfo for IVP_Ray_Solver
r typeinfo for IVP_Synapse_OO
d typeinfo for IVP_Time_Event
r typeinfo for CCollisionQuery
r typeinfo for CDragController
r typeinfo for CObjectPairHash
r typeinfo for CTier0AppSystem<IPhysics>
r typeinfo for CTier1AppSystem<IPhysics, 0>
r typeinfo for ICollisionQuery
r typeinfo for ISaveRestoreOps
d typeinfo for IVP_Real_Object
r typeinfo for CCollisionSolver
r typeinfo for CDataManagerBase
r typeinfo for CDefaultAccessor
r typeinfo for CDllDemandLoader
r typeinfo for CPhysics_Airboat
r typeinfo for IDeleteQueueItem
r typeinfo for IVP_Mindist_Base
r typeinfo for IVP_ov_tree_hash
r typeinfo for IVP_Synapse_Real
d typeinfo for IVP_Time_Event_D
d typeinfo for IVP_Time_Event_N
d typeinfo for IVP_U_Active_Add
d typeinfo for IVP_U_Active_Int
d typeinfo for IVP_U_Active_Sub
d typeinfo for IVP_U_Set_Active<IVP_Real_Object>
d typeinfo for IVP_U_Set_Active<IVP_Mindist_Base>
d typeinfo for IVP_U_Set_Active<IVP_Core>
r typeinfo for CAlignedNewDelete<16, aligned_tmp_t>
r typeinfo for CBuoyancyAttacher
r typeinfo for CFrictionSnapshot
r typeinfo for CMaterialIndexOps
r typeinfo for collision_rules_t
r typeinfo for CPhysicsCollision
r typeinfo for CPhysicsInterface
r typeinfo for CPlayerController
r typeinfo for CShadowController
r typeinfo for IPhysicsCollision
d typeinfo for IVP_Event_Manager
r typeinfo for IVP_I_Point_VHash
d typeinfo for IVP_Listener_Hull
r typeinfo for IVP_Range_Manager
d typeinfo for IVP_U_Active_Mult
d typeinfo for IVP_U_Active_Sine
r typeinfo for CDefSaveRestoreOps
r typeinfo for CPhysicsConstraint
r typeinfo for CUtlCharConversion
r typeinfo for CVehicleController
r typeinfo for IPhysicsConstraint
d typeinfo for IVP_Actuator_Extra
d typeinfo for IVP_Actuator_Force
d typeinfo for IVP_Anomaly_Limits
r typeinfo for IVPhysicsKeyParser
r typeinfo for IVP_I_FPoint_VHash
d typeinfo for IVP_Ray_Solver_Min
d typeinfo for IVP_SurfaceManager
d typeinfo for IVP_Time_Event_PSI
d typeinfo for IVP_U_Active_Float
d typeinfo for IVP_U_Active_Limit
d typeinfo for IVP_U_Active_Pulse
d typeinfo for IVP_U_Active_Value
r typeinfo for CIVPMaterialManager
r typeinfo for CPhysicsEnvironment
r typeinfo for CUtlNoEscConversion
r typeinfo for hk_Fixed_Constraint
r typeinfo for hk_Hinge_Constraint
r typeinfo for IPhysicsEnvironment
r typeinfo for IVP_3D_Solver_PK_KK
d typeinfo for IVP_Actuator_Spring
d typeinfo for IVP_Actuator_Torque
d typeinfo for IVP_Anomaly_Manager
d typeinfo for IVP_Event_Manager_D
d typeinfo for IVP_Friction_System
r typeinfo for IVPhysicsKeyHandler
d typeinfo for IVP_Listener_Object
d typeinfo for IVP_Listener_Spring
d typeinfo for IVP_Material_Simple
d typeinfo for IVP_U_Active_Square
d typeinfo for IVP_U_Active_Switch
r typeinfo for CAirboatFrictionData
r typeinfo for ConVar_ServerBounded
r typeinfo for CPhysicsCollisionSet
r typeinfo for CPhysicsFrictionData
r typeinfo for CPhysicsSurfaceProps
r typeinfo for CTraceSolverAABBTree
r typeinfo for hk_Pulley_Constraint
r typeinfo for IPhysicsCollisionSet
r typeinfo for IPhysicsSurfaceProps
r typeinfo for IVP_3D_Solver_PF_NPF
r typeinfo for IVP_3D_Solver_S_VALS
d typeinfo for IVP_Actuator_Rot_Mot
d typeinfo for IVP_Collision_Filter
r typeinfo for IVP_Constraint_Local
r typeinfo for IVP_Controller_Golem
d typeinfo for IVP_Controller_VHash
d typeinfo for IVP_Listener_Phantom
d typeinfo for IVP_Material_Manager
d typeinfo for IVP_Ray_Hit_Listener
d typeinfo for IVP_Real_Object_Fast
d typeinfo for IVP_Universe_Manager
r typeinfo for CPhysicsCollisionData
r typeinfo for CUtlCStringConversion
r typeinfo for CVPhysicsDebugOverlay
r typeinfo for CVPhysicsPackedParser
r typeinfo for hk_Ragdoll_Constraint
r typeinfo for IPhysicsCollisionData
r typeinfo for IVP_3D_Solver_KK_COLL
r typeinfo for IVP_3D_Solver_PF_COLL
r typeinfo for IVP_3D_Solver_PK_COLL
d typeinfo for IVP_Active_Value_Hash
d typeinfo for IVP_Anchor_Check_Dist
r typeinfo for IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>
r typeinfo for IVP_Controller_Motion
r typeinfo for IVPhysicsDebugOverlay
r typeinfo for IVP_Mindist_Recursive
r typeinfo for CPolyhedron_AllocByNew
r typeinfo for CPolyhedron_TempMemory
r typeinfo for IPhysicsCollisionEvent
r typeinfo for IPhysicsObjectPairHash
d typeinfo for IVP_Actuator_Two_Point
d typeinfo for IVP_BetterDebugmanager
d typeinfo for IVP_Controller_Phantom
d typeinfo for IVP_Listener_Collision
d typeinfo for IVP_PerformanceCounter
r typeinfo for CEmptyCollisionListener
r typeinfo for CPhysCollideVirtualMesh
r typeinfo for CPhysicsConstraintGroup
r typeinfo for CPhysicsFluidController
r typeinfo for CPredictedPhysicsObject
r typeinfo for CSplitScreenAddedConVar
r typeinfo for CTraceSolverSweptObject
r typeinfo for CVPhysPtrSaveRestoreOps
r typeinfo for hk_Breakable_Constraint
r typeinfo for hk_Prismatic_Constraint
r typeinfo for hk_Rigid_Body_Binary_EF
r typeinfo for IConCommandBaseAccessor
r typeinfo for IPhysicsConstraintGroup
r typeinfo for IPhysicsFluidController
r typeinfo for IPredictedPhysicsObject
d typeinfo for IVP_Actuator_Four_Point
d typeinfo for IVP_Actuator_Stabilizer
d typeinfo for IVP_Actuator_Suspension
r typeinfo for IVP_Collision_Delegator
d typeinfo for IVP_Controller_Buoyancy
d typeinfo for IVP_Friction_Sys_Energy
d typeinfo for IVP_Friction_Sys_Static
d typeinfo for IVP_Listener_Constraint
r typeinfo for IVP_Listener_Set_Active<IVP_Core>
d typeinfo for IVP_Ray_Solver_Min_Hash
r typeinfo for IVP_SurfaceManager_Ball
d typeinfo for IVP_U_Active_Test_Range
r typeinfo for CLiquidSurfaceDescriptor
r typeinfo for CPhysicsMotionController
r typeinfo for IPhysicsFrictionSnapshot
r typeinfo for IPhysicsMotionController
r typeinfo for IPhysicsPlayerController
r typeinfo for IPhysicsShadowController
r typeinfo for IVP_Controller_Dependent
d typeinfo for IVP_U_Active_Int_Delayed
r typeinfo for CPhysicsListenerCollision
r typeinfo for hk_Ball_Socket_Constraint
r typeinfo for IPhysicsVehicleController
r typeinfo for IVP_3D_Solver_KK_PARALLEL
d typeinfo for IVP_Actuator_Force_Active
d typeinfo for IVP_Constraint_Solver_Car
d typeinfo for IVP_Meta_Collision_Filter
d typeinfo for IVP_U_Active_Add_Multiple
d typeinfo for IVP_U_Active_Int_Listener
d typeinfo for IVP_U_Active_Terminal_Int
r typeinfo for CPhysCollideCompactSurface
r typeinfo for CPhysicsListenerConstraint
r typeinfo for CPredictedPlayerController
r typeinfo for hk_Local_Constraint_System
r typeinfo for hk_Stiff_Spring_Constraint
d typeinfo for IVP_Actuator_Spring_Active
d typeinfo for IVP_Actuator_Torque_Active
d typeinfo for IVP_Car_System_Real_Wheels
r typeinfo for IVP_Controller_Independent
d typeinfo for IVP_Controller_Raycast_Car
d typeinfo for IVP_Event_Manager_Standard
d typeinfo for IVP_SurfaceManager_Polygon
d typeinfo for IVP_U_Active_Float_Delayed
d typeinfo for IVP_U_Active_Value_Manager
d typeinfo for IVP_Actuator_Rot_Mot_Active
d typeinfo for IVP_Real_Object_Fast_Static
d typeinfo for IVP_U_Active_Float_Listener
r typeinfo for IPhysicsSurfacePropsInternal
r typeinfo for IVP_Collision_Delegator_Root
d typeinfo for IVP_U_Active_Terminal_Double
d typeinfo for IVP_Liquid_Surface_Descriptor
d typeinfo for IVP_Listener_Check_Dist_Event
d typeinfo for IVP_PerformanceCounter_Simple
d typeinfo for IVP_Attacher_To_Cores_Buoyancy
r typeinfo for IVP_Object_Callback_Table_Hash
r typeinfo for IVP_SurfaceManager_VirtualMesh
r typeinfo for IVP_3D_Solver_VEC_PARALLEL_AREA
d typeinfo for IVP_Standard_Gravity_Controller
r typeinfo for CVPhysPtrUtlVectorSaveRestoreOps
r typeinfo for CPredictedPhysicsMotionController
r typeinfo for IVP_Collision_Callback_Table_Hash
r typeinfo for CPhysics_Car_System_Raycast_Wheels
r typeinfo for IPredictable_Controller_Independant
d typeinfo for IVP_Collision_Filter_Exclusive_Pair
r typeinfo for IVP_3D_Solver_DISTANCE_OF_TWO_POINTS
r typeinfo for IVP_Collision_Delegator_Root_Mindist
d typeinfo for IVP_Liquid_Surface_Descriptor_Simple
r typeinfo for CPredictable_Controller_Independant_Stub
r typeinfo for ConVar
r typeinfo for IConVar
r typeinfo for CFmtStrN<256, false>
r typeinfo for CSurface
r typeinfo for IPhysics
r typeinfo for IVP_Ball
r typeinfo for CTraceIVP
d typeinfo for IVP_U_Set<IVP_Real_Object>
d typeinfo for IVP_U_Set<IVP_Mindist_Base>
d typeinfo for IVP_U_Set<IVP_Core>
d typeinfo for IVP_VHash
V typeinfo for __cxxabiv1::__forced_unwind
V typeinfo for __cxxabiv1::__foreign_exception
V typeinfo for __gnu_cxx::recursive_init_error
V typeinfo for __gnu_cxx::__concurrence_lock_error
V typeinfo for __gnu_cxx::__concurrence_unlock_error
d typeinfo for std::bad_exception
d typeinfo for std::exception
r typeinfo name for ConCommand
r typeinfo name for CTraceAABB
r typeinfo name for CTraceCone
r typeinfo name for hk_Console
r typeinfo name for hk_Link_EF
r typeinfo name for IAppSystem
r typeinfo name for IVP_Object
r typeinfo name for CPolyhedron
r typeinfo name for IConvexInfo
r typeinfo name for IVP_Cluster
r typeinfo name for IVP_Mindist
r typeinfo name for IVP_Polygon
r typeinfo name for IVP_Synapse
r typeinfo name for CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>
r typeinfo name for CDeleteProxy<IPhysicsConstraint>
r typeinfo name for CEmptyConVar
r typeinfo name for CPhysCollide
r typeinfo name for CTraceSolver
r typeinfo name for IPhysCollide
r typeinfo name for ITraceObject
r typeinfo name for IVP_Actuator
r typeinfo name for IVP_Material
r typeinfo name for IVP_Triangle
r typeinfo name for aligned_tmp_t
r typeinfo name for CSleepObjects
r typeinfo name for CVoidPairHash
r typeinfo name for hk_Constraint
r typeinfo name for IVP_3D_Solver
r typeinfo name for IVP_CFEP_Hash
r typeinfo name for IVP_Collision
r typeinfo name for CBaseAppSystem<IPhysics>
r typeinfo name for CDefConvexInfo
r typeinfo name for ConCommandBase
r typeinfo name for CPhysicsObject
r typeinfo name for CPhysicsSpring
r typeinfo name for CVPhysicsParse
r typeinfo name for IPhysicsObject
r typeinfo name for IPhysicsSpring
r typeinfo name for IVP_Car_System
r typeinfo name for IVP_Constraint
r typeinfo name for IVP_Controller
r typeinfo name for IVP_OO_Watcher
r typeinfo name for IVP_OV_Element
r typeinfo name for IVP_point_hash
r typeinfo name for IVP_Ray_Solver
r typeinfo name for IVP_Synapse_OO
r typeinfo name for IVP_Time_Event
r typeinfo name for CCollisionQuery
r typeinfo name for CDragController
r typeinfo name for CObjectPairHash
r typeinfo name for CTier0AppSystem<IPhysics>
r typeinfo name for CTier1AppSystem<IPhysics, 0>
r typeinfo name for ICollisionQuery
r typeinfo name for ISaveRestoreOps
r typeinfo name for IVP_Real_Object
r typeinfo name for CCollisionSolver
r typeinfo name for CDataManagerBase
r typeinfo name for CDefaultAccessor
r typeinfo name for CDllDemandLoader
r typeinfo name for CPhysics_Airboat
r typeinfo name for IDeleteQueueItem
r typeinfo name for IVP_Mindist_Base
r typeinfo name for IVP_ov_tree_hash
r typeinfo name for IVP_Synapse_Real
r typeinfo name for IVP_Time_Event_D
r typeinfo name for IVP_Time_Event_N
r typeinfo name for IVP_U_Active_Add
r typeinfo name for IVP_U_Active_Int
r typeinfo name for IVP_U_Active_Sub
r typeinfo name for IVP_U_Set_Active<IVP_Real_Object>
r typeinfo name for IVP_U_Set_Active<IVP_Mindist_Base>
r typeinfo name for IVP_U_Set_Active<IVP_Core>
r typeinfo name for CAlignedNewDelete<16, aligned_tmp_t>
r typeinfo name for CBuoyancyAttacher
r typeinfo name for CFrictionSnapshot
r typeinfo name for CMaterialIndexOps
r typeinfo name for collision_rules_t
r typeinfo name for CPhysicsCollision
r typeinfo name for CPhysicsInterface
r typeinfo name for CPlayerController
r typeinfo name for CShadowController
r typeinfo name for IPhysicsCollision
r typeinfo name for IVP_Event_Manager
r typeinfo name for IVP_I_Point_VHash
r typeinfo name for IVP_Listener_Hull
r typeinfo name for IVP_Range_Manager
r typeinfo name for IVP_U_Active_Mult
r typeinfo name for IVP_U_Active_Sine
r typeinfo name for CDefSaveRestoreOps
r typeinfo name for CPhysicsConstraint
r typeinfo name for CUtlCharConversion
r typeinfo name for CVehicleController
r typeinfo name for IPhysicsConstraint
r typeinfo name for IVP_Actuator_Extra
r typeinfo name for IVP_Actuator_Force
r typeinfo name for IVP_Anomaly_Limits
r typeinfo name for IVPhysicsKeyParser
r typeinfo name for IVP_I_FPoint_VHash
r typeinfo name for IVP_Ray_Solver_Min
r typeinfo name for IVP_SurfaceManager
r typeinfo name for IVP_Time_Event_PSI
r typeinfo name for IVP_U_Active_Float
r typeinfo name for IVP_U_Active_Limit
r typeinfo name for IVP_U_Active_Pulse
r typeinfo name for IVP_U_Active_Value
r typeinfo name for CIVPMaterialManager
r typeinfo name for CPhysicsEnvironment
r typeinfo name for CUtlNoEscConversion
r typeinfo name for hk_Fixed_Constraint
r typeinfo name for hk_Hinge_Constraint
r typeinfo name for IPhysicsEnvironment
r typeinfo name for IVP_3D_Solver_PK_KK
r typeinfo name for IVP_Actuator_Spring
r typeinfo name for IVP_Actuator_Torque
r typeinfo name for IVP_Anomaly_Manager
r typeinfo name for IVP_Event_Manager_D
r typeinfo name for IVP_Friction_System
r typeinfo name for IVPhysicsKeyHandler
r typeinfo name for IVP_Listener_Object
r typeinfo name for IVP_Listener_Spring
r typeinfo name for IVP_Material_Simple
r typeinfo name for IVP_U_Active_Square
r typeinfo name for IVP_U_Active_Switch
r typeinfo name for CAirboatFrictionData
r typeinfo name for ConVar_ServerBounded
r typeinfo name for CPhysicsCollisionSet
r typeinfo name for CPhysicsFrictionData
r typeinfo name for CPhysicsSurfaceProps
r typeinfo name for CTraceSolverAABBTree
r typeinfo name for hk_Pulley_Constraint
r typeinfo name for IPhysicsCollisionSet
r typeinfo name for IPhysicsSurfaceProps
r typeinfo name for IVP_3D_Solver_PF_NPF
r typeinfo name for IVP_3D_Solver_S_VALS
r typeinfo name for IVP_Actuator_Rot_Mot
r typeinfo name for IVP_Collision_Filter
r typeinfo name for IVP_Constraint_Local
r typeinfo name for IVP_Controller_Golem
r typeinfo name for IVP_Controller_VHash
r typeinfo name for IVP_Listener_Phantom
r typeinfo name for IVP_Material_Manager
r typeinfo name for IVP_Ray_Hit_Listener
r typeinfo name for IVP_Real_Object_Fast
r typeinfo name for IVP_Universe_Manager
r typeinfo name for CPhysicsCollisionData
r typeinfo name for CUtlCStringConversion
r typeinfo name for CVPhysicsDebugOverlay
r typeinfo name for CVPhysicsPackedParser
r typeinfo name for hk_Ragdoll_Constraint
r typeinfo name for IPhysicsCollisionData
r typeinfo name for IVP_3D_Solver_KK_COLL
r typeinfo name for IVP_3D_Solver_PF_COLL
r typeinfo name for IVP_3D_Solver_PK_COLL
r typeinfo name for IVP_Active_Value_Hash
r typeinfo name for IVP_Anchor_Check_Dist
r typeinfo name for IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>
r typeinfo name for IVP_Controller_Motion
r typeinfo name for IVPhysicsDebugOverlay
r typeinfo name for IVP_Mindist_Recursive
r typeinfo name for CPolyhedron_AllocByNew
r typeinfo name for CPolyhedron_TempMemory
r typeinfo name for IPhysicsCollisionEvent
r typeinfo name for IPhysicsObjectPairHash
r typeinfo name for IVP_Actuator_Two_Point
r typeinfo name for IVP_BetterDebugmanager
r typeinfo name for IVP_Controller_Phantom
r typeinfo name for IVP_Listener_Collision
r typeinfo name for IVP_PerformanceCounter
r typeinfo name for CEmptyCollisionListener
r typeinfo name for CPhysCollideVirtualMesh
r typeinfo name for CPhysicsConstraintGroup
r typeinfo name for CPhysicsFluidController
r typeinfo name for CPredictedPhysicsObject
r typeinfo name for CSplitScreenAddedConVar
r typeinfo name for CTraceSolverSweptObject
r typeinfo name for CVPhysPtrSaveRestoreOps
r typeinfo name for hk_Breakable_Constraint
r typeinfo name for hk_Prismatic_Constraint
r typeinfo name for hk_Rigid_Body_Binary_EF
r typeinfo name for IConCommandBaseAccessor
r typeinfo name for IPhysicsConstraintGroup
r typeinfo name for IPhysicsFluidController
r typeinfo name for IPredictedPhysicsObject
r typeinfo name for IVP_Actuator_Four_Point
r typeinfo name for IVP_Actuator_Stabilizer
r typeinfo name for IVP_Actuator_Suspension
r typeinfo name for IVP_Collision_Delegator
r typeinfo name for IVP_Controller_Buoyancy
r typeinfo name for IVP_Friction_Sys_Energy
r typeinfo name for IVP_Friction_Sys_Static
r typeinfo name for IVP_Listener_Constraint
r typeinfo name for IVP_Listener_Set_Active<IVP_Core>
r typeinfo name for IVP_Ray_Solver_Min_Hash
r typeinfo name for IVP_SurfaceManager_Ball
r typeinfo name for IVP_U_Active_Test_Range
r typeinfo name for CLiquidSurfaceDescriptor
r typeinfo name for CPhysicsMotionController
r typeinfo name for IPhysicsFrictionSnapshot
r typeinfo name for IPhysicsMotionController
r typeinfo name for IPhysicsPlayerController
r typeinfo name for IPhysicsShadowController
r typeinfo name for IVP_Controller_Dependent
r typeinfo name for IVP_U_Active_Int_Delayed
r typeinfo name for CPhysicsListenerCollision
r typeinfo name for hk_Ball_Socket_Constraint
r typeinfo name for IPhysicsVehicleController
r typeinfo name for IVP_3D_Solver_KK_PARALLEL
r typeinfo name for IVP_Actuator_Force_Active
r typeinfo name for IVP_Constraint_Solver_Car
r typeinfo name for IVP_Meta_Collision_Filter
r typeinfo name for IVP_U_Active_Add_Multiple
r typeinfo name for IVP_U_Active_Int_Listener
r typeinfo name for IVP_U_Active_Terminal_Int
r typeinfo name for CPhysCollideCompactSurface
r typeinfo name for CPhysicsListenerConstraint
r typeinfo name for CPredictedPlayerController
r typeinfo name for hk_Local_Constraint_System
r typeinfo name for hk_Stiff_Spring_Constraint
r typeinfo name for IVP_Actuator_Spring_Active
r typeinfo name for IVP_Actuator_Torque_Active
r typeinfo name for IVP_Car_System_Real_Wheels
r typeinfo name for IVP_Controller_Independent
r typeinfo name for IVP_Controller_Raycast_Car
r typeinfo name for IVP_Event_Manager_Standard
r typeinfo name for IVP_SurfaceManager_Polygon
r typeinfo name for IVP_U_Active_Float_Delayed
r typeinfo name for IVP_U_Active_Value_Manager
r typeinfo name for IVP_Actuator_Rot_Mot_Active
r typeinfo name for IVP_Real_Object_Fast_Static
r typeinfo name for IVP_U_Active_Float_Listener
r typeinfo name for IPhysicsSurfacePropsInternal
r typeinfo name for IVP_Collision_Delegator_Root
r typeinfo name for IVP_U_Active_Terminal_Double
r typeinfo name for IVP_Liquid_Surface_Descriptor
r typeinfo name for IVP_Listener_Check_Dist_Event
r typeinfo name for IVP_PerformanceCounter_Simple
r typeinfo name for IVP_Attacher_To_Cores_Buoyancy
r typeinfo name for IVP_Object_Callback_Table_Hash
r typeinfo name for IVP_SurfaceManager_VirtualMesh
r typeinfo name for IVP_3D_Solver_VEC_PARALLEL_AREA
r typeinfo name for IVP_Standard_Gravity_Controller
r typeinfo name for CVPhysPtrUtlVectorSaveRestoreOps
r typeinfo name for CPredictedPhysicsMotionController
r typeinfo name for IVP_Collision_Callback_Table_Hash
r typeinfo name for CPhysics_Car_System_Raycast_Wheels
r typeinfo name for IPredictable_Controller_Independant
r typeinfo name for IVP_Collision_Filter_Exclusive_Pair
r typeinfo name for IVP_3D_Solver_DISTANCE_OF_TWO_POINTS
r typeinfo name for IVP_Collision_Delegator_Root_Mindist
r typeinfo name for IVP_Liquid_Surface_Descriptor_Simple
r typeinfo name for CPredictable_Controller_Independant_Stub
r typeinfo name for ConVar
r typeinfo name for IConVar
r typeinfo name for CFmtStrN<256, false>
r typeinfo name for CSurface
r typeinfo name for IPhysics
r typeinfo name for IVP_Ball
r typeinfo name for CTraceIVP
r typeinfo name for IVP_U_Set<IVP_Real_Object>
r typeinfo name for IVP_U_Set<IVP_Mindist_Base>
r typeinfo name for IVP_U_Set<IVP_Core>
r typeinfo name for IVP_VHash
V typeinfo name for __cxxabiv1::__forced_unwind
V typeinfo name for __cxxabiv1::__foreign_exception
V typeinfo name for __gnu_cxx::recursive_init_error
V typeinfo name for __gnu_cxx::__concurrence_lock_error
V typeinfo name for __gnu_cxx::__concurrence_unlock_error
r typeinfo name for std::bad_exception
r typeinfo name for std::exception
r vtable for ConCommand
r vtable for CTraceAABB
r vtable for CTraceCone
r vtable for hk_Console
r vtable for hk_Link_EF
d vtable for IVP_Object
r vtable for CPolyhedron
d vtable for IVP_Cluster
r vtable for IVP_Mindist
d vtable for IVP_Polygon
r vtable for IVP_Synapse
r vtable for CDataManager<CMeshInstance, virtualmeshlist_t, CMeshInstance*, CThreadFastMutex>
r vtable for CDeleteProxy<IPhysicsConstraint>
r vtable for CEmptyConVar
r vtable for CPhysCollide
r vtable for CTraceSolver
r vtable for IPhysCollide
r vtable for ITraceObject
d vtable for IVP_Actuator
d vtable for IVP_Material
r vtable for IVP_Triangle
r vtable for CSleepObjects
r vtable for CVoidPairHash
r vtable for hk_Constraint
d vtable for IVP_3D_Solver
d vtable for IVP_CFEP_Hash
r vtable for IVP_Collision
r vtable for CDefConvexInfo
r vtable for ConCommandBase
r vtable for CPhysicsObject
r vtable for CPhysicsSpring
r vtable for CVPhysicsParse
r vtable for IPhysicsObject
r vtable for IPhysicsSpring
d vtable for IVP_Car_System
d vtable for IVP_Constraint
r vtable for IVP_Controller
r vtable for IVP_OO_Watcher
r vtable for IVP_OV_Element
r vtable for IVP_point_hash
d vtable for IVP_Ray_Solver
r vtable for IVP_Synapse_OO
d vtable for IVP_Time_Event
r vtable for CCollisionQuery
r vtable for CDragController
r vtable for CObjectPairHash
r vtable for ICollisionQuery
r vtable for ISaveRestoreOps
d vtable for IVP_Real_Object
r vtable for CCollisionSolver
r vtable for CDataManagerBase
r vtable for CDefaultAccessor
r vtable for CDllDemandLoader
r vtable for CPhysics_Airboat
r vtable for IDeleteQueueItem
r vtable for IVP_Mindist_Base
r vtable for IVP_ov_tree_hash
r vtable for IVP_Synapse_Real
d vtable for IVP_Time_Event_D
d vtable for IVP_Time_Event_N
d vtable for IVP_U_Active_Add
d vtable for IVP_U_Active_Int
d vtable for IVP_U_Active_Sub
d vtable for IVP_U_Set_Active<IVP_Real_Object>
d vtable for IVP_U_Set_Active<IVP_Mindist_Base>
d vtable for IVP_U_Set_Active<IVP_Core>
r vtable for CBuoyancyAttacher
r vtable for CFrictionSnapshot
r vtable for CMaterialIndexOps
r vtable for collision_rules_t
r vtable for CPhysicsCollision
r vtable for CPhysicsInterface
r vtable for CPlayerController
r vtable for CShadowController
r vtable for IPhysicsCollision
d vtable for IVP_Event_Manager
r vtable for IVP_I_Point_VHash
d vtable for IVP_Listener_Hull
r vtable for IVP_Range_Manager
d vtable for IVP_U_Active_Mult
d vtable for IVP_U_Active_Sine
r vtable for CDefSaveRestoreOps
r vtable for CPhysicsConstraint
r vtable for CUtlCharConversion
r vtable for CVehicleController
r vtable for IPhysicsConstraint
d vtable for IVP_Actuator_Extra
d vtable for IVP_Actuator_Force
d vtable for IVP_Anomaly_Limits
r vtable for IVPhysicsKeyParser
r vtable for IVP_I_FPoint_VHash
d vtable for IVP_Ray_Solver_Min
d vtable for IVP_SurfaceManager
d vtable for IVP_Time_Event_PSI
d vtable for IVP_U_Active_Float
d vtable for IVP_U_Active_Limit
d vtable for IVP_U_Active_Pulse
d vtable for IVP_U_Active_Value
r vtable for CIVPMaterialManager
r vtable for CPhysicsEnvironment
r vtable for CUtlNoEscConversion
r vtable for hk_Fixed_Constraint
r vtable for hk_Hinge_Constraint
r vtable for IPhysicsEnvironment
r vtable for IVP_3D_Solver_PK_KK
d vtable for IVP_Actuator_Spring
d vtable for IVP_Actuator_Torque
d vtable for IVP_Anomaly_Manager
d vtable for IVP_Event_Manager_D
d vtable for IVP_Friction_System
d vtable for IVP_Listener_Object
d vtable for IVP_Listener_Spring
d vtable for IVP_Material_Simple
d vtable for IVP_U_Active_Square
d vtable for IVP_U_Active_Switch
r vtable for CAirboatFrictionData
r vtable for CPhysicsCollisionSet
r vtable for CPhysicsFrictionData
r vtable for CPhysicsSurfaceProps
r vtable for CTraceSolverAABBTree
r vtable for hk_Pulley_Constraint
r vtable for IPhysicsCollisionSet
r vtable for IPhysicsSurfaceProps
r vtable for IVP_3D_Solver_PF_NPF
r vtable for IVP_3D_Solver_S_VALS
d vtable for IVP_Actuator_Rot_Mot
d vtable for IVP_Collision_Filter
r vtable for IVP_Constraint_Local
r vtable for IVP_Controller_Golem
d vtable for IVP_Controller_VHash
d vtable for IVP_Listener_Phantom
d vtable for IVP_Material_Manager
d vtable for IVP_Ray_Hit_Listener
d vtable for IVP_Real_Object_Fast
d vtable for IVP_Universe_Manager
r vtable for CPhysicsCollisionData
r vtable for CUtlCStringConversion
r vtable for CVPhysicsDebugOverlay
r vtable for CVPhysicsPackedParser
r vtable for hk_Ragdoll_Constraint
r vtable for IVP_3D_Solver_KK_COLL
r vtable for IVP_3D_Solver_PF_COLL
r vtable for IVP_3D_Solver_PK_COLL
d vtable for IVP_Active_Value_Hash
d vtable for IVP_Anchor_Check_Dist
r vtable for IVP_Attacher_To_Cores<IVP_Controller_Buoyancy>
r vtable for IVP_Controller_Motion
r vtable for IVP_Mindist_Recursive
r vtable for CPolyhedron_AllocByNew
r vtable for CPolyhedron_TempMemory
r vtable for IPhysicsObjectPairHash
d vtable for IVP_Actuator_Two_Point
d vtable for IVP_BetterDebugmanager
d vtable for IVP_Controller_Phantom
d vtable for IVP_Listener_Collision
d vtable for IVP_PerformanceCounter
r vtable for CEmptyCollisionListener
r vtable for CPhysCollideVirtualMesh
r vtable for CPhysicsConstraintGroup
r vtable for CPhysicsFluidController
r vtable for CPredictedPhysicsObject
r vtable for CSplitScreenAddedConVar
r vtable for CTraceSolverSweptObject
r vtable for CVPhysPtrSaveRestoreOps
r vtable for hk_Breakable_Constraint
r vtable for hk_Prismatic_Constraint
r vtable for hk_Rigid_Body_Binary_EF
r vtable for IPhysicsConstraintGroup
r vtable for IPhysicsFluidController
r vtable for IPredictedPhysicsObject
d vtable for IVP_Actuator_Four_Point
d vtable for IVP_Actuator_Stabilizer
d vtable for IVP_Actuator_Suspension
r vtable for IVP_Collision_Delegator
d vtable for IVP_Controller_Buoyancy
d vtable for IVP_Friction_Sys_Energy
d vtable for IVP_Friction_Sys_Static
d vtable for IVP_Listener_Constraint
r vtable for IVP_Listener_Set_Active<IVP_Core>
d vtable for IVP_Ray_Solver_Min_Hash
r vtable for IVP_SurfaceManager_Ball
d vtable for IVP_U_Active_Test_Range
r vtable for CLiquidSurfaceDescriptor
r vtable for CPhysicsMotionController
r vtable for IPhysicsFrictionSnapshot
r vtable for IPhysicsMotionController
r vtable for IPhysicsPlayerController
r vtable for IPhysicsShadowController
r vtable for IVP_Controller_Dependent
d vtable for IVP_U_Active_Int_Delayed
r vtable for CPhysicsListenerCollision
r vtable for hk_Ball_Socket_Constraint
r vtable for IPhysicsVehicleController
r vtable for IVP_3D_Solver_KK_PARALLEL
d vtable for IVP_Actuator_Force_Active
d vtable for IVP_Constraint_Solver_Car
d vtable for IVP_Meta_Collision_Filter
d vtable for IVP_U_Active_Add_Multiple
d vtable for IVP_U_Active_Int_Listener
d vtable for IVP_U_Active_Terminal_Int
r vtable for CPhysCollideCompactSurface
r vtable for CPhysicsListenerConstraint
r vtable for CPredictedPlayerController
r vtable for hk_Local_Constraint_System
r vtable for hk_Stiff_Spring_Constraint
d vtable for IVP_Actuator_Spring_Active
d vtable for IVP_Actuator_Torque_Active
d vtable for IVP_Car_System_Real_Wheels
r vtable for IVP_Controller_Independent
d vtable for IVP_Controller_Raycast_Car
d vtable for IVP_Event_Manager_Standard
d vtable for IVP_SurfaceManager_Polygon
d vtable for IVP_U_Active_Float_Delayed
d vtable for IVP_U_Active_Value_Manager
d vtable for IVP_Actuator_Rot_Mot_Active
d vtable for IVP_Real_Object_Fast_Static
d vtable for IVP_U_Active_Float_Listener
r vtable for IPhysicsSurfacePropsInternal
r vtable for IVP_Collision_Delegator_Root
d vtable for IVP_U_Active_Terminal_Double
d vtable for IVP_Liquid_Surface_Descriptor
d vtable for IVP_Listener_Check_Dist_Event
d vtable for IVP_PerformanceCounter_Simple
d vtable for IVP_Attacher_To_Cores_Buoyancy
r vtable for IVP_Object_Callback_Table_Hash
r vtable for IVP_SurfaceManager_VirtualMesh
r vtable for IVP_3D_Solver_VEC_PARALLEL_AREA
d vtable for IVP_Standard_Gravity_Controller
r vtable for CVPhysPtrUtlVectorSaveRestoreOps
r vtable for CPredictedPhysicsMotionController
r vtable for IVP_Collision_Callback_Table_Hash
r vtable for CPhysics_Car_System_Raycast_Wheels
r vtable for IPredictable_Controller_Independant
d vtable for IVP_Collision_Filter_Exclusive_Pair
r vtable for IVP_3D_Solver_DISTANCE_OF_TWO_POINTS
r vtable for IVP_Collision_Delegator_Root_Mindist
d vtable for IVP_Liquid_Surface_Descriptor_Simple
r vtable for CPredictable_Controller_Independant_Stub
r vtable for ConVar
r vtable for IConVar
r vtable for CFmtStrN<256, false>
r vtable for CSurface
r vtable for IVP_Ball
r vtable for CTraceIVP
d vtable for IVP_U_Set<IVP_Real_Object>
d vtable for IVP_U_Set<IVP_Mindist_Base>
d vtable for IVP_U_Set<IVP_Core>
d vtable for IVP_VHash
V vtable for __cxxabiv1::__forced_unwind
U vtable for __cxxabiv1::__class_type_info
V vtable for __cxxabiv1::__foreign_exception
U vtable for __cxxabiv1::__si_class_type_info
U vtable for __cxxabiv1::__vmi_class_type_info
V vtable for __gnu_cxx::recursive_init_error
V vtable for __gnu_cxx::__concurrence_lock_error
V vtable for __gnu_cxx::__concurrence_unlock_error
d vtable for std::bad_exception
d vtable for std::exception
b datamap_t* DataMapInit<vehicleparams_t>(vehicleparams_t*)::nameHolder
d datamap_t* DataMapInit<vehicleparams_t>(vehicleparams_t*)::dataDesc
b datamap_t* DataMapInit<physcollideheader_t>(physcollideheader_t*)::nameHolder
d datamap_t* DataMapInit<physcollideheader_t>(physcollideheader_t*)::dataDesc
b datamap_t* DataMapInit<vehicle_axleparams_t>(vehicle_axleparams_t*)::nameHolder
d datamap_t* DataMapInit<vehicle_axleparams_t>(vehicle_axleparams_t*)::dataDesc
b datamap_t* DataMapInit<vehicle_bodyparams_t>(vehicle_bodyparams_t*)::nameHolder
d datamap_t* DataMapInit<vehicle_bodyparams_t>(vehicle_bodyparams_t*)::dataDesc
b datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)::nameHolder
d datamap_t* DataMapInit<vehicle_wheelparams_t>(vehicle_wheelparams_t*)::dataDesc
b datamap_t* DataMapInit<compactsurfaceheader_t>(compactsurfaceheader_t*)::nameHolder
d datamap_t* DataMapInit<compactsurfaceheader_t>(compactsurfaceheader_t*)::dataDesc
b datamap_t* DataMapInit<vehicle_engineparams_t>(vehicle_engineparams_t*)::nameHolder
d datamap_t* DataMapInit<vehicle_engineparams_t>(vehicle_engineparams_t*)::dataDesc
b datamap_t* DataMapInit<vehicle_steeringparams_t>(vehicle_steeringparams_t*)::nameHolder
d datamap_t* DataMapInit<vehicle_steeringparams_t>(vehicle_steeringparams_t*)::dataDesc
b datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)::nameHolder
d datamap_t* DataMapInit<vehicle_operatingparams_t>(vehicle_operatingparams_t*)::dataDesc
b datamap_t* DataMapInit<vehicle_suspensionparams_t>(vehicle_suspensionparams_t*)::nameHolder
d datamap_t* DataMapInit<vehicle_suspensionparams_t>(vehicle_suspensionparams_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_cphysicsobject_t>(vphysics_save_cphysicsobject_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_cphysicsobject_t>(vphysics_save_cphysicsobject_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_cphysicsspring_t>(vphysics_save_cphysicsspring_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_cphysicsspring_t>(vphysics_save_cphysicsspring_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_constraintfixed_t>(vphysics_save_constraintfixed_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_constraintfixed_t>(vphysics_save_constraintfixed_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_constrainthinge_t>(vphysics_save_constrainthinge_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_constrainthinge_t>(vphysics_save_constrainthinge_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_constraintlength_t>(vphysics_save_constraintlength_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_constraintlength_t>(vphysics_save_constraintlength_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_constraintpulley_t>(vphysics_save_constraintpulley_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_constraintpulley_t>(vphysics_save_constraintpulley_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_motioncontroller_t>(vphysics_save_motioncontroller_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_motioncontroller_t>(vphysics_save_motioncontroller_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_constraintragdoll_t>(vphysics_save_constraintragdoll_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_constraintragdoll_t>(vphysics_save_constraintragdoll_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_constraintsliding_t>(vphysics_save_constraintsliding_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_constraintsliding_t>(vphysics_save_constraintsliding_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_cshadowcontroller_t>(vphysics_save_cshadowcontroller_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_cphysicsconstraint_t>(vphysics_save_cphysicsconstraint_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_cphysicsconstraint_t>(vphysics_save_cphysicsconstraint_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_cvehiclecontroller_t>(vphysics_save_cvehiclecontroller_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_cvehiclecontroller_t>(vphysics_save_cvehiclecontroller_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_constraintaxislimit_t>(vphysics_save_constraintaxislimit_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_constraintaxislimit_t>(vphysics_save_constraintaxislimit_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_constraintbreakable_t>(vphysics_save_constraintbreakable_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_constraintbreakable_t>(vphysics_save_constraintbreakable_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_shadowcontrolparams_t>(vphysics_save_shadowcontrolparams_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_shadowcontrolparams_t>(vphysics_save_shadowcontrolparams_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_constraintballsocket_t>(vphysics_save_constraintballsocket_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_constraintballsocket_t>(vphysics_save_constraintballsocket_t*)::dataDesc
b datamap_t* DataMapInit<vphysics_save_cphysicsconstraintgroup_t>(vphysics_save_cphysicsconstraintgroup_t*)::nameHolder
d datamap_t* DataMapInit<vphysics_save_cphysicsconstraintgroup_t>(vphysics_save_cphysicsconstraintgroup_t*)::dataDesc
d qh_new_qhull(int, int, double*, unsigned int, char*, _IO_FILE*, _IO_FILE*)::firstcall
b V_ParseToken(char const*, char*, int, bool*, characterset_t*)::s_BreakSetIncludingColons
b V_ParseToken(char const*, char*, int, bool*, characterset_t*)::built
b V_pretifymem(float, int, bool)::output
b V_pretifymem(float, int, bool)::current
b V_pretifynum(long long)::output
b V_pretifynum(long long)::current
r V_LogMultiline(bool, char const*, char const*, unsigned int, CUtlString&)::HEX
b p_read_first_token(_IO_FILE*)::buffer
b Bias(float, float)::lastExponent
b pathmatch(char const*, char**, bool, char*, unsigned int)::s_pszDbgPathMatch
b InitializeCharacterSets()::s_CharacterSetInitialized
b CUtlSymbol::Initialize()::symbolsInitialized
b (anonymous namespace)::get_global()::global
r IVP_U_Matrix::rotate_invers(IVP_COORDINATE_INDEX, float, IVP_U_Matrix*)::pm
d IVP_U_Matrix::rotate(IVP_COORDINATE_INDEX, float, IVP_U_Matrix*)::pm
d IVP_U_Matrix3::init_rotated3(IVP_COORDINATE_INDEX, float)::pm
d IVP_U_Min_Hash::add(void*, float)::sort_counter
b CDataManagerBase::GetForFreeByIndex(unsigned short)::__executeCount
b CPhysicsCollision::ConvexFromConvexPolyhedron(CPolyhedron const&)::developerRef
r CPhysicsEnvironment::Save(physsaveparams_t const&)::saveFuncs
r CPhysicsEnvironment::Restore(physrestoreparams_t const&)::restoreFuncs
b IVP_Material_Manager::get_material_by_index(IVP_Real_Object*, IVP_U_Point const*, int)::simple
d IVV_Cluster_Min_Hash::add(void*, float)::sort_counter
d SplitScreenConVarRef::Init(char const*, bool)::bFirst
r IVP_Compact_Ledge_Solver::calc_unscaled_KK_vals(IVP_KK_Input const&, IVP_Unscaled_KK_Result*)::C.691
b IVP_BetterStatisticsmanager::set_simulation_time(float)::time_of_last_update
b CFmtStrN<256, false>::sprintf(char const*, ...)::scAsserted
b CFmtStrN<256, false>::CFmtStrN(char const*, ...)::scAsserted
d ConVarRef::Init(char const*, bool)::bFirst
b __gnu_cxx::__verbose_terminate_handler()::terminating
b hk_Memory::get_instance()::s_memory_instance
r CPhysicsObject::OutputDebugInfo() const::pAxisNames
